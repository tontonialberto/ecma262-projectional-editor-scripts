[
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": []
          }
        }
      }
    },
    "appearsIn": [
      "Yield",
      "UTC",
      "TimeZoneString",
      "SuspendThisAgent",
      "ResolveThisBinding",
      "PutValue",
      "PerformEval",
      "MakeSuperPropertyReference",
      "LocalTime",
      "InitializeHostDefinedRealm",
      "GetSuperConstructor",
      "GetNewTarget",
      "DoWait"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReferenceExpression": {
            "ref": {
              "PropertyReference": {
                "PropertyReference": {
                  "base": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  },
                  "prop": {
                    "FieldProperty": {
                      "FieldProperty": {
                        "name": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "WeakRefDeref",
      "ValidateAtomicAccess",
      "ValidateAndApplyPropertyDescriptor",
      "TypedArraySetElement",
      "TypedArrayLength",
      "TypedArrayGetElement",
      "TypedArrayByteLength",
      "ThisSymbolValue",
      "ThisStringValue",
      "ThisNumberValue",
      "ThisBooleanValue",
      "SymbolDescriptiveString",
      "StringGetOwnProperty",
      "SetViewValue",
      "SetValueInBuffer",
      "SetTypedArrayFromTypedArray",
      "SetRealmGlobalObject",
      "SetFunctionName",
      "SetDefaultGlobalBindings",
      "SerializeJSONObject",
      "SerializeJSONArray",
      "ScriptEvaluation",
      "RunJobs",
      "ResolvePrivateIdentifier",
      "RepeatMatcher",
      "RejectPromise",
      "RegExpHasFlag",
      "RegExpBuiltinExec",
      "Record[StringExoticObject].OwnPropertyKeys",
      "Record[StringExoticObject].DefineOwnProperty",
      "Record[SourceTextModuleRecord].InitializeEnvironment",
      "Record[ProxyExoticObject].SetPrototypeOf",
      "Record[ProxyExoticObject].Set",
      "Record[ProxyExoticObject].PreventExtensions",
      "Record[ProxyExoticObject].OwnPropertyKeys",
      "Record[ProxyExoticObject].IsExtensible",
      "Record[ProxyExoticObject].HasProperty",
      "Record[ProxyExoticObject].GetPrototypeOf",
      "Record[ProxyExoticObject].GetOwnProperty",
      "Record[ProxyExoticObject].Get",
      "Record[ProxyExoticObject].Delete",
      "Record[ProxyExoticObject].DefineOwnProperty",
      "Record[ProxyExoticObject].Construct",
      "Record[ProxyExoticObject].Call",
      "Record[ObjectEnvironmentRecord].SetMutableBinding",
      "Record[ObjectEnvironmentRecord].HasBinding",
      "Record[ObjectEnvironmentRecord].GetBindingValue",
      "Record[ObjectEnvironmentRecord].DeleteBinding",
      "Record[ObjectEnvironmentRecord].CreateMutableBinding",
      "Record[ModuleNamespaceExoticObject].OwnPropertyKeys",
      "Record[ModuleNamespaceExoticObject].HasProperty",
      "Record[ModuleNamespaceExoticObject].GetOwnProperty",
      "Record[ModuleNamespaceExoticObject].Get",
      "Record[ModuleNamespaceExoticObject].Delete",
      "Record[ModuleEnvironmentRecord].GetBindingValue",
      "Record[GlobalEnvironmentRecord].SetMutableBinding",
      "Record[GlobalEnvironmentRecord].InitializeBinding",
      "Record[GlobalEnvironmentRecord].HasVarDeclaration",
      "Record[GlobalEnvironmentRecord].HasRestrictedGlobalProperty",
      "Record[GlobalEnvironmentRecord].HasLexicalDeclaration",
      "Record[GlobalEnvironmentRecord].HasBinding",
      "Record[GlobalEnvironmentRecord].GetBindingValue",
      "Record[GlobalEnvironmentRecord].DeleteBinding",
      "Record[GlobalEnvironmentRecord].CreateMutableBinding",
      "Record[GlobalEnvironmentRecord].CreateImmutableBinding",
      "Record[GlobalEnvironmentRecord].CreateGlobalVarBinding",
      "Record[GlobalEnvironmentRecord].CreateGlobalFunctionBinding",
      "Record[GlobalEnvironmentRecord].CanDeclareGlobalVar",
      "Record[GlobalEnvironmentRecord].CanDeclareGlobalFunction",
      "Record[ECMAScriptFunctionObject].Construct",
      "Record[BoundFunctionExoticObject].Construct",
      "Record[BoundFunctionExoticObject].Call",
      "Record[Array].DefineOwnProperty",
      "Record[ArgumentsExoticObject].Set",
      "Record[ArgumentsExoticObject].GetOwnProperty",
      "Record[ArgumentsExoticObject].Get",
      "Record[ArgumentsExoticObject].Delete",
      "Record[ArgumentsExoticObject].DefineOwnProperty",
      "PutValue",
      "PrivateSet",
      "PrivateGet",
      "PrepareForOrdinaryCall",
      "PerformPromiseThen",
      "PerformEval",
      "OrdinarySetWithOwnDescriptor",
      "OrdinarySetPrototypeOf",
      "OrdinaryHasInstance",
      "OrdinaryGet",
      "OrdinaryCallBindThis",
      "NotifyWaiter",
      "NewPromiseResolveThenableJob",
      "NewPromiseReactionJob",
      "MakeTypedArrayWithBufferWitnessRecord",
      "MakeDataViewWithBufferWitnessRecord",
      "IteratorClose",
      "IsViewOutOfBounds",
      "IsTypedArrayOutOfBounds",
      "IsSharedArrayBuffer",
      "IsArray",
      "InitializeTypedArrayFromTypedArray",
      "InitializeReferencedBinding",
      "InitializeInstanceElements",
      "INTRINSICS.yet:PromiseResolveFunction",
      "INTRINSICS.yet:PromiseRejectFunction",
      "INTRINSICS.yet:Promise.anyRejectElementFunction",
      "INTRINSICS.yet:Promise.allSettledResolveElementFunction",
      "INTRINSICS.yet:Promise.allSettledRejectElementFunction",
      "INTRINSICS.yet:Promise.allResolveElementFunction",
      "INTRINSICS.get TypedArray.prototype[@@toStringTag]",
      "INTRINSICS.get TypedArray.prototype.byteOffset",
      "INTRINSICS.get TypedArray.prototype.buffer",
      "INTRINSICS.get SharedArrayBuffer.prototype.maxByteLength",
      "INTRINSICS.get RegExp.prototype.source",
      "INTRINSICS.get DataView.prototype.byteOffset",
      "INTRINSICS.get DataView.prototype.buffer",
      "INTRINSICS.get ArrayBuffer.prototype.maxByteLength",
      "INTRINSICS.get ArrayBuffer.prototype.byteLength",
      "INTRINSICS.TypedArray.prototype.subarray",
      "INTRINSICS.TypedArray.prototype.slice",
      "INTRINSICS.TypedArray.prototype.copyWithin",
      "INTRINSICS.SharedArrayBuffer.prototype.slice",
      "INTRINSICS.SharedArrayBuffer.prototype.grow",
      "INTRINSICS.Set.prototype.forEach",
      "INTRINSICS.RegExp",
      "INTRINSICS.Proxy.revocable",
      "INTRINSICS.Map.prototype.forEach",
      "INTRINSICS.JSON.parse",
      "INTRINSICS.ForInIteratorPrototype.next",
      "INTRINSICS.Date.prototype.toUTCString",
      "INTRINSICS.Date.prototype.toTimeString",
      "INTRINSICS.Date.prototype.toString",
      "INTRINSICS.Date.prototype.toISOString",
      "INTRINSICS.Date.prototype.toDateString",
      "INTRINSICS.Date.prototype.setUTCSeconds",
      "INTRINSICS.Date.prototype.setUTCMonth",
      "INTRINSICS.Date.prototype.setUTCMinutes",
      "INTRINSICS.Date.prototype.setUTCMilliseconds",
      "INTRINSICS.Date.prototype.setUTCHours",
      "INTRINSICS.Date.prototype.setUTCFullYear",
      "INTRINSICS.Date.prototype.setUTCDate",
      "INTRINSICS.Date.prototype.setSeconds",
      "INTRINSICS.Date.prototype.setMonth",
      "INTRINSICS.Date.prototype.setMinutes",
      "INTRINSICS.Date.prototype.setMilliseconds",
      "INTRINSICS.Date.prototype.setHours",
      "INTRINSICS.Date.prototype.setFullYear",
      "INTRINSICS.Date.prototype.setDate",
      "INTRINSICS.Date.prototype.getUTCSeconds",
      "INTRINSICS.Date.prototype.getUTCMonth",
      "INTRINSICS.Date.prototype.getUTCMinutes",
      "INTRINSICS.Date.prototype.getUTCMilliseconds",
      "INTRINSICS.Date.prototype.getUTCHours",
      "INTRINSICS.Date.prototype.getUTCFullYear",
      "INTRINSICS.Date.prototype.getUTCDay",
      "INTRINSICS.Date.prototype.getUTCDate",
      "INTRINSICS.Date.prototype.getTimezoneOffset",
      "INTRINSICS.Date.prototype.getSeconds",
      "INTRINSICS.Date.prototype.getMonth",
      "INTRINSICS.Date.prototype.getMinutes",
      "INTRINSICS.Date.prototype.getMilliseconds",
      "INTRINSICS.Date.prototype.getHours",
      "INTRINSICS.Date.prototype.getFullYear",
      "INTRINSICS.Date.prototype.getDay",
      "INTRINSICS.Date.prototype.getDate",
      "INTRINSICS.Date",
      "INTRINSICS.Atomics.store",
      "INTRINSICS.Atomics.notify",
      "INTRINSICS.Atomics.load",
      "INTRINSICS.Atomics.compareExchange",
      "INTRINSICS.AsyncGeneratorFunction.prototype.prototype.throw",
      "INTRINSICS.AsyncGeneratorFunction.prototype.prototype.return",
      "INTRINSICS.AsyncGeneratorFunction.prototype.prototype.next",
      "INTRINSICS.AsyncFromSyncIteratorPrototype.next",
      "INTRINSICS.ArrayBuffer.prototype.slice",
      "INTRINSICS.ArrayBuffer.prototype.resize",
      "GetViewValue",
      "GetViewByteLength",
      "GetValueFromBuffer",
      "GetValue",
      "GetThisEnvironment",
      "GetTemplateObject",
      "GetSuperConstructor",
      "GetModuleNamespace",
      "GetModifySetValueInBuffer",
      "GetIdentifierReference",
      "GetFunctionRealm",
      "GeneratorValidate",
      "GeneratorStart",
      "GeneratorResumeAbrupt",
      "GeneratorResume",
      "FunctionDeclarationInstantiation",
      "FulfillPromise",
      "EvaluateCall",
      "DoWait",
      "DefineField",
      "CreateSetIterator",
      "CreatePerIterationEnvironment",
      "CreateMapIterator",
      "CreateDynamicFunction",
      "ContinueDynamicImport",
      "CloneArrayBuffer",
      "CleanupFinalizationRegistry",
      "CharacterSetMatcher",
      "BuiltinCallOrConstruct",
      "BackreferenceMatcher",
      "AtomicReadModifyWrite",
      "AsyncIteratorClose",
      "AsyncGeneratorYield",
      "AsyncGeneratorResume",
      "AsyncGeneratorDrainQueue",
      "AsyncGeneratorCompleteStep",
      "AsyncGeneratorAwaitReturn",
      "ArraySetLength",
      "ArrayBufferCopyAndDetach",
      "ArrayBufferByteLength"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeMethodExpression": {
            "ref": {
              "PropertyReference": {
                "base": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                },
                "prop": {
                  "FieldProperty": {
                    "FieldProperty": {
                      "name": "string"
                    }
                  }
                }
              }
            },
            "args": [
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "ValueOfReadEvent"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "ValidateTypedArray",
      "UTC",
      "TriggerPromiseReactions",
      "StringToCodePoints",
      "SetRealmGlobalObject",
      "RegExpBuiltinExec",
      "Record[TypedArray].GetOwnProperty",
      "Record[StringExoticObject].GetOwnProperty",
      "Record[StringExoticObject].DefineOwnProperty",
      "Record[ECMAScriptFunctionObject].Construct",
      "Record[ArgumentsExoticObject].GetOwnProperty",
      "PrivateSet",
      "PrivateGet",
      "PrivateFieldAdd",
      "PrepareForOrdinaryCall",
      "PerformPromiseThen",
      "OrdinaryFunctionCreate",
      "MakeTypedArrayWithBufferWitnessRecord",
      "MakePrivateReference",
      "MakeMatchIndicesIndexPairArray",
      "MakeDataViewWithBufferWitnessRecord",
      "IsStringWellFormedUnicode",
      "InnerModuleLinking",
      "InnerModuleEvaluation",
      "INTRINSICS.String.prototype[@@iterator]",
      "INTRINSICS.String.prototype.toWellFormed",
      "INTRINSICS.String.prototype.codePointAt",
      "INTRINSICS.Atomics.notify",
      "GetUTCEpochNanoseconds",
      "GetStringIndex",
      "Encode",
      "DoWait",
      "CreateMappedArgumentsObject",
      "CreateIteratorFromClosure",
      "CreateDynamicFunction",
      "CreateAsyncIteratorFromClosure",
      "ComposeWriteEventBytes",
      "CharacterSetMatcher",
      "AsyncGeneratorCompleteStep",
      "AdvanceStringIndex"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeAbstractOperationExpression": {
                "name": "string",
                "args": [
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "EnumLiteral": {
                      "name": "string"
                    }
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "ValidateIntegerTypedArray",
      "TypedArrayCreateFromConstructor",
      "ToString",
      "ToPropertyKey",
      "ToNumeric",
      "ToNumber",
      "ToBigInt",
      "SerializeJSONObject",
      "IsLessThan",
      "InternalizeJSONProperty",
      "INTRINSICS.parseInt",
      "INTRINSICS.parseFloat",
      "INTRINSICS.WeakSet",
      "INTRINSICS.TypedArray.prototype.with",
      "INTRINSICS.TypedArray.prototype.toSorted",
      "INTRINSICS.TypedArray.prototype.toReversed",
      "INTRINSICS.TypedArray.prototype.sort",
      "INTRINSICS.TypedArray.prototype.some",
      "INTRINSICS.TypedArray.prototype.slice",
      "INTRINSICS.TypedArray.prototype.reverse",
      "INTRINSICS.TypedArray.prototype.reduceRight",
      "INTRINSICS.TypedArray.prototype.reduce",
      "INTRINSICS.TypedArray.prototype.map",
      "INTRINSICS.TypedArray.prototype.lastIndexOf",
      "INTRINSICS.TypedArray.prototype.join",
      "INTRINSICS.TypedArray.prototype.indexOf",
      "INTRINSICS.TypedArray.prototype.includes",
      "INTRINSICS.TypedArray.prototype.forEach",
      "INTRINSICS.TypedArray.prototype.findLastIndex",
      "INTRINSICS.TypedArray.prototype.findLast",
      "INTRINSICS.TypedArray.prototype.findIndex",
      "INTRINSICS.TypedArray.prototype.find",
      "INTRINSICS.TypedArray.prototype.filter",
      "INTRINSICS.TypedArray.prototype.fill",
      "INTRINSICS.TypedArray.prototype.every",
      "INTRINSICS.TypedArray.prototype.copyWithin",
      "INTRINSICS.TypedArray.prototype.at",
      "INTRINSICS.Set",
      "INTRINSICS.Object.values",
      "INTRINSICS.Object.seal",
      "INTRINSICS.Object.keys",
      "INTRINSICS.Object.freeze",
      "INTRINSICS.Object.entries",
      "INTRINSICS.Date.prototype.toJSON",
      "INTRINSICS.BigInt",
      "GroupBy",
      "AddEntriesFromIterable"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "ValidateIntegerTypedArray",
      "ValidateAtomicAccess",
      "UTC",
      "TypedArraySetElement",
      "TypedArrayLength",
      "TypedArrayGetElement",
      "TypedArrayCreateFromConstructor",
      "TypedArrayCreate",
      "TypedArrayByteLength",
      "ToDateString",
      "TimeZoneString",
      "StringToNumber",
      "StringToBigInt",
      "StringGetOwnProperty",
      "SetViewValue",
      "SetTypedArrayFromTypedArray",
      "SetTypedArrayFromArrayLike",
      "SerializeJSONObject",
      "RegExpInitialize",
      "RegExpBuiltinExec",
      "Record[TypedArray].Set",
      "Record[TypedArray].OwnPropertyKeys",
      "Record[TypedArray].HasProperty",
      "Record[TypedArray].GetOwnProperty",
      "Record[TypedArray].Get",
      "Record[TypedArray].Delete",
      "Record[TypedArray].DefineOwnProperty",
      "Record[SourceTextModuleRecord].InitializeEnvironment",
      "Record[ProxyExoticObject].DefineOwnProperty",
      "Record[ProxyExoticObject].Construct",
      "Record[ProxyExoticObject].Call",
      "Record[ModuleNamespaceExoticObject].OwnPropertyKeys",
      "PerformPromiseThen",
      "PerformPromiseAllSettled",
      "PerformPromiseAll",
      "ParseModule",
      "OrdinaryObjectCreate",
      "NewPromiseResolveThenableJob",
      "NewPromiseReactionJob",
      "MonthFromTime",
      "ModuleNamespaceCreate",
      "LocalTime",
      "IsValidRegularExpressionLiteral",
      "IsValidIntegerIndex",
      "IsTypedArrayOutOfBounds",
      "IsLooselyEqual",
      "IsLessThan",
      "InitializeTypedArrayFromTypedArray",
      "InitializeTypedArrayFromArrayBuffer",
      "INTRINSICS.yet:PromiseResolveFunction",
      "INTRINSICS.yet:Promise.allSettledResolveElementFunction",
      "INTRINSICS.yet:Promise.allSettledRejectElementFunction",
      "INTRINSICS.yet:Promise.allResolveElementFunction",
      "INTRINSICS.parseFloat",
      "INTRINSICS.get TypedArray.prototype.length",
      "INTRINSICS.get TypedArray.prototype.byteLength",
      "INTRINSICS.get DataView.prototype.byteLength",
      "INTRINSICS.TypedArray.prototype.with",
      "INTRINSICS.TypedArray.prototype.toSorted",
      "INTRINSICS.TypedArray.prototype.toReversed",
      "INTRINSICS.TypedArray.prototype.subarray",
      "INTRINSICS.TypedArray.prototype.sort",
      "INTRINSICS.TypedArray.prototype.some",
      "INTRINSICS.TypedArray.prototype.slice",
      "INTRINSICS.TypedArray.prototype.reverse",
      "INTRINSICS.TypedArray.prototype.reduceRight",
      "INTRINSICS.TypedArray.prototype.reduce",
      "INTRINSICS.TypedArray.prototype.map",
      "INTRINSICS.TypedArray.prototype.lastIndexOf",
      "INTRINSICS.TypedArray.prototype.join",
      "INTRINSICS.TypedArray.prototype.indexOf",
      "INTRINSICS.TypedArray.prototype.includes",
      "INTRINSICS.TypedArray.prototype.forEach",
      "INTRINSICS.TypedArray.prototype.findLastIndex",
      "INTRINSICS.TypedArray.prototype.findLast",
      "INTRINSICS.TypedArray.prototype.findIndex",
      "INTRINSICS.TypedArray.prototype.find",
      "INTRINSICS.TypedArray.prototype.filter",
      "INTRINSICS.TypedArray.prototype.fill",
      "INTRINSICS.TypedArray.prototype.every",
      "INTRINSICS.TypedArray.prototype.copyWithin",
      "INTRINSICS.TypedArray.prototype.at",
      "INTRINSICS.String.prototype.toLowerCase",
      "INTRINSICS.String.prototype.replaceAll",
      "INTRINSICS.String.prototype.replace",
      "INTRINSICS.RegExp.prototype[@@replace]",
      "INTRINSICS.Promise",
      "INTRINSICS.Object.getOwnPropertyDescriptors",
      "INTRINSICS.Object.create",
      "INTRINSICS.GeneratorFunction.prototype.prototype.throw",
      "INTRINSICS.Date.prototype.toUTCString",
      "INTRINSICS.Date.prototype.toTimeString",
      "INTRINSICS.Date.prototype.toDateString",
      "INTRINSICS.Date.prototype.setUTCSeconds",
      "INTRINSICS.Date.prototype.setUTCMonth",
      "INTRINSICS.Date.prototype.setUTCMinutes",
      "INTRINSICS.Date.prototype.setUTCHours",
      "INTRINSICS.Date.prototype.setUTCFullYear",
      "INTRINSICS.Date.prototype.setUTCDate",
      "INTRINSICS.Date.prototype.setTime",
      "INTRINSICS.Date.prototype.setMonth",
      "INTRINSICS.Date.prototype.setMinutes",
      "INTRINSICS.Date.prototype.setHours",
      "INTRINSICS.Date.prototype.setFullYear",
      "INTRINSICS.Date",
      "INTRINSICS.Date.UTC",
      "INTRINSICS.DataView",
      "INTRINSICS.Boolean",
      "INTRINSICS.Atomics.sub",
      "INTRINSICS.Atomics.store",
      "INTRINSICS.Atomics.load",
      "INTRINSICS.Atomics.compareExchange",
      "INTRINSICS.Atomics.add",
      "INTRINSICS.AsyncGeneratorFunction.prototype.prototype.throw",
      "INTRINSICS.AsyncGeneratorFunction.prototype.prototype.next",
      "GetViewValue",
      "FunctionDeclarationInstantiation",
      "ForInOfHeadEvaluation",
      "ForInOfBodyEvaluation",
      "EvaluateCall",
      "DoWait",
      "DateString",
      "DateFromTime",
      "CreatePerIterationEnvironment",
      "CreateDynamicFunction",
      "CreateArrayIterator",
      "ContinueDynamicImport",
      "CharacterComplement",
      "Canonicalize",
      "BoundFunctionCreate",
      "AtomicReadModifyWrite",
      "AsyncGeneratorYield",
      "AsyncGeneratorAwaitReturn",
      "AllocateTypedArrayBuffer",
      "AllocateTypedArray"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeAbstractOperationExpression": {
                "name": "string",
                "args": [
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "ValidateAtomicAccessOnIntegerTypedArray",
      "TypedArraySpeciesCreate",
      "TypedArrayCreateSameType",
      "TypedArrayCreateFromConstructor",
      "SortIndexedProperties",
      "SetTypedArrayFromArrayLike",
      "SerializeJSONProperty",
      "Record[ObjectEnvironmentRecord].SetMutableBinding",
      "Record[ObjectEnvironmentRecord].HasBinding",
      "Record[ObjectEnvironmentRecord].GetBindingValue",
      "Record[GlobalEnvironmentRecord].DeleteBinding",
      "Record[GlobalEnvironmentRecord].CreateGlobalVarBinding",
      "Record[GlobalEnvironmentRecord].CanDeclareGlobalVar",
      "Record[ArgumentsExoticObject].Set",
      "Record[ArgumentsExoticObject].GetOwnProperty",
      "Record[ArgumentsExoticObject].Get",
      "Record[ArgumentsExoticObject].Delete",
      "Record[ArgumentsExoticObject].DefineOwnProperty",
      "OrdinaryToPrimitive",
      "OrdinaryCreateFromConstructor",
      "ObjectDefineProperties",
      "Invoke",
      "InternalizeJSONProperty",
      "InitializeTypedArrayFromArrayLike",
      "INTRINSICS.TypedArray.prototype.with",
      "INTRINSICS.TypedArray.prototype.toReversed",
      "INTRINSICS.TypedArray.prototype.some",
      "INTRINSICS.TypedArray.prototype.slice",
      "INTRINSICS.TypedArray.prototype.reverse",
      "INTRINSICS.TypedArray.prototype.reduceRight",
      "INTRINSICS.TypedArray.prototype.reduce",
      "INTRINSICS.TypedArray.prototype.map",
      "INTRINSICS.TypedArray.prototype.forEach",
      "INTRINSICS.TypedArray.prototype.filter",
      "INTRINSICS.TypedArray.prototype.every",
      "INTRINSICS.TypedArray.from",
      "INTRINSICS.SharedArrayBuffer.prototype.grow",
      "INTRINSICS.RegExp.prototype[@@split]",
      "INTRINSICS.RegExp.prototype[@@search]",
      "INTRINSICS.RegExp.prototype[@@replace]",
      "INTRINSICS.RegExp.prototype[@@match]",
      "INTRINSICS.RegExp.prototype.test",
      "INTRINSICS.Proxy.revocable",
      "INTRINSICS.Promise.prototype.finally",
      "INTRINSICS.Object.assign",
      "INTRINSICS.JSON.stringify",
      "INTRINSICS.Atomics.store",
      "INTRINSICS.Atomics.load",
      "INTRINSICS.Atomics.compareExchange",
      "INTRINSICS.ArrayBuffer.prototype.resize",
      "INTRINSICS.Array.prototype.with",
      "INTRINSICS.Array.prototype.unshift",
      "INTRINSICS.Array.prototype.toSpliced",
      "INTRINSICS.Array.prototype.toReversed",
      "INTRINSICS.Array.prototype.splice",
      "INTRINSICS.Array.prototype.some",
      "INTRINSICS.Array.prototype.slice",
      "INTRINSICS.Array.prototype.shift",
      "INTRINSICS.Array.prototype.reverse",
      "INTRINSICS.Array.prototype.reduceRight",
      "INTRINSICS.Array.prototype.reduce",
      "INTRINSICS.Array.prototype.pop",
      "INTRINSICS.Array.prototype.map",
      "INTRINSICS.Array.prototype.forEach",
      "INTRINSICS.Array.prototype.filter",
      "INTRINSICS.Array.prototype.every",
      "INTRINSICS.Array.prototype.copyWithin",
      "INTRINSICS.Array.prototype.concat",
      "INTRINSICS.Array",
      "INTRINSICS.Array.from",
      "GetSubstitution",
      "GetMethod",
      "GetIteratorFromMethod",
      "GetIterator",
      "GeneratorResumeAbrupt",
      "GeneratorResume",
      "FlattenIntoArray",
      "FindViaPredicate",
      "EnumerableOwnProperties",
      "DoWait",
      "DefineField",
      "CreateRegExpStringIterator",
      "CreateListFromArrayLike",
      "CreateDynamicFunction",
      "CreateArrayIterator",
      "CopyDataProperties",
      "AtomicReadModifyWrite",
      "AllocateTypedArray"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeAbstractOperationExpression": {
                "name": "string",
                "args": [
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "ValidateAtomicAccess",
      "TypedArraySetElement",
      "TrimString",
      "ToUint8Clamp",
      "ToUint8",
      "ToUint32",
      "ToUint16",
      "ToLength",
      "ToIntegerOrInfinity",
      "ToInt8",
      "ToInt32",
      "ToInt16",
      "ToIndex",
      "ToBigUint64",
      "ToBigInt64",
      "TestIntegrityLevel",
      "StringPaddingBuiltinsImpl",
      "SetViewValue",
      "SetTypedArrayFromArrayLike",
      "SerializeJSONProperty",
      "SerializeJSONArray",
      "RegExpInitialize",
      "Record[ProxyExoticObject].SetPrototypeOf",
      "Record[ProxyExoticObject].PreventExtensions",
      "Record[ProxyExoticObject].OwnPropertyKeys",
      "Record[ProxyExoticObject].IsExtensible",
      "Record[ProxyExoticObject].HasProperty",
      "Record[ProxyExoticObject].GetPrototypeOf",
      "Record[ProxyExoticObject].GetOwnProperty",
      "Record[ProxyExoticObject].Delete",
      "Record[ProxyExoticObject].DefineOwnProperty",
      "Record[GlobalEnvironmentRecord].CreateGlobalVarBinding",
      "Record[Array].DefineOwnProperty",
      "PromiseResolve",
      "PerformPromiseRace",
      "PerformPromiseAny",
      "PerformPromiseAllSettled",
      "PerformPromiseAll",
      "OrdinaryDefineOwnProperty",
      "OrdinaryCallBindThis",
      "ObjectDefineProperties",
      "NumberBitwiseOp",
      "Number::unsignedRightShift",
      "Number::signedRightShift",
      "Number::leftShift",
      "Number::bitwiseNOT",
      "MakeMatchIndicesIndexPairArray",
      "MakeFullYear",
      "IteratorToList",
      "IteratorStep",
      "IsLessThan",
      "InternalizeJSONProperty",
      "InitializeTypedArrayFromArrayLike",
      "InitializeTypedArrayFromArrayBuffer",
      "InitializeHostDefinedRealm",
      "InitializeBoundName",
      "INTRINSICS.parseInt",
      "INTRINSICS.parseFloat",
      "INTRINSICS.isNaN",
      "INTRINSICS.isFinite",
      "INTRINSICS.get Symbol.prototype.description",
      "INTRINSICS.encodeURIComponent",
      "INTRINSICS.encodeURI",
      "INTRINSICS.decodeURIComponent",
      "INTRINSICS.decodeURI",
      "INTRINSICS._TypedArray_",
      "INTRINSICS._NativeError_",
      "INTRINSICS.WeakSet",
      "INTRINSICS.TypedArray.prototype.with",
      "INTRINSICS.TypedArray.prototype.subarray",
      "INTRINSICS.TypedArray.prototype.slice",
      "INTRINSICS.TypedArray.prototype.set",
      "INTRINSICS.TypedArray.prototype.lastIndexOf",
      "INTRINSICS.TypedArray.prototype.join",
      "INTRINSICS.TypedArray.prototype.indexOf",
      "INTRINSICS.TypedArray.prototype.includes",
      "INTRINSICS.TypedArray.prototype.fill",
      "INTRINSICS.TypedArray.prototype.copyWithin",
      "INTRINSICS.TypedArray.prototype.at",
      "INTRINSICS.TypedArray.from",
      "INTRINSICS.Symbol",
      "INTRINSICS.Symbol.for",
      "INTRINSICS.String.raw",
      "INTRINSICS.String.prototype[@@iterator]",
      "INTRINSICS.String.prototype.toWellFormed",
      "INTRINSICS.String.prototype.toLowerCase",
      "INTRINSICS.String.prototype.substring",
      "INTRINSICS.String.prototype.startsWith",
      "INTRINSICS.String.prototype.split",
      "INTRINSICS.String.prototype.slice",
      "INTRINSICS.String.prototype.search",
      "INTRINSICS.String.prototype.replaceAll",
      "INTRINSICS.String.prototype.replace",
      "INTRINSICS.String.prototype.repeat",
      "INTRINSICS.String.prototype.normalize",
      "INTRINSICS.String.prototype.matchAll",
      "INTRINSICS.String.prototype.match",
      "INTRINSICS.String.prototype.localeCompare",
      "INTRINSICS.String.prototype.lastIndexOf",
      "INTRINSICS.String.prototype.isWellFormed",
      "INTRINSICS.String.prototype.indexOf",
      "INTRINSICS.String.prototype.includes",
      "INTRINSICS.String.prototype.endsWith",
      "INTRINSICS.String.prototype.concat",
      "INTRINSICS.String.prototype.codePointAt",
      "INTRINSICS.String.prototype.charCodeAt",
      "INTRINSICS.String.prototype.charAt",
      "INTRINSICS.String.prototype.at",
      "INTRINSICS.String",
      "INTRINSICS.String.fromCodePoint",
      "INTRINSICS.SharedArrayBuffer.prototype.slice",
      "INTRINSICS.SharedArrayBuffer.prototype.grow",
      "INTRINSICS.SharedArrayBuffer",
      "INTRINSICS.Set",
      "INTRINSICS.RegExp.prototype[@@split]",
      "INTRINSICS.RegExp.prototype[@@search]",
      "INTRINSICS.RegExp.prototype[@@replace]",
      "INTRINSICS.RegExp.prototype[@@match]",
      "INTRINSICS.RegExp.prototype[@@matchAll]",
      "INTRINSICS.RegExp.prototype.test",
      "INTRINSICS.RegExp.prototype.exec",
      "INTRINSICS.RegExp",
      "INTRINSICS.Reflect.set",
      "INTRINSICS.Reflect.has",
      "INTRINSICS.Reflect.getOwnPropertyDescriptor",
      "INTRINSICS.Reflect.get",
      "INTRINSICS.Reflect.deleteProperty",
      "INTRINSICS.Reflect.defineProperty",
      "INTRINSICS.Reflect.construct",
      "INTRINSICS.Reflect.apply",
      "INTRINSICS.Promise.withResolvers",
      "INTRINSICS.Promise.reject",
      "INTRINSICS.Promise.race",
      "INTRINSICS.Promise.prototype.then",
      "INTRINSICS.Promise.any",
      "INTRINSICS.Promise.allSettled",
      "INTRINSICS.Promise.all",
      "INTRINSICS.Object.values",
      "INTRINSICS.Object.prototype.toString",
      "INTRINSICS.Object.prototype.propertyIsEnumerable",
      "INTRINSICS.Object.prototype.hasOwnProperty",
      "INTRINSICS.Object.prototype.__lookupSetter__",
      "INTRINSICS.Object.prototype.__lookupGetter__",
      "INTRINSICS.Object.prototype.__defineSetter__",
      "INTRINSICS.Object.prototype.__defineGetter__",
      "INTRINSICS.Object.keys",
      "INTRINSICS.Object.hasOwn",
      "INTRINSICS.Object.getPrototypeOf",
      "INTRINSICS.Object.getOwnPropertyDescriptors",
      "INTRINSICS.Object.getOwnPropertyDescriptor",
      "INTRINSICS.Object.fromEntries",
      "INTRINSICS.Object.entries",
      "INTRINSICS.Object.defineProperty",
      "INTRINSICS.Object.assign",
      "INTRINSICS.Number.prototype.toString",
      "INTRINSICS.Number.prototype.toPrecision",
      "INTRINSICS.Number.prototype.toFixed",
      "INTRINSICS.Number.prototype.toExponential",
      "INTRINSICS.Number",
      "INTRINSICS.Math.trunc",
      "INTRINSICS.Math.tanh",
      "INTRINSICS.Math.tan",
      "INTRINSICS.Math.sqrt",
      "INTRINSICS.Math.sinh",
      "INTRINSICS.Math.sin",
      "INTRINSICS.Math.sign",
      "INTRINSICS.Math.round",
      "INTRINSICS.Math.min",
      "INTRINSICS.Math.max",
      "INTRINSICS.Math.log2",
      "INTRINSICS.Math.log1p",
      "INTRINSICS.Math.log10",
      "INTRINSICS.Math.log",
      "INTRINSICS.Math.hypot",
      "INTRINSICS.Math.fround",
      "INTRINSICS.Math.floor",
      "INTRINSICS.Math.expm1",
      "INTRINSICS.Math.exp",
      "INTRINSICS.Math.cosh",
      "INTRINSICS.Math.cos",
      "INTRINSICS.Math.clz32",
      "INTRINSICS.Math.ceil",
      "INTRINSICS.Math.cbrt",
      "INTRINSICS.Math.atanh",
      "INTRINSICS.Math.atan2",
      "INTRINSICS.Math.atan",
      "INTRINSICS.Math.asinh",
      "INTRINSICS.Math.asin",
      "INTRINSICS.Math.acosh",
      "INTRINSICS.Math.acos",
      "INTRINSICS.Math.abs",
      "INTRINSICS.JSON.stringify",
      "INTRINSICS.JSON.parse",
      "INTRINSICS.Function.prototype.bind",
      "INTRINSICS.Function.prototype.apply",
      "INTRINSICS.Error",
      "INTRINSICS.Date.prototype.setUTCSeconds",
      "INTRINSICS.Date.prototype.setUTCMonth",
      "INTRINSICS.Date.prototype.setUTCMinutes",
      "INTRINSICS.Date.prototype.setUTCHours",
      "INTRINSICS.Date.prototype.setUTCFullYear",
      "INTRINSICS.Date.prototype.setUTCDate",
      "INTRINSICS.Date.prototype.setTime",
      "INTRINSICS.Date.prototype.setSeconds",
      "INTRINSICS.Date.prototype.setMonth",
      "INTRINSICS.Date.prototype.setMinutes",
      "INTRINSICS.Date.prototype.setHours",
      "INTRINSICS.Date.prototype.setFullYear",
      "INTRINSICS.Date.prototype.setDate",
      "INTRINSICS.Date",
      "INTRINSICS.Date.UTC",
      "INTRINSICS.DataView",
      "INTRINSICS.BigInt.prototype.toString",
      "INTRINSICS.Atomics.store",
      "INTRINSICS.Atomics.notify",
      "INTRINSICS.Atomics.isLockFree",
      "INTRINSICS.Atomics.compareExchange",
      "INTRINSICS.ArrayBuffer.prototype.slice",
      "INTRINSICS.ArrayBuffer.prototype.resize",
      "INTRINSICS.ArrayBuffer",
      "INTRINSICS.Array.prototype.with",
      "INTRINSICS.Array.prototype.unshift",
      "INTRINSICS.Array.prototype.toSpliced",
      "INTRINSICS.Array.prototype.toSorted",
      "INTRINSICS.Array.prototype.toReversed",
      "INTRINSICS.Array.prototype.toLocaleString",
      "INTRINSICS.Array.prototype.splice",
      "INTRINSICS.Array.prototype.sort",
      "INTRINSICS.Array.prototype.some",
      "INTRINSICS.Array.prototype.slice",
      "INTRINSICS.Array.prototype.shift",
      "INTRINSICS.Array.prototype.reverse",
      "INTRINSICS.Array.prototype.reduceRight",
      "INTRINSICS.Array.prototype.reduce",
      "INTRINSICS.Array.prototype.push",
      "INTRINSICS.Array.prototype.pop",
      "INTRINSICS.Array.prototype.map",
      "INTRINSICS.Array.prototype.lastIndexOf",
      "INTRINSICS.Array.prototype.join",
      "INTRINSICS.Array.prototype.indexOf",
      "INTRINSICS.Array.prototype.includes",
      "INTRINSICS.Array.prototype.forEach",
      "INTRINSICS.Array.prototype.flatMap",
      "INTRINSICS.Array.prototype.flat",
      "INTRINSICS.Array.prototype.findLastIndex",
      "INTRINSICS.Array.prototype.findLast",
      "INTRINSICS.Array.prototype.findIndex",
      "INTRINSICS.Array.prototype.find",
      "INTRINSICS.Array.prototype.filter",
      "INTRINSICS.Array.prototype.fill",
      "INTRINSICS.Array.prototype.every",
      "INTRINSICS.Array.prototype.copyWithin",
      "INTRINSICS.Array.prototype.concat",
      "INTRINSICS.Array.prototype.at",
      "INTRINSICS.Array.of",
      "INTRINSICS.Array",
      "INTRINSICS.Array.from",
      "INTRINSICS.AggregateError",
      "GroupBy",
      "GetViewValue",
      "GetV",
      "GetTemplateObject",
      "GetSubstitution",
      "GetPrototypeFromConstructor",
      "GetOwnPropertyKeys",
      "ForInOfHeadEvaluation",
      "ForInOfBodyEvaluation",
      "ForBodyEvaluation",
      "FlattenIntoArray",
      "EvaluateStringOrNumericBinaryExpression",
      "EvaluatePropertyAccessWithExpressionKey",
      "EvaluateNew",
      "DoWait",
      "CreateListFromArrayLike",
      "CreateDynamicFunction",
      "CreateArrayIterator",
      "CopyDataProperties",
      "CompareArrayElements",
      "CaseClauseIsSelected",
      "CanonicalNumericIndexString",
      "AtomicReadModifyWrite",
      "ArraySpeciesCreate",
      "ArrayBufferCopyAndDetach",
      "ApplyStringOrNumericBinaryOperator",
      "AllocateSharedArrayBuffer",
      "AllocateArrayBuffer",
      "AddEntriesFromIterable"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ConversionExpression": {
            "op": {
              "ToMath": {}
            },
            "expr": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "UnicodeEscape",
      "NumberBitwiseOp",
      "DaysInYear",
      "DayFromYear"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "BinaryExpression": {
            "left": {
              "BinaryExpression": {
                "left": {
                  "BinaryExpression": {
                    "left": {
                      "BinaryExpression": {
                        "left": {
                          "ReferenceExpression": {
                            "ref": {
                              "Variable": {
                                "Variable": {
                                  "name": "string"
                                }
                              }
                            }
                          }
                        },
                        "op": {
                          "Sub": {}
                        },
                        "right": {
                          "HexLiteral": {
                            "hex": "number",
                            "name": "null"
                          }
                        }
                      }
                    },
                    "op": {
                      "Mul": {}
                    },
                    "right": {
                      "HexLiteral": {
                        "hex": "number",
                        "name": "null"
                      }
                    }
                  }
                },
                "op": {
                  "Add": {}
                },
                "right": {
                  "BinaryExpression": {
                    "left": {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    },
                    "op": {
                      "Sub": {}
                    },
                    "right": {
                      "HexLiteral": {
                        "hex": "number",
                        "name": "null"
                      }
                    }
                  }
                }
              }
            },
            "op": {
              "Add": {}
            },
            "right": {
              "HexLiteral": {
                "hex": "number",
                "name": "null"
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "UTF16SurrogatePairToCodePoint"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReferenceExpression": {
            "ref": {
              "PropertyReference": {
                "PropertyReference": {
                  "base": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  },
                  "prop": {
                    "IndexProperty": {
                      "IndexProperty": {
                        "index": {
                          "DecimalMathValueLiteral": {
                            "n": "number"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "UTC",
      "InitializeTypedArrayFromList",
      "INTRINSICS._TypedArray_",
      "INTRINSICS.TypedArray.from",
      "INTRINSICS.Date",
      "INTRINSICS.Array",
      "AsyncGeneratorYield",
      "AsyncGeneratorDrainQueue",
      "AsyncGeneratorAwaitReturn"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "MathFuncExpression": {
            "op": {
              "Truncate": {}
            },
            "args": [
              {
                "BinaryExpression": {
                  "left": {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  "op": {
                    "Div": {}
                  },
                  "right": {
                    "ExponentiationExpression": {
                      "base": {
                        "DecimalMathValueLiteral": {
                          "n": "number"
                        }
                      },
                      "power": {
                        "DecimalMathValueLiteral": {
                          "n": "number"
                        }
                      }
                    }
                  }
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "UTC",
      "LocalTime"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "BinaryExpression": {
            "left": {
              "BinaryExpression": {
                "left": {
                  "ConversionExpression": {
                    "op": {
                      "ToMath": {}
                    },
                    "expr": {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "op": {
                  "Mul": {}
                },
                "right": {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "op": {
              "Add": {}
            },
            "right": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "TypedArraySetElement",
      "TypedArrayGetElement"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ListExpression": {
            "entries": [
              {
                "FieldLiteral": {
                  "name": "string"
                }
              },
              {
                "FieldLiteral": {
                  "name": "string"
                }
              },
              {
                "FieldLiteral": {
                  "name": "string"
                }
              },
              {
                "FieldLiteral": {
                  "name": "string"
                }
              },
              {
                "FieldLiteral": {
                  "name": "string"
                }
              },
              {
                "FieldLiteral": {
                  "name": "string"
                }
              },
              {
                "FieldLiteral": {
                  "name": "string"
                }
              },
              {
                "FieldLiteral": {
                  "name": "string"
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "TypedArrayCreate"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "TrimExpression": {
            "expr": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            },
            "leading": "boolean",
            "trailing": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "TrimString"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ClampExpression": {
            "target": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            },
            "lower": {
              "DecimalMathValueLiteral": {
                "n": "number"
              }
            },
            "upper": {
              "DecimalMathValueLiteral": {
                "n": "number"
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "ToUint8Clamp"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "MathFuncExpression": {
            "op": {
              "Floor": {}
            },
            "args": [
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "ToUint8Clamp"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "MathFuncExpression": {
            "op": {
              "Truncate": {}
            },
            "args": [
              {
                "ConversionExpression": {
                  "op": {
                    "ToMath": {}
                  },
                  "expr": {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "ToUint8",
      "ToUint32",
      "ToUint16",
      "ToInt8",
      "ToInt32",
      "ToInt16"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "BinaryExpression": {
            "left": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            },
            "op": {
              "Mod": {}
            },
            "right": {
              "ExponentiationExpression": {
                "base": {
                  "DecimalMathValueLiteral": {
                    "n": "number"
                  }
                },
                "power": {
                  "DecimalMathValueLiteral": {
                    "n": "number"
                  }
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "ToUint8",
      "ToUint32",
      "ToUint16",
      "ToInt8",
      "ToInt32",
      "ToInt16"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "RecordExpression": {
            "tname": "string",
            "fields": []
          }
        }
      }
    },
    "appearsIn": [
      "ToPropertyDescriptor",
      "ScriptEvaluation",
      "RunJobs",
      "Record[SourceTextModuleRecord].InitializeEnvironment",
      "Record[SourceTextModuleRecord].ExecuteModule",
      "PrepareForOrdinaryCall",
      "PerformEval",
      "OrdinaryGetOwnProperty",
      "NewObjectEnvironment",
      "NewModuleEnvironment",
      "NewGlobalEnvironment",
      "NewFunctionEnvironment",
      "NewDeclarativeEnvironment",
      "InitializeHostDefinedRealm",
      "CreateIteratorFromClosure",
      "CreateAsyncIteratorFromClosure",
      "BuiltinCallOrConstruct"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeAbstractOperationExpression": {
                "name": "string",
                "args": [
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "StringLiteral": {
                      "s": "string"
                    }
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "ToPropertyDescriptor",
      "SpeciesConstructor",
      "SerializeJSONProperty",
      "RegExpExec",
      "Record[ProxyExoticObject].SetPrototypeOf",
      "Record[ProxyExoticObject].Set",
      "Record[ProxyExoticObject].PreventExtensions",
      "Record[ProxyExoticObject].OwnPropertyKeys",
      "Record[ProxyExoticObject].IsExtensible",
      "Record[ProxyExoticObject].HasProperty",
      "Record[ProxyExoticObject].GetPrototypeOf",
      "Record[ProxyExoticObject].GetOwnProperty",
      "Record[ProxyExoticObject].Get",
      "Record[ProxyExoticObject].Delete",
      "Record[ProxyExoticObject].DefineOwnProperty",
      "Record[ProxyExoticObject].Construct",
      "Record[ProxyExoticObject].Call",
      "Record[ECMAScriptFunctionObject].Construct",
      "PromiseResolve",
      "OrdinaryHasInstance",
      "InstallErrorCause",
      "INTRINSICS.WeakSet",
      "INTRINSICS.WeakMap",
      "INTRINSICS.String.prototype.replaceAll",
      "INTRINSICS.String.prototype.matchAll",
      "INTRINSICS.Set",
      "INTRINSICS.RegExp.prototype[@@search]",
      "INTRINSICS.RegExp.prototype[@@replace]",
      "INTRINSICS.RegExp",
      "INTRINSICS.Map",
      "INTRINSICS.Function.prototype.bind",
      "INTRINSICS.Error.prototype.toString",
      "INTRINSICS.Array.prototype.toString",
      "INTRINSICS.Array.prototype.shift",
      "INTRINSICS.Array",
      "GetPrototypeFromConstructor",
      "GetPromiseResolve",
      "GetIteratorFromMethod",
      "GetArrayBufferMaxByteLengthOption",
      "ForInOfHeadEvaluation",
      "CreateAsyncFromSyncIterator",
      "ArraySpeciesCreate"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "ReturnIfAbruptExpression": {
                  "expr": {
                    "InvokeAbstractOperationExpression": {
                      "name": "string",
                      "args": [
                        {
                          "ReferenceExpression": {
                            "ref": {
                              "Variable": {
                                "Variable": {
                                  "name": "string"
                                }
                              }
                            }
                          }
                        },
                        {
                          "StringLiteral": {
                            "s": "string"
                          }
                        }
                      ]
                    }
                  },
                  "check": "boolean"
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "ToPropertyDescriptor",
      "INTRINSICS.get RegExp.prototype.flags"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeAbstractOperationExpression": {
                "name": "string",
                "args": [
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "SymbolLiteral": {
                      "sym": "string"
                    }
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "ToPrimitive",
      "SpeciesConstructor",
      "Record[ObjectEnvironmentRecord].HasBinding",
      "IsRegExp",
      "IsConcatSpreadable",
      "InstanceofOperator",
      "INTRINSICS._TypedArray_",
      "INTRINSICS.TypedArray.from",
      "INTRINSICS.String.prototype.split",
      "INTRINSICS.String.prototype.search",
      "INTRINSICS.String.prototype.replaceAll",
      "INTRINSICS.String.prototype.replace",
      "INTRINSICS.String.prototype.matchAll",
      "INTRINSICS.String.prototype.match",
      "INTRINSICS.Object.prototype.toString",
      "INTRINSICS.Array.from",
      "GetIterator"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "StringLiteral": {
            "s": "string"
          }
        }
      }
    },
    "appearsIn": [
      "ToPrimitive",
      "TimeZoneString",
      "SerializeJSONObject",
      "SerializeJSONArray",
      "RegExpInitialize",
      "INTRINSICS.encodeURIComponent",
      "INTRINSICS.encodeURI",
      "INTRINSICS.decodeURIComponent",
      "INTRINSICS.decodeURI",
      "INTRINSICS.TypedArray.prototype.join",
      "INTRINSICS.String.raw",
      "INTRINSICS.String.prototype.toWellFormed",
      "INTRINSICS.String.prototype.replaceAll",
      "INTRINSICS.String.prototype.normalize",
      "INTRINSICS.String",
      "INTRINSICS.String.fromCodePoint",
      "INTRINSICS.String.fromCharCode",
      "INTRINSICS.RegExp.prototype[@@replace]",
      "INTRINSICS.Object.prototype.toString",
      "INTRINSICS.Number.prototype.toPrecision",
      "INTRINSICS.Number.prototype.toFixed",
      "INTRINSICS.Number.prototype.toExponential",
      "INTRINSICS.JSON.stringify",
      "INTRINSICS.JSON.parse",
      "INTRINSICS.Date.prototype.toUTCString",
      "INTRINSICS.Array.prototype.toLocaleString",
      "INTRINSICS.Array.prototype.join",
      "GetSubstitution",
      "Encode",
      "Decode",
      "DateString",
      "CreateDynamicFunction",
      "CodePointsToString"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeAbstractOperationExpression": {
                "name": "string",
                "args": [
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "ListExpression": {
                      "entries": [
                        {
                          "ReferenceExpression": {
                            "ref": {
                              "Variable": {
                                "Variable": {
                                  "name": "string"
                                }
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "ToPrimitive",
      "RegExpExec",
      "Record[ProxyExoticObject].OwnPropertyKeys",
      "Record[ProxyExoticObject].GetPrototypeOf",
      "PerformPromiseRace",
      "PerformPromiseAny",
      "PerformPromiseAllSettled",
      "PerformPromiseAll"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "EnumLiteral": {
            "name": "string"
          }
        }
      }
    },
    "appearsIn": [
      "ToPrimitive",
      "Record[CyclicModuleRecord].LoadRequestedModules",
      "PerformPromiseThen",
      "MakeTypedArrayWithBufferWitnessRecord",
      "MakeDataViewWithBufferWitnessRecord",
      "INTRINSICS.Date.prototype[@@toPrimitive]",
      "INTRINSICS.DataView",
      "ForInOfHeadEvaluation",
      "DoWait",
      "ArrayBufferCopyAndDetach"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "BinaryExpression": {
            "left": {
              "ConversionExpression": {
                "op": {
                  "ToMath": {}
                },
                "expr": {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "op": {
              "Mod": {}
            },
            "right": {
              "ExponentiationExpression": {
                "base": {
                  "DecimalMathValueLiteral": {
                    "n": "number"
                  }
                },
                "power": {
                  "DecimalMathValueLiteral": {
                    "n": "number"
                  }
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "ToBigUint64",
      "ToBigInt64"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "ConversionExpression": {
                  "op": {
                    "ToBigInt": {}
                  },
                  "expr": {
                    "BinaryExpression": {
                      "left": {
                        "ConversionExpression": {
                          "op": {
                            "ToMath": {}
                          },
                          "expr": {
                            "ReferenceExpression": {
                              "ref": {
                                "Variable": {
                                  "Variable": {
                                    "name": "string"
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "op": {
                        "Mul": {}
                      },
                      "right": {
                        "ExponentiationExpression": {
                          "base": {
                            "DecimalMathValueLiteral": {
                              "n": "number"
                            }
                          },
                          "power": {
                            "DecimalMathValueLiteral": {
                              "n": "number"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "TimeZoneString",
      "LocalTime"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ConversionExpression": {
            "op": {
              "ToNumber": {}
            },
            "expr": {
              "MathFuncExpression": {
                "op": {
                  "Truncate": {}
                },
                "args": [
                  {
                    "BinaryExpression": {
                      "left": {
                        "ReferenceExpression": {
                          "ref": {
                            "Variable": {
                              "Variable": {
                                "name": "string"
                              }
                            }
                          }
                        }
                      },
                      "op": {
                        "Div": {}
                      },
                      "right": {
                        "ExponentiationExpression": {
                          "base": {
                            "DecimalMathValueLiteral": {
                              "n": "number"
                            }
                          },
                          "power": {
                            "DecimalMathValueLiteral": {
                              "n": "number"
                            }
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "TimeZoneString"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReferenceExpression": {
            "ref": {
              "Variable": {
                "Variable": {
                  "name": "string"
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "TimeZoneString",
      "SetTypedArrayFromTypedArray",
      "Record[ArgumentsExoticObject].DefineOwnProperty",
      "OrdinarySetPrototypeOf",
      "OrdinaryCreateFromConstructor",
      "OrdinaryCallBindThis",
      "IsViewOutOfBounds",
      "IsTypedArrayOutOfBounds",
      "InitializeTypedArrayFromTypedArray",
      "INTRINSICS.TypedArray.prototype.with",
      "INTRINSICS.TypedArray.prototype.subarray",
      "INTRINSICS.TypedArray.prototype.slice",
      "INTRINSICS.TypedArray.prototype.indexOf",
      "INTRINSICS.TypedArray.prototype.includes",
      "INTRINSICS.TypedArray.prototype.fill",
      "INTRINSICS.TypedArray.prototype.copyWithin",
      "INTRINSICS.TypedArray.prototype.at",
      "INTRINSICS.TypedArray.from",
      "INTRINSICS.String.prototype.substring",
      "INTRINSICS.String.prototype.slice",
      "INTRINSICS.String.prototype.endsWith",
      "INTRINSICS.String.prototype.concat",
      "INTRINSICS.String.prototype.at",
      "INTRINSICS.SharedArrayBuffer.prototype.slice",
      "INTRINSICS.RegExp.prototype[@@split]",
      "INTRINSICS.RegExp",
      "INTRINSICS.Promise.prototype.finally",
      "INTRINSICS.Number",
      "INTRINSICS.JSON.stringify",
      "INTRINSICS.ArrayBuffer.prototype.slice",
      "INTRINSICS.Array.prototype.with",
      "INTRINSICS.Array.prototype.unshift",
      "INTRINSICS.Array.prototype.slice",
      "INTRINSICS.Array.prototype.indexOf",
      "INTRINSICS.Array.prototype.includes",
      "INTRINSICS.Array.prototype.fill",
      "INTRINSICS.Array.prototype.copyWithin",
      "INTRINSICS.Array.prototype.at",
      "INTRINSICS.Array.from",
      "GroupBy",
      "GetSubstitution",
      "FunctionDeclarationInstantiation",
      "ForInOfBodyEvaluation",
      "FlattenIntoArray",
      "EvalDeclarationInstantiation",
      "Decode",
      "CreateArrayIterator",
      "ComposeWriteEventBytes",
      "AvailableNamedTimeZoneIdentifiers",
      "AllocateSharedArrayBuffer"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "UnaryExpression": {
            "op": {
              "Neg": {}
            },
            "expr": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "TimeZoneString"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "ConversionExpression": {
                  "op": {
                    "ToMath": {}
                  },
                  "expr": {
                    "InvokeAbstractOperationExpression": {
                      "name": "string",
                      "args": [
                        {
                          "ReferenceExpression": {
                            "ref": {
                              "Variable": {
                                "Variable": {
                                  "name": "string"
                                }
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "DecimalMathValueLiteral": {
                  "n": "number"
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "TimeZoneString",
      "TimeString",
      "INTRINSICS.Date.prototype.toUTCString",
      "DateString"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeMethodExpression": {
                "ref": {
                  "PropertyReference": {
                    "base": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    },
                    "prop": {
                      "FieldProperty": {
                        "FieldProperty": {
                          "name": "string"
                        }
                      }
                    }
                  }
                },
                "args": []
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "TestIntegrityLevel",
      "SetIntegrityLevel",
      "SetImmutablePrototype",
      "Record[ProxyExoticObject].SetPrototypeOf",
      "Record[ProxyExoticObject].OwnPropertyKeys",
      "Record[ProxyExoticObject].GetPrototypeOf",
      "OrdinarySetWithOwnDescriptor",
      "OrdinaryHasProperty",
      "OrdinaryGet",
      "ObjectDefineProperties",
      "INTRINSICS.Reflect.ownKeys",
      "INTRINSICS.Object.preventExtensions",
      "INTRINSICS.Object.getOwnPropertyDescriptors",
      "INTRINSICS.Object.assign",
      "INTRINSICS.ForInIteratorPrototype.next",
      "GetSuperConstructor",
      "GetOwnPropertyKeys",
      "EnumerableOwnProperties",
      "CopyDataProperties",
      "BoundFunctionCreate"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeMethodExpression": {
                "ref": {
                  "PropertyReference": {
                    "base": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    },
                    "prop": {
                      "FieldProperty": {
                        "FieldProperty": {
                          "name": "string"
                        }
                      }
                    }
                  }
                },
                "args": [
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "TestIntegrityLevel",
      "SetIntegrityLevel",
      "Record[ProxyExoticObject].Set",
      "Record[ProxyExoticObject].OwnPropertyKeys",
      "Record[ProxyExoticObject].HasProperty",
      "Record[ProxyExoticObject].GetOwnProperty",
      "Record[ProxyExoticObject].Get",
      "Record[ProxyExoticObject].Delete",
      "Record[ProxyExoticObject].DefineOwnProperty",
      "Record[ModuleNamespaceExoticObject].DefineOwnProperty",
      "Record[GlobalEnvironmentRecord].HasRestrictedGlobalProperty",
      "Record[GlobalEnvironmentRecord].CreateGlobalFunctionBinding",
      "Record[GlobalEnvironmentRecord].CanDeclareGlobalFunction",
      "OrdinarySetWithOwnDescriptor",
      "OrdinarySet",
      "OrdinaryHasProperty",
      "OrdinaryGet",
      "OrdinaryDelete",
      "OrdinaryDefineOwnProperty",
      "ObjectDefineProperties",
      "INTRINSICS.set Object.prototype.__proto__",
      "INTRINSICS.Reflect.getOwnPropertyDescriptor",
      "INTRINSICS.Object.setPrototypeOf",
      "INTRINSICS.Object.prototype.propertyIsEnumerable",
      "INTRINSICS.Object.prototype.__lookupSetter__",
      "INTRINSICS.Object.prototype.__lookupGetter__",
      "INTRINSICS.Object.getOwnPropertyDescriptors",
      "INTRINSICS.Object.getOwnPropertyDescriptor",
      "INTRINSICS.Object.assign",
      "INTRINSICS.ForInIteratorPrototype.next",
      "HasOwnProperty",
      "EnumerableOwnProperties",
      "DeletePropertyOrThrow",
      "CopyDataProperties",
      "ArraySetLength"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeSyntaxDirectedOperationExpression": {
            "base": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            },
            "name": "string",
            "args": []
          }
        }
      }
    },
    "appearsIn": [
      "TemplateString",
      "StringToBigInt",
      "Record[SourceTextModuleRecord].InitializeEnvironment",
      "PerformEval",
      "ParseModule",
      "ParseHexOctet",
      "OrdinaryFunctionCreate",
      "IsValidRegularExpressionLiteral",
      "IsAnonymousFunctionDefinition",
      "GroupSpecifiersThatMatch",
      "GlobalDeclarationInstantiation",
      "FunctionDeclarationInstantiation",
      "ForInOfBodyEvaluation",
      "EvaluatePropertyAccessWithIdentifierKey",
      "EvalDeclarationInstantiation",
      "CreateMappedArgumentsObject",
      "BlockDeclarationInstantiation"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "NonterminalLiteral": {
                  "ordinal": "null",
                  "name": "string",
                  "flags": []
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "StringToNumber",
      "StringToBigInt",
      "ParseScript",
      "ParseModule",
      "INTRINSICS.parseFloat"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ListExpression": {
            "entries": []
          }
        }
      }
    },
    "appearsIn": [
      "StringToCodePoints",
      "SortIndexedProperties",
      "SerializeJSONObject",
      "SerializeJSONArray",
      "RegExpBuiltinExec",
      "Record[TypedArray].OwnPropertyKeys",
      "Record[StringExoticObject].OwnPropertyKeys",
      "Record[SourceTextModuleRecord].InitializeEnvironment",
      "Record[SourceTextModuleRecord].GetExportedNames",
      "Record[ProxyExoticObject].OwnPropertyKeys",
      "Record[CyclicModuleRecord].Link",
      "Record[CyclicModuleRecord].Evaluate",
      "PerformPromiseAny",
      "PerformPromiseAllSettled",
      "PerformPromiseAll",
      "ParseModule",
      "OrdinaryOwnPropertyKeys",
      "OrdinaryCreateFromConstructor",
      "ObjectDefineProperties",
      "NewPrivateEnvironment",
      "IteratorToList",
      "ImportedLocalNames",
      "INTRINSICS.get RegExp.prototype.flags",
      "INTRINSICS.TypedArray.prototype.filter",
      "INTRINSICS.String.prototype.split",
      "INTRINSICS.String.prototype.replaceAll",
      "INTRINSICS.String.prototype.replace",
      "INTRINSICS.RegExp.prototype[@@replace]",
      "INTRINSICS.Math.min",
      "INTRINSICS.Math.max",
      "INTRINSICS.Math.hypot",
      "INTRINSICS.JSON.stringify",
      "GroupSpecifiersThatMatch",
      "GroupBy",
      "GlobalDeclarationInstantiation",
      "GetOwnPropertyKeys",
      "GetModuleNamespace",
      "FunctionDeclarationInstantiation",
      "EvaluateNew",
      "EvalDeclarationInstantiation",
      "EnumerableOwnProperties",
      "CreateMappedArgumentsObject",
      "CreateListFromArrayLike",
      "CreateDynamicFunction",
      "ComposeWriteEventBytes",
      "ByteListBitwiseOp",
      "AvailableNamedTimeZoneIdentifiers",
      "AsyncModuleExecutionFulfilled"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "LengthExpression": {
            "expr": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "StringToCodePoints",
      "StringPaddingBuiltinsImpl",
      "StringPad",
      "StringIndexOf",
      "StringGetOwnProperty",
      "StringCreate",
      "RegExpBuiltinExec",
      "Record[StringExoticObject].OwnPropertyKeys",
      "ParseHexOctet",
      "IsStringWellFormedUnicode",
      "IsLessThan",
      "INTRINSICS.String.prototype[@@iterator]",
      "INTRINSICS.String.prototype.toWellFormed",
      "INTRINSICS.String.prototype.substring",
      "INTRINSICS.String.prototype.startsWith",
      "INTRINSICS.String.prototype.split",
      "INTRINSICS.String.prototype.slice",
      "INTRINSICS.String.prototype.replaceAll",
      "INTRINSICS.String.prototype.replace",
      "INTRINSICS.String.prototype.lastIndexOf",
      "INTRINSICS.String.prototype.indexOf",
      "INTRINSICS.String.prototype.includes",
      "INTRINSICS.String.prototype.endsWith",
      "INTRINSICS.String.prototype.codePointAt",
      "INTRINSICS.String.prototype.charCodeAt",
      "INTRINSICS.String.prototype.charAt",
      "INTRINSICS.String.prototype.at",
      "INTRINSICS.RegExp.prototype[@@split]",
      "INTRINSICS.RegExp.prototype[@@replace]",
      "INTRINSICS.Number.prototype.toFixed",
      "GetSubstitution",
      "GetStringIndex",
      "Encode",
      "Decode",
      "CodePointAt",
      "AdvanceStringIndex"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "DecimalMathValueLiteral": {
            "n": "number"
          }
        }
      }
    },
    "appearsIn": [
      "StringToCodePoints",
      "SortIndexedProperties",
      "SetTypedArrayFromTypedArray",
      "SetTypedArrayFromArrayLike",
      "SerializeJSONArray",
      "RepeatMatcher",
      "PerformPromiseAny",
      "PerformPromiseAllSettled",
      "PerformPromiseAll",
      "ParseTimeZoneOffsetString",
      "IsStringWellFormedUnicode",
      "InternalizeJSONProperty",
      "InitializeTypedArrayFromTypedArray",
      "InitializeTypedArrayFromList",
      "InitializeTypedArrayFromArrayLike",
      "INTRINSICS.parseInt",
      "INTRINSICS.get Set.prototype.size",
      "INTRINSICS.get Map.prototype.size",
      "INTRINSICS.TypedArray.prototype.with",
      "INTRINSICS.TypedArray.prototype.toSorted",
      "INTRINSICS.TypedArray.prototype.toReversed",
      "INTRINSICS.TypedArray.prototype.subarray",
      "INTRINSICS.TypedArray.prototype.sort",
      "INTRINSICS.TypedArray.prototype.some",
      "INTRINSICS.TypedArray.prototype.slice",
      "INTRINSICS.TypedArray.prototype.reverse",
      "INTRINSICS.TypedArray.prototype.reduce",
      "INTRINSICS.TypedArray.prototype.map",
      "INTRINSICS.TypedArray.prototype.join",
      "INTRINSICS.TypedArray.prototype.forEach",
      "INTRINSICS.TypedArray.prototype.filter",
      "INTRINSICS.TypedArray.prototype.fill",
      "INTRINSICS.TypedArray.prototype.every",
      "INTRINSICS.TypedArray.prototype.copyWithin",
      "INTRINSICS.TypedArray.of",
      "INTRINSICS.TypedArray.from",
      "INTRINSICS.String.raw",
      "INTRINSICS.String.prototype[@@iterator]",
      "INTRINSICS.String.prototype.toWellFormed",
      "INTRINSICS.String.prototype.startsWith",
      "INTRINSICS.String.prototype.split",
      "INTRINSICS.String.prototype.slice",
      "INTRINSICS.String.prototype.replaceAll",
      "INTRINSICS.SharedArrayBuffer.prototype.slice",
      "INTRINSICS.Set.prototype.forEach",
      "INTRINSICS.RegExp.prototype[@@split]",
      "INTRINSICS.RegExp.prototype[@@replace]",
      "INTRINSICS.RegExp.prototype[@@match]",
      "INTRINSICS.Number.prototype.toString",
      "INTRINSICS.Number.prototype.toPrecision",
      "INTRINSICS.Number.prototype.toExponential",
      "INTRINSICS.Map.prototype.forEach",
      "INTRINSICS.JSON.stringify",
      "INTRINSICS.Function.prototype.bind",
      "INTRINSICS.BigInt.prototype.toString",
      "INTRINSICS.ArrayBuffer.prototype.slice",
      "INTRINSICS.Array.prototype.with",
      "INTRINSICS.Array.prototype.toSpliced",
      "INTRINSICS.Array.prototype.toSorted",
      "INTRINSICS.Array.prototype.toReversed",
      "INTRINSICS.Array.prototype.toLocaleString",
      "INTRINSICS.Array.prototype.splice",
      "INTRINSICS.Array.prototype.sort",
      "INTRINSICS.Array.prototype.some",
      "INTRINSICS.Array.prototype.slice",
      "INTRINSICS.Array.prototype.shift",
      "INTRINSICS.Array.prototype.reverse",
      "INTRINSICS.Array.prototype.reduce",
      "INTRINSICS.Array.prototype.map",
      "INTRINSICS.Array.prototype.join",
      "INTRINSICS.Array.prototype.forEach",
      "INTRINSICS.Array.prototype.flat",
      "INTRINSICS.Array.prototype.filter",
      "INTRINSICS.Array.prototype.fill",
      "INTRINSICS.Array.prototype.every",
      "INTRINSICS.Array.prototype.copyWithin",
      "INTRINSICS.Array.prototype.concat",
      "INTRINSICS.Array.of",
      "INTRINSICS.Array",
      "INTRINSICS.Array.from",
      "GroupBy",
      "GetTemplateObject",
      "GetStringIndex",
      "Encode",
      "DoWait",
      "Decode",
      "CreateUnmappedArgumentsObject",
      "CreateSetIterator",
      "CreateMappedArgumentsObject",
      "CreateMapIterator",
      "CreateListFromArrayLike",
      "CreateDynamicFunction",
      "CreateArrayIterator",
      "CreateArrayFromList",
      "ByteListEqual",
      "ByteListBitwiseOp",
      "BigIntBitwiseOp"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ConversionExpression": {
            "op": {
              "ToMath": {}
            },
            "expr": {
              "ReturnIfAbruptExpression": {
                "expr": {
                  "InvokeAbstractOperationExpression": {
                    "name": "string",
                    "args": [
                      {
                        "ReferenceExpression": {
                          "ref": {
                            "Variable": {
                              "Variable": {
                                "name": "string"
                              }
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "check": "boolean"
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "StringPaddingBuiltinsImpl",
      "INTRINSICS.parseInt",
      "INTRINSICS.String.prototype.split",
      "INTRINSICS.RegExp.prototype[@@split]",
      "INTRINSICS.Math.imul"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "BinaryExpression": {
            "left": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            },
            "op": {
              "Sub": {}
            },
            "right": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "StringPad",
      "InitializeTypedArrayFromArrayBuffer",
      "INTRINSICS.String.prototype.endsWith",
      "INTRINSICS.SharedArrayBuffer.prototype.grow",
      "INTRINSICS.DataView",
      "INTRINSICS.Array.prototype.toSpliced",
      "INTRINSICS.Array.prototype.splice",
      "BackreferenceMatcher"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "SubstringExpression": {
            "expr": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            },
            "from": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            },
            "to": {
              "BinaryExpression": {
                "left": {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                },
                "op": {
                  "Add": {}
                },
                "right": {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "StringIndexOf",
      "INTRINSICS.String.prototype.lastIndexOf"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "SubstringExpression": {
            "expr": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            },
            "from": {
              "ConversionExpression": {
                "op": {
                  "ToMath": {}
                },
                "expr": {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "to": {
              "BinaryExpression": {
                "left": {
                  "ConversionExpression": {
                    "op": {
                      "ToMath": {}
                    },
                    "expr": {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "op": {
                  "Add": {}
                },
                "right": {
                  "DecimalMathValueLiteral": {
                    "n": "number"
                  }
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "StringGetOwnProperty"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "ListExpression": {
                  "entries": [
                    {
                      "FieldLiteral": {
                        "name": "string"
                      }
                    },
                    {
                      "FieldLiteral": {
                        "name": "string"
                      }
                    },
                    {
                      "FieldLiteral": {
                        "name": "string"
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "StringCreate",
      "CreateMappedArgumentsObject"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeAbstractOperationExpression": {
                "name": "string",
                "args": [
                  {
                    "ConversionExpression": {
                      "op": {
                        "ToNumber": {}
                      },
                      "expr": {
                        "ReferenceExpression": {
                          "ref": {
                            "Variable": {
                              "Variable": {
                                "name": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "SortIndexedProperties",
      "SetTypedArrayFromArrayLike",
      "InternalizeJSONProperty",
      "InitializeTypedArrayFromList",
      "InitializeTypedArrayFromArrayLike",
      "INTRINSICS.TypedArray.prototype.with",
      "INTRINSICS.TypedArray.prototype.toReversed",
      "INTRINSICS.TypedArray.prototype.some",
      "INTRINSICS.TypedArray.prototype.slice",
      "INTRINSICS.TypedArray.prototype.reverse",
      "INTRINSICS.TypedArray.prototype.reduceRight",
      "INTRINSICS.TypedArray.prototype.reduce",
      "INTRINSICS.TypedArray.prototype.map",
      "INTRINSICS.TypedArray.prototype.forEach",
      "INTRINSICS.TypedArray.prototype.filter",
      "INTRINSICS.TypedArray.prototype.fill",
      "INTRINSICS.TypedArray.prototype.every",
      "INTRINSICS.TypedArray.of",
      "INTRINSICS.TypedArray.from",
      "INTRINSICS.Number.prototype.toFixed",
      "INTRINSICS.JSON.stringify",
      "INTRINSICS.Array.prototype.with",
      "INTRINSICS.Array.prototype.toSpliced",
      "INTRINSICS.Array.prototype.toReversed",
      "INTRINSICS.Array.prototype.some",
      "INTRINSICS.Array.prototype.slice",
      "INTRINSICS.Array.prototype.shift",
      "INTRINSICS.Array.prototype.reverse",
      "INTRINSICS.Array.prototype.reduceRight",
      "INTRINSICS.Array.prototype.reduce",
      "INTRINSICS.Array.prototype.map",
      "INTRINSICS.Array.prototype.forEach",
      "INTRINSICS.Array.prototype.filter",
      "INTRINSICS.Array.prototype.fill",
      "INTRINSICS.Array.prototype.every",
      "INTRINSICS.Array.prototype.copyWithin",
      "INTRINSICS.Array.prototype.concat",
      "INTRINSICS.Array.of",
      "INTRINSICS.Array",
      "INTRINSICS.Array.from",
      "GetTemplateObject",
      "FindViaPredicate",
      "CreateListFromArrayLike"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "TrueLiteral": {}
        }
      }
    },
    "appearsIn": [
      "SortIndexedProperties",
      "SetValueInBuffer",
      "SetTypedArrayFromTypedArray",
      "ResolveBinding",
      "RegExpInitialize",
      "RegExpBuiltinExec",
      "Record[ProxyExoticObject].DefineOwnProperty",
      "PerformEval",
      "OrdinaryFunctionCreate",
      "IsValidRegularExpressionLiteral",
      "INTRINSICS.parseInt",
      "INTRINSICS.TypedArray.from",
      "INTRINSICS.RegExp.prototype[@@split]",
      "INTRINSICS.RegExp.prototype[@@replace]",
      "INTRINSICS.RegExp.prototype[@@match]",
      "INTRINSICS.RegExp.prototype[@@matchAll]",
      "INTRINSICS.Math.hypot",
      "INTRINSICS.Array.from",
      "GetRawBytesFromSharedBlock",
      "FunctionDeclarationInstantiation",
      "ArraySetLength",
      "AllocateSharedArrayBuffer",
      "AllocateArrayBuffer"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "EnumLiteral": {
                  "name": "string"
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "SetViewValue",
      "SetTypedArrayFromTypedArray",
      "SetTypedArrayFromArrayLike",
      "RevalidateAtomicAccess",
      "Record[TypedArray].OwnPropertyKeys",
      "IsValidIntegerIndex",
      "IsArrayBufferViewOutOfBounds",
      "InitializeTypedArrayFromTypedArray",
      "InitializeTypedArrayFromArrayBuffer",
      "INTRINSICS.get TypedArray.prototype.length",
      "INTRINSICS.get TypedArray.prototype.byteOffset",
      "INTRINSICS.get TypedArray.prototype.byteLength",
      "INTRINSICS.get SharedArrayBuffer.prototype.byteLength",
      "INTRINSICS.get DataView.prototype.byteOffset",
      "INTRINSICS.get DataView.prototype.byteLength",
      "INTRINSICS.TypedArray.prototype.subarray",
      "INTRINSICS.SharedArrayBuffer.prototype.slice",
      "INTRINSICS.DataView",
      "GetViewValue",
      "CreateArrayIterator"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "BinaryExpression": {
            "left": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            },
            "op": {
              "Add": {}
            },
            "right": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "SetViewValue",
      "INTRINSICS.TypedArray.prototype.with",
      "INTRINSICS.TypedArray.prototype.lastIndexOf",
      "INTRINSICS.TypedArray.prototype.indexOf",
      "INTRINSICS.TypedArray.prototype.includes",
      "INTRINSICS.TypedArray.prototype.at",
      "INTRINSICS.String.prototype.startsWith",
      "INTRINSICS.String.prototype.at",
      "INTRINSICS.Array.prototype.with",
      "INTRINSICS.Array.prototype.toSpliced",
      "INTRINSICS.Array.prototype.lastIndexOf",
      "INTRINSICS.Array.prototype.indexOf",
      "INTRINSICS.Array.prototype.includes",
      "INTRINSICS.Array.prototype.at",
      "GetViewValue",
      "GetSubstitution",
      "BackreferenceMatcher"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "SetValueInBuffer",
      "RegExpInitialize",
      "Record[ProxyExoticObject].GetOwnProperty",
      "IsValidRegularExpressionLiteral",
      "INTRINSICS.yet:PromiseResolveFunction",
      "INTRINSICS.String.prototype.includes",
      "INTRINSICS.RegExp.prototype[@@replace]",
      "INTRINSICS.RegExp.prototype[@@match]",
      "INTRINSICS.Atomics.sub",
      "INTRINSICS.Atomics.compareExchange",
      "INTRINSICS.Atomics.add",
      "GetModifySetValueInBuffer",
      "CreateRegExpStringIterator"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "FalseLiteral": {}
        }
      }
    },
    "appearsIn": [
      "SetValueInBuffer",
      "SetTypedArrayFromTypedArray",
      "ResolveBinding",
      "RegExpInitialize",
      "RegExpBuiltinExec",
      "Record[ProxyExoticObject].DefineOwnProperty",
      "Record[ArgumentsExoticObject].Set",
      "PerformEval",
      "OrdinarySetPrototypeOf",
      "OrdinaryFunctionCreate",
      "IsValidRegularExpressionLiteral",
      "InnerModuleLinking",
      "InnerModuleEvaluation",
      "INTRINSICS.TypedArray.from",
      "INTRINSICS.RegExp.prototype[@@split]",
      "INTRINSICS.RegExp.prototype[@@replace]",
      "INTRINSICS.RegExp.prototype[@@match]",
      "INTRINSICS.RegExp.prototype[@@matchAll]",
      "INTRINSICS.FinalizationRegistry.prototype.unregister",
      "INTRINSICS.Array.prototype.reduceRight",
      "INTRINSICS.Array.prototype.reduce",
      "INTRINSICS.Array.from",
      "GetRawBytesFromSharedBlock",
      "FunctionDeclarationInstantiation",
      "FlattenIntoArray",
      "CopyDataProperties",
      "AsyncGeneratorDrainQueue",
      "ArraySetLength",
      "AllocateSharedArrayBuffer",
      "AllocateArrayBuffer"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "BinaryExpression": {
            "left": {
              "BinaryExpression": {
                "left": {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                },
                "op": {
                  "Mul": {}
                },
                "right": {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "op": {
              "Add": {}
            },
            "right": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "SetTypedArrayFromTypedArray",
      "INTRINSICS.TypedArray.prototype.slice",
      "INTRINSICS.TypedArray.prototype.copyWithin"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "BinaryExpression": {
            "left": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            },
            "op": {
              "Add": {}
            },
            "right": {
              "BinaryExpression": {
                "left": {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                },
                "op": {
                  "Mul": {}
                },
                "right": {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "SetTypedArrayFromTypedArray",
      "INTRINSICS.TypedArray.prototype.subarray",
      "INTRINSICS.TypedArray.prototype.slice"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "EnumLiteral": {
                  "name": "string"
                }
              },
              {
                "TrueLiteral": {}
              },
              {
                "EnumLiteral": {
                  "name": "string"
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "SetTypedArrayFromTypedArray",
      "INTRINSICS.TypedArray.prototype.slice",
      "INTRINSICS.TypedArray.prototype.copyWithin"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "TrueLiteral": {}
              },
              {
                "EnumLiteral": {
                  "name": "string"
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "SetTypedArrayFromTypedArray",
      "InitializeTypedArrayFromTypedArray",
      "DoWait"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ConversionExpression": {
            "op": {
              "ToNumber": {}
            },
            "expr": {
              "BinaryExpression": {
                "left": {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                },
                "op": {
                  "Add": {}
                },
                "right": {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "SetTypedArrayFromArrayLike"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "RecordExpression": {
            "tname": "string",
            "fields": [
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "FalseLiteral": {}
                }
              ]
            ]
          }
        }
      }
    },
    "appearsIn": [
      "SetIntegrityLevel",
      "PerformPromiseAllSettled",
      "CreateResolvingFunctions"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "RecordExpression": {
            "tname": "string",
            "fields": [
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "FalseLiteral": {}
                }
              ],
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "FalseLiteral": {}
                }
              ]
            ]
          }
        }
      }
    },
    "appearsIn": [
      "SetIntegrityLevel"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeMethodExpression": {
                "ref": {
                  "PropertyReference": {
                    "base": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    },
                    "prop": {
                      "FieldProperty": {
                        "FieldProperty": {
                          "name": "string"
                        }
                      }
                    }
                  }
                },
                "args": [
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "Set"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeAbstractOperationExpression": {
                "name": "string",
                "args": [
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "SerializeJSONObject",
      "Record[Array].DefineOwnProperty",
      "Record[ArgumentsExoticObject].DefineOwnProperty",
      "InternalizeJSONProperty",
      "InitializeTypedArrayFromTypedArray",
      "INTRINSICS.Function.prototype.bind",
      "CreateDataPropertyOrThrow"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "StringConcatExpression": {
            "exprs": [
              {
                "StringLiteral": {
                  "s": "string"
                }
              },
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "StringLiteral": {
                  "s": "string"
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "SerializeJSONObject",
      "SerializeJSONArray",
      "INTRINSICS.JSON.parse"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "StringConcatExpression": {
            "exprs": [
              {
                "HexLiteral": {
                  "hex": "number",
                  "name": "string"
                }
              },
              {
                "HexLiteral": {
                  "hex": "number",
                  "name": "string"
                }
              },
              {
                "ReferenceExpression": {
                  "ref": {
                    "PropertyReference": {
                      "PropertyReference": {
                        "base": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        },
                        "prop": {
                          "FieldProperty": {
                            "FieldProperty": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "SerializeJSONObject",
      "SerializeJSONArray"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "StringConcatExpression": {
            "exprs": [
              {
                "StringLiteral": {
                  "s": "string"
                }
              },
              {
                "HexLiteral": {
                  "hex": "number",
                  "name": "string"
                }
              },
              {
                "ReferenceExpression": {
                  "ref": {
                    "PropertyReference": {
                      "PropertyReference": {
                        "base": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        },
                        "prop": {
                          "FieldProperty": {
                            "FieldProperty": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "HexLiteral": {
                  "hex": "number",
                  "name": "string"
                }
              },
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "StringLiteral": {
                  "s": "string"
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "SerializeJSONObject",
      "SerializeJSONArray"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeAbstractOperationExpression": {
                "name": "string",
                "args": [
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "ReturnIfAbruptExpression": {
                      "expr": {
                        "InvokeAbstractOperationExpression": {
                          "name": "string",
                          "args": [
                            {
                              "ConversionExpression": {
                                "op": {
                                  "ToNumber": {}
                                },
                                "expr": {
                                  "ReferenceExpression": {
                                    "ref": {
                                      "Variable": {
                                        "Variable": {
                                          "name": "string"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          ]
                        }
                      },
                      "check": "boolean"
                    }
                  },
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "SerializeJSONArray"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReferenceExpression": {
            "ref": {
              "PropertyReference": {
                "PropertyReference": {
                  "base": {
                    "PropertyReference": {
                      "PropertyReference": {
                        "base": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        },
                        "prop": {
                          "FieldProperty": {
                            "FieldProperty": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "prop": {
                    "FieldProperty": {
                      "FieldProperty": {
                        "name": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "ScriptEvaluation",
      "Record[FunctionEnvironmentRecord].GetSuperBase",
      "INTRINSICS.AsyncFromSyncIteratorPrototype.throw",
      "INTRINSICS.AsyncFromSyncIteratorPrototype.return",
      "DoWait"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "InvokeAbstractOperationExpression": {
                  "name": "string",
                  "args": [
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    },
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "ScriptEvaluation",
      "Record[ECMAScriptFunctionObject].Construct",
      "Record[ECMAScriptFunctionObject].Call",
      "INTRINSICS.AsyncFromSyncIteratorPrototype.throw",
      "INTRINSICS.AsyncFromSyncIteratorPrototype.return",
      "INTRINSICS.AsyncFromSyncIteratorPrototype.next",
      "ForInOfBodyEvaluation"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "params": [],
          "captured": [],
          "body": {
            "BlockStep": {
              "block": {
                "StepBlock": {
                  "steps": [
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "YetStep": {
                            "expr": {
                              "YetExpression": {
                                "str": "string",
                                "block": "null"
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "LetStep": {
                            "variable": {
                              "Variable": {
                                "name": "string"
                              }
                            },
                            "expr": {
                              "InvokeAbstractOperationExpression": {
                                "name": "string",
                                "args": [
                                  {
                                    "ReferenceExpression": {
                                      "ref": {
                                        "Variable": {
                                          "Variable": {
                                            "name": "string"
                                          }
                                        }
                                      }
                                    }
                                  },
                                  {
                                    "ReferenceExpression": {
                                      "ref": {
                                        "CurrentRealmRecord": {
                                          "CurrentRealmRecord": {}
                                        }
                                      }
                                    }
                                  },
                                  {
                                    "EnumLiteral": {
                                      "name": "string"
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "PerformStep": {
                            "expr": {
                              "ReturnIfAbruptExpression": {
                                "expr": {
                                  "InvokeAbstractOperationExpression": {
                                    "name": "string",
                                    "args": [
                                      {
                                        "ReferenceExpression": {
                                          "ref": {
                                            "Variable": {
                                              "Variable": {
                                                "name": "string"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                },
                                "check": "boolean"
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "ReturnStep": {
                            "expr": {
                              "UndefinedLiteral": {}
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "RunJobs"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "ReferenceExpression": {
                  "ref": {
                    "CurrentRealmRecord": {
                      "CurrentRealmRecord": {}
                    }
                  }
                }
              },
              {
                "EnumLiteral": {
                  "name": "string"
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "RunJobs"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "UndefinedLiteral": {}
        }
      }
    },
    "appearsIn": [
      "RunJobs",
      "RegExpBuiltinExec",
      "MakeMatchIndicesIndexPairArray",
      "INTRINSICS._TypedArray_",
      "INTRINSICS.TypedArray.prototype.reduceRight",
      "INTRINSICS.TypedArray.prototype.reduce",
      "INTRINSICS.Symbol",
      "INTRINSICS.JSON.stringify",
      "INTRINSICS.Array.prototype.reduceRight",
      "INTRINSICS.Array.prototype.reduce",
      "GeneratorStart",
      "FunctionDeclarationInstantiation",
      "ForInOfBodyEvaluation",
      "ForBodyEvaluation",
      "EvaluateCall",
      "DoWait",
      "DefineField"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractClosureExpression": {
            "ref": {
              "Variable": {
                "name": "string"
              }
            },
            "args": []
          }
        }
      }
    },
    "appearsIn": [
      "RunJobs",
      "GeneratorStart"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "BinaryExpression": {
            "left": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            },
            "op": {
              "Sub": {}
            },
            "right": {
              "DecimalMathValueLiteral": {
                "n": "number"
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "RepeatMatcher",
      "INTRINSICS.TypedArray.prototype.reduceRight",
      "INTRINSICS.TypedArray.prototype.lastIndexOf",
      "INTRINSICS.Array.prototype.reduceRight",
      "INTRINSICS.Array.prototype.lastIndexOf",
      "FlattenIntoArray",
      "DayFromYear",
      "CharacterSetMatcher"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "PositiveInfinityMathValueLiteral": {}
        }
      }
    },
    "appearsIn": [
      "RepeatMatcher",
      "INTRINSICS.String.prototype.lastIndexOf",
      "INTRINSICS.Atomics.notify",
      "FlattenIntoArray",
      "DoWait"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "RecordExpression": {
            "tname": "string",
            "fields": [
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              ],
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              ],
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              ]
            ]
          }
        }
      }
    },
    "appearsIn": [
      "RepeatMatcher",
      "INTRINSICS.FinalizationRegistry.prototype.register",
      "CharacterSetMatcher",
      "BackreferenceMatcher"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractClosureExpression": {
            "ref": {
              "Variable": {
                "name": "string"
              }
            },
            "args": [
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "RepeatMatcher"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractClosureExpression": {
            "ref": {
              "Variable": {
                "name": "string"
              }
            },
            "args": [
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "RepeatMatcher",
      "RegExpBuiltinExec",
      "MatchTwoAlternatives",
      "GetModifySetValueInBuffer"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "NumberOfExpression": {
            "expr": {
              "ReferenceExpression": {
                "ref": {
                  "PropertyReference": {
                    "PropertyReference": {
                      "base": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      },
                      "prop": {
                        "FieldProperty": {
                          "FieldProperty": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "RemoveWaiters",
      "RegExpBuiltinExec",
      "InnerModuleLoading"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "MathFuncExpression": {
            "op": {
              "Min": {}
            },
            "args": [
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "RemoveWaiters",
      "INTRINSICS.TypedArray.prototype.subarray",
      "INTRINSICS.TypedArray.prototype.slice",
      "INTRINSICS.TypedArray.prototype.fill",
      "INTRINSICS.TypedArray.prototype.copyWithin",
      "INTRINSICS.String.prototype.substring",
      "INTRINSICS.String.prototype.slice",
      "INTRINSICS.SharedArrayBuffer.prototype.slice",
      "INTRINSICS.ArrayBuffer.prototype.slice",
      "INTRINSICS.Array.prototype.toSpliced",
      "INTRINSICS.Array.prototype.splice",
      "INTRINSICS.Array.prototype.slice",
      "INTRINSICS.Array.prototype.fill",
      "INTRINSICS.Array.prototype.copyWithin",
      "CharacterSetMatcher",
      "BackreferenceMatcher"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "RecordExpression": {
            "tname": "string",
            "fields": [
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              ],
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              ],
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              ],
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              ],
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              ],
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              ]
            ]
          }
        }
      }
    },
    "appearsIn": [
      "RegExpInitialize"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeAbstractOperationExpression": {
                "name": "string",
                "args": [
                  {
                    "IntrinsicExpression": {
                      "intr": {
                        "Intrinsic": {
                          "base": "string",
                          "props": []
                        }
                      }
                    }
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "RegExpCreate",
      "Record[CyclicModuleRecord].LoadRequestedModules",
      "Record[CyclicModuleRecord].Evaluate",
      "INTRINSICS.Map.groupBy",
      "INTRINSICS.AsyncGeneratorFunction.prototype.prototype.throw",
      "INTRINSICS.AsyncGeneratorFunction.prototype.prototype.return",
      "INTRINSICS.AsyncGeneratorFunction.prototype.prototype.next",
      "INTRINSICS.AsyncFromSyncIteratorPrototype.throw",
      "INTRINSICS.AsyncFromSyncIteratorPrototype.return",
      "INTRINSICS.AsyncFromSyncIteratorPrototype.next",
      "ExecuteAsyncModule",
      "DoWait"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ConversionExpression": {
            "op": {
              "ToMath": {}
            },
            "expr": {
              "ReturnIfAbruptExpression": {
                "expr": {
                  "InvokeAbstractOperationExpression": {
                    "name": "string",
                    "args": [
                      {
                        "ReturnIfAbruptExpression": {
                          "expr": {
                            "InvokeAbstractOperationExpression": {
                              "name": "string",
                              "args": [
                                {
                                  "ReferenceExpression": {
                                    "ref": {
                                      "Variable": {
                                        "Variable": {
                                          "name": "string"
                                        }
                                      }
                                    }
                                  }
                                },
                                {
                                  "StringLiteral": {
                                    "s": "string"
                                  }
                                }
                              ]
                            }
                          },
                          "check": "boolean"
                        }
                      }
                    ]
                  }
                },
                "check": "boolean"
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "RegExpBuiltinExec",
      "INTRINSICS.RegExp.prototype[@@split]",
      "INTRINSICS.RegExp.prototype[@@replace]",
      "INTRINSICS.RegExp.prototype[@@match]",
      "CreateRegExpStringIterator"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeAbstractOperationExpression": {
                "name": "string",
                "args": [
                  {
                    "BinaryExpression": {
                      "left": {
                        "ReferenceExpression": {
                          "ref": {
                            "Variable": {
                              "Variable": {
                                "name": "string"
                              }
                            }
                          }
                        }
                      },
                      "op": {
                        "Add": {}
                      },
                      "right": {
                        "DecimalMathValueLiteral": {
                          "n": "number"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "RegExpBuiltinExec"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "RecordExpression": {
            "tname": "string",
            "fields": [
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              ],
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              ]
            ]
          }
        }
      }
    },
    "appearsIn": [
      "RegExpBuiltinExec",
      "INTRINSICS.WeakMap.prototype.set",
      "INTRINSICS.Map.prototype.set",
      "AvailableNamedTimeZoneIdentifiers",
      "AsyncGeneratorEnqueue"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "NullLiteral": {}
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "RegExpBuiltinExec",
      "NewGlobalEnvironment",
      "MakeMatchIndicesIndexPairArray",
      "INTRINSICS.Object.groupBy",
      "INTRINSICS.Array.prototype[@@unscopables]",
      "CreateMappedArgumentsObject"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "RegExpBuiltinExec",
      "FunctionDeclarationInstantiation"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeAbstractOperationExpression": {
                "name": "string",
                "args": [
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "StringLiteral": {
                      "s": "string"
                    }
                  },
                  {
                    "ListExpression": {
                      "entries": [
                        {
                          "FieldLiteral": {
                            "name": "string"
                          }
                        },
                        {
                          "FieldLiteral": {
                            "name": "string"
                          }
                        },
                        {
                          "FieldLiteral": {
                            "name": "string"
                          }
                        },
                        {
                          "FieldLiteral": {
                            "name": "string"
                          }
                        }
                      ]
                    }
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "RegExpAlloc"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "ReferenceExpression": {
                  "ref": {
                    "PropertyReference": {
                      "PropertyReference": {
                        "base": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        },
                        "prop": {
                          "FieldProperty": {
                            "FieldProperty": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "Record[SourceTextModuleRecord].ResolveExport",
      "Record[SourceTextModuleRecord].InitializeEnvironment",
      "Record[SourceTextModuleRecord].GetExportedNames",
      "PrivateMethodOrAccessorAdd"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "NullLiteral": {}
        }
      }
    },
    "appearsIn": [
      "Record[SourceTextModuleRecord].ResolveExport",
      "Record[SourceTextModuleRecord].InitializeEnvironment",
      "PerformEval",
      "NewPromiseReactionJob",
      "GlobalDeclarationInstantiation",
      "CreateDynamicFunction"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeMethodExpression": {
            "ref": {
              "PropertyReference": {
                "base": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                },
                "prop": {
                  "ComponentProperty": {
                    "ComponentProperty": {
                      "name": "string"
                    }
                  }
                }
              }
            },
            "args": [
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "Record[SourceTextModuleRecord].ResolveExport"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeMethodExpression": {
            "ref": {
              "PropertyReference": {
                "base": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                },
                "prop": {
                  "ComponentProperty": {
                    "ComponentProperty": {
                      "name": "string"
                    }
                  }
                }
              }
            },
            "args": [
              {
                "ReferenceExpression": {
                  "ref": {
                    "PropertyReference": {
                      "PropertyReference": {
                        "base": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        },
                        "prop": {
                          "FieldProperty": {
                            "FieldProperty": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "Record[SourceTextModuleRecord].InitializeEnvironment"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "ReferenceExpression": {
                  "ref": {
                    "PropertyReference": {
                      "PropertyReference": {
                        "base": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        },
                        "prop": {
                          "FieldProperty": {
                            "FieldProperty": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "Record[SourceTextModuleRecord].InitializeEnvironment",
      "PerformEval",
      "INTRINSICS.Object.groupBy",
      "INTRINSICS.Map.groupBy",
      "AsyncGeneratorYield",
      "AsyncGeneratorDrainQueue",
      "AsyncGeneratorAwaitReturn"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeSyntaxDirectedOperationExpression": {
            "base": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            },
            "name": "string",
            "args": [
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "Record[SourceTextModuleRecord].InitializeEnvironment",
      "GlobalDeclarationInstantiation",
      "FunctionDeclarationInstantiation",
      "EvalDeclarationInstantiation",
      "BlockDeclarationInstantiation"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeMethodExpression": {
            "ref": {
              "PropertyReference": {
                "base": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                },
                "prop": {
                  "ComponentProperty": {
                    "ComponentProperty": {
                      "name": "string"
                    }
                  }
                }
              }
            },
            "args": [
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "Record[SourceTextModuleRecord].GetExportedNames",
      "Record[ModuleNamespaceExoticObject].Get",
      "GetModuleNamespace"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "InvokeSyntaxDirectedOperationExpression": {
                  "base": {
                    "ReferenceExpression": {
                      "ref": {
                        "PropertyReference": {
                          "PropertyReference": {
                            "base": {
                              "Variable": {
                                "Variable": {
                                  "name": "string"
                                }
                              }
                            },
                            "prop": {
                              "FieldProperty": {
                                "FieldProperty": {
                                  "name": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "name": "string",
                  "args": []
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "Record[SourceTextModuleRecord].ExecuteModule"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "ReturnIfAbruptExpression": {
                  "expr": {
                    "InvokeAbstractOperationExpression": {
                      "name": "string",
                      "args": [
                        {
                          "ReferenceExpression": {
                            "ref": {
                              "Variable": {
                                "Variable": {
                                  "name": "string"
                                }
                              }
                            }
                          }
                        },
                        {
                          "ReferenceExpression": {
                            "ref": {
                              "Variable": {
                                "Variable": {
                                  "name": "string"
                                }
                              }
                            }
                          }
                        },
                        {
                          "ListExpression": {
                            "entries": [
                              {
                                "ReferenceExpression": {
                                  "ref": {
                                    "Variable": {
                                      "Variable": {
                                        "name": "string"
                                      }
                                    }
                                  }
                                }
                              },
                              {
                                "ReferenceExpression": {
                                  "ref": {
                                    "Variable": {
                                      "Variable": {
                                        "name": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  },
                  "check": "boolean"
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "Record[ProxyExoticObject].SetPrototypeOf",
      "Record[ProxyExoticObject].HasProperty",
      "Record[ProxyExoticObject].Delete"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "ReturnIfAbruptExpression": {
                  "expr": {
                    "InvokeAbstractOperationExpression": {
                      "name": "string",
                      "args": [
                        {
                          "ReferenceExpression": {
                            "ref": {
                              "Variable": {
                                "Variable": {
                                  "name": "string"
                                }
                              }
                            }
                          }
                        },
                        {
                          "ReferenceExpression": {
                            "ref": {
                              "Variable": {
                                "Variable": {
                                  "name": "string"
                                }
                              }
                            }
                          }
                        },
                        {
                          "ListExpression": {
                            "entries": [
                              {
                                "ReferenceExpression": {
                                  "ref": {
                                    "Variable": {
                                      "Variable": {
                                        "name": "string"
                                      }
                                    }
                                  }
                                }
                              },
                              {
                                "ReferenceExpression": {
                                  "ref": {
                                    "Variable": {
                                      "Variable": {
                                        "name": "string"
                                      }
                                    }
                                  }
                                }
                              },
                              {
                                "ReferenceExpression": {
                                  "ref": {
                                    "Variable": {
                                      "Variable": {
                                        "name": "string"
                                      }
                                    }
                                  }
                                }
                              },
                              {
                                "ReferenceExpression": {
                                  "ref": {
                                    "Variable": {
                                      "Variable": {
                                        "name": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  },
                  "check": "boolean"
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "Record[ProxyExoticObject].Set"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "ReturnIfAbruptExpression": {
                  "expr": {
                    "InvokeAbstractOperationExpression": {
                      "name": "string",
                      "args": [
                        {
                          "ReferenceExpression": {
                            "ref": {
                              "Variable": {
                                "Variable": {
                                  "name": "string"
                                }
                              }
                            }
                          }
                        },
                        {
                          "ReferenceExpression": {
                            "ref": {
                              "Variable": {
                                "Variable": {
                                  "name": "string"
                                }
                              }
                            }
                          }
                        },
                        {
                          "ListExpression": {
                            "entries": [
                              {
                                "ReferenceExpression": {
                                  "ref": {
                                    "Variable": {
                                      "Variable": {
                                        "name": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  },
                  "check": "boolean"
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "Record[ProxyExoticObject].PreventExtensions",
      "Record[ProxyExoticObject].IsExtensible"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeAbstractOperationExpression": {
                "name": "string",
                "args": [
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "ListExpression": {
                      "entries": [
                        {
                          "StringTypeLiteral": {}
                        },
                        {
                          "SymbolTypeLiteral": {}
                        }
                      ]
                    }
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "Record[ProxyExoticObject].OwnPropertyKeys"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ListCopyExpression": {
            "expr": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "Record[ProxyExoticObject].OwnPropertyKeys"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeAbstractOperationExpression": {
                "name": "string",
                "args": [
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "ListExpression": {
                      "entries": [
                        {
                          "ReferenceExpression": {
                            "ref": {
                              "Variable": {
                                "Variable": {
                                  "name": "string"
                                }
                              }
                            }
                          }
                        },
                        {
                          "ReferenceExpression": {
                            "ref": {
                              "Variable": {
                                "Variable": {
                                  "name": "string"
                                }
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "Record[ProxyExoticObject].GetOwnProperty"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeAbstractOperationExpression": {
                "name": "string",
                "args": [
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "ListExpression": {
                      "entries": [
                        {
                          "ReferenceExpression": {
                            "ref": {
                              "Variable": {
                                "Variable": {
                                  "name": "string"
                                }
                              }
                            }
                          }
                        },
                        {
                          "ReferenceExpression": {
                            "ref": {
                              "Variable": {
                                "Variable": {
                                  "name": "string"
                                }
                              }
                            }
                          }
                        },
                        {
                          "ReferenceExpression": {
                            "ref": {
                              "Variable": {
                                "Variable": {
                                  "name": "string"
                                }
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "Record[ProxyExoticObject].Get",
      "Record[ProxyExoticObject].Construct"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "ReturnIfAbruptExpression": {
                  "expr": {
                    "InvokeAbstractOperationExpression": {
                      "name": "string",
                      "args": [
                        {
                          "ReferenceExpression": {
                            "ref": {
                              "Variable": {
                                "Variable": {
                                  "name": "string"
                                }
                              }
                            }
                          }
                        },
                        {
                          "ReferenceExpression": {
                            "ref": {
                              "Variable": {
                                "Variable": {
                                  "name": "string"
                                }
                              }
                            }
                          }
                        },
                        {
                          "ListExpression": {
                            "entries": [
                              {
                                "ReferenceExpression": {
                                  "ref": {
                                    "Variable": {
                                      "Variable": {
                                        "name": "string"
                                      }
                                    }
                                  }
                                }
                              },
                              {
                                "ReferenceExpression": {
                                  "ref": {
                                    "Variable": {
                                      "Variable": {
                                        "name": "string"
                                      }
                                    }
                                  }
                                }
                              },
                              {
                                "ReferenceExpression": {
                                  "ref": {
                                    "Variable": {
                                      "Variable": {
                                        "name": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  },
                  "check": "boolean"
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "Record[ProxyExoticObject].DefineOwnProperty"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "ReturnIfAbruptExpression": {
                  "expr": {
                    "InvokeAbstractOperationExpression": {
                      "name": "string",
                      "args": [
                        {
                          "ReferenceExpression": {
                            "ref": {
                              "Variable": {
                                "Variable": {
                                  "name": "string"
                                }
                              }
                            }
                          }
                        },
                        {
                          "ReferenceExpression": {
                            "ref": {
                              "Variable": {
                                "Variable": {
                                  "name": "string"
                                }
                              }
                            }
                          }
                        }
                      ]
                    }
                  },
                  "check": "boolean"
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "Record[ObjectEnvironmentRecord].HasBinding"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeMethodExpression": {
                "ref": {
                  "PropertyReference": {
                    "base": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    },
                    "prop": {
                      "FieldProperty": {
                        "FieldProperty": {
                          "name": "string"
                        }
                      }
                    }
                  }
                },
                "args": [
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "Record[ModuleNamespaceExoticObject].GetOwnProperty",
      "DefinePropertyOrThrow"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeMethodExpression": {
                "ref": {
                  "PropertyReference": {
                    "base": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    },
                    "prop": {
                      "ComponentProperty": {
                        "ComponentProperty": {
                          "name": "string"
                        }
                      }
                    }
                  }
                },
                "args": [
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "Record[GlobalEnvironmentRecord].DeleteBinding",
      "GlobalDeclarationInstantiation",
      "GetIdentifierReference",
      "FunctionDeclarationInstantiation",
      "EvalDeclarationInstantiation"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "RecordExpression": {
            "tname": "string",
            "fields": [
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              ],
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "TrueLiteral": {}
                }
              ],
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "TrueLiteral": {}
                }
              ],
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              ]
            ]
          }
        }
      }
    },
    "appearsIn": [
      "Record[GlobalEnvironmentRecord].CreateGlobalFunctionBinding"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "RecordExpression": {
            "tname": "string",
            "fields": [
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              ]
            ]
          }
        }
      }
    },
    "appearsIn": [
      "Record[GlobalEnvironmentRecord].CreateGlobalFunctionBinding",
      "OrdinarySetWithOwnDescriptor",
      "INTRINSICS.Symbol.for"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReferenceExpression": {
            "ref": {
              "RunningExecutionContext": {
                "RunningExecutionContext": {}
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "Record[ECMAScriptFunctionObject].Construct",
      "Record[ECMAScriptFunctionObject].Call",
      "PrepareForOrdinaryCall",
      "PerformEval",
      "GetGeneratorKind",
      "GeneratorYield",
      "GeneratorStart",
      "GeneratorResumeAbrupt",
      "GeneratorResume",
      "FunctionDeclarationInstantiation",
      "CreateIteratorFromClosure",
      "CreateAsyncIteratorFromClosure",
      "BuiltinCallOrConstruct",
      "Await",
      "AsyncGeneratorYield",
      "AsyncGeneratorStart",
      "AsyncGeneratorResume",
      "AsyncFunctionStart",
      "AsyncBlockStart"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReferenceExpression": {
            "ref": {
              "PropertyReference": {
                "PropertyReference": {
                  "base": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  },
                  "prop": {
                    "ComponentProperty": {
                      "ComponentProperty": {
                        "name": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "Record[ECMAScriptFunctionObject].Construct",
      "PerformEval",
      "OrdinaryCallBindThis",
      "GetGeneratorKind",
      "GeneratorYield",
      "GeneratorStart",
      "FunctionDeclarationInstantiation",
      "AsyncGeneratorYield",
      "AsyncGeneratorStart"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeMethodExpression": {
                "ref": {
                  "PropertyReference": {
                    "base": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    },
                    "prop": {
                      "ComponentProperty": {
                        "ComponentProperty": {
                          "name": "string"
                        }
                      }
                    }
                  }
                },
                "args": []
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "Record[ECMAScriptFunctionObject].Construct",
      "MakeSuperPropertyReference",
      "InnerModuleEvaluation"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "UndefinedLiteral": {}
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "Record[ECMAScriptFunctionObject].Call"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ErrorObjectLiteral": {
            "name": "string"
          }
        }
      }
    },
    "appearsIn": [
      "Record[ECMAScriptFunctionObject].Call",
      "PerformPromiseAny",
      "INTRINSICS.yet:PromiseResolveFunction",
      "INTRINSICS.yet:Promise.anyRejectElementFunction"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "RecordExpression": {
            "tname": "string",
            "fields": [
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "TrueLiteral": {}
                }
              ],
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "DecimalMathValueLiteral": {
                    "n": "number"
                  }
                }
              ],
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "ListExpression": {
                    "entries": []
                  }
                }
              ],
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              ],
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              ]
            ]
          }
        }
      }
    },
    "appearsIn": [
      "Record[CyclicModuleRecord].LoadRequestedModules"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "InvokeAbstractOperationExpression": {
                  "name": "string",
                  "args": [
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    },
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    },
                    {
                      "DecimalMathValueLiteral": {
                        "n": "number"
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "Record[CyclicModuleRecord].Link",
      "Record[CyclicModuleRecord].Evaluate"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ListConcatExpression": {
            "exprs": [
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "Record[BoundFunctionExoticObject].Construct",
      "Record[BoundFunctionExoticObject].Call"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "StringLiteral": {
                  "s": "string"
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "Record[Array].DefineOwnProperty",
      "ArraySetLength"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeAbstractOperationExpression": {
                "name": "string",
                "args": [
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "PropertyReference": {
                          "PropertyReference": {
                            "base": {
                              "Variable": {
                                "Variable": {
                                  "name": "string"
                                }
                              }
                            },
                            "prop": {
                              "FieldProperty": {
                                "FieldProperty": {
                                  "name": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "PutValue",
      "GetValue",
      "EnqueueResolveInAgentJob",
      "ArraySetLength"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeMethodExpression": {
                "ref": {
                  "PropertyReference": {
                    "base": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    },
                    "prop": {
                      "FieldProperty": {
                        "FieldProperty": {
                          "name": "string"
                        }
                      }
                    }
                  }
                },
                "args": [
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "PropertyReference": {
                          "PropertyReference": {
                            "base": {
                              "Variable": {
                                "Variable": {
                                  "name": "string"
                                }
                              }
                            },
                            "prop": {
                              "FieldProperty": {
                                "FieldProperty": {
                                  "name": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "InvokeAbstractOperationExpression": {
                      "name": "string",
                      "args": [
                        {
                          "ReferenceExpression": {
                            "ref": {
                              "Variable": {
                                "Variable": {
                                  "name": "string"
                                }
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "PutValue"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "ListExpression": {
                  "entries": [
                    {
                      "FieldLiteral": {
                        "name": "string"
                      }
                    },
                    {
                      "FieldLiteral": {
                        "name": "string"
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "ProxyCreate",
      "ArrayCreate"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "RecordExpression": {
            "tname": "string",
            "fields": [
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              ],
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "EnumLiteral": {
                    "name": "string"
                  }
                }
              ],
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              ]
            ]
          }
        }
      }
    },
    "appearsIn": [
      "PerformPromiseThen"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "RecordExpression": {
            "tname": "string",
            "fields": [
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "DecimalMathValueLiteral": {
                    "n": "number"
                  }
                }
              ]
            ]
          }
        }
      }
    },
    "appearsIn": [
      "PerformPromiseAny",
      "PerformPromiseAllSettled",
      "PerformPromiseAll"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "XRefExpression": {
            "kind": {
              "Algo": {}
            },
            "id": "string"
          }
        }
      }
    },
    "appearsIn": [
      "PerformPromiseAny",
      "PerformPromiseAllSettled",
      "PerformPromiseAll",
      "CreateResolvingFunctions"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "XRefExpression": {
            "kind": {
              "ParamLength": {}
            },
            "id": "string"
          }
        }
      }
    },
    "appearsIn": [
      "PerformPromiseAny",
      "PerformPromiseAllSettled",
      "PerformPromiseAll",
      "CreateResolvingFunctions"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "StringLiteral": {
                  "s": "string"
                }
              },
              {
                "ListExpression": {
                  "entries": [
                    {
                      "FieldLiteral": {
                        "name": "string"
                      }
                    },
                    {
                      "FieldLiteral": {
                        "name": "string"
                      }
                    },
                    {
                      "FieldLiteral": {
                        "name": "string"
                      }
                    },
                    {
                      "FieldLiteral": {
                        "name": "string"
                      }
                    },
                    {
                      "FieldLiteral": {
                        "name": "string"
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "PerformPromiseAny",
      "PerformPromiseAllSettled",
      "PerformPromiseAll"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReferenceExpression": {
            "ref": {
              "CurrentRealmRecord": {
                "CurrentRealmRecord": {}
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "PerformEval",
      "NewPromiseResolveThenableJob",
      "GetTemplateObject",
      "GetGlobalObject",
      "EnqueueAtomicsWaitAsyncTimeoutJob",
      "CreateDynamicFunction",
      "ArraySpeciesCreate"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "InvokeAbstractOperationExpression": {
                  "name": "string",
                  "args": [
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              },
              {
                "NonterminalLiteral": {
                  "ordinal": "null",
                  "name": "string",
                  "flags": []
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "PerformEval",
      "ParseTimeZoneOffsetString",
      "IsTimeZoneOffsetString",
      "INTRINSICS.JSON.parse"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReferenceExpression": {
            "ref": {
              "PropertyReference": {
                "PropertyReference": {
                  "base": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  },
                  "prop": {
                    "NonterminalProperty": {
                      "NonterminalProperty": {
                        "name": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "PerformEval",
      "IsLabelledFunction"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "ReferenceExpression": {
                  "ref": {
                    "PropertyReference": {
                      "PropertyReference": {
                        "base": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        },
                        "prop": {
                          "ComponentProperty": {
                            "ComponentProperty": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "PerformEval"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "InvokeAbstractOperationExpression": {
                  "name": "string",
                  "args": [
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    },
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    },
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    },
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    },
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "PerformEval"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "UnaryExpression": {
            "op": {
              "Neg": {}
            },
            "expr": {
              "DecimalMathValueLiteral": {
                "n": "number"
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "ParseTimeZoneOffsetString",
      "INTRINSICS.TypedArray.prototype.copyWithin",
      "INTRINSICS.Array.prototype.copyWithin"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ConversionExpression": {
            "op": {
              "ToMath": {}
            },
            "expr": {
              "InvokeAbstractOperationExpression": {
                "name": "string",
                "args": [
                  {
                    "InvokeAbstractOperationExpression": {
                      "name": "string",
                      "args": [
                        {
                          "ReferenceExpression": {
                            "ref": {
                              "Variable": {
                                "Variable": {
                                  "name": "string"
                                }
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                ]
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "ParseTimeZoneOffsetString"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "StringConcatExpression": {
            "exprs": [
              {
                "InvokeAbstractOperationExpression": {
                  "name": "string",
                  "args": [
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              },
              {
                "StringLiteral": {
                  "s": "string"
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "ParseTimeZoneOffsetString"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "SubstringExpression": {
            "expr": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            },
            "from": {
              "DecimalMathValueLiteral": {
                "n": "number"
              }
            },
            "to": {
              "DecimalMathValueLiteral": {
                "n": "number"
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "ParseTimeZoneOffsetString",
      "INTRINSICS.JSON.stringify",
      "GetSubstitution"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ConversionExpression": {
            "op": {
              "ToMath": {}
            },
            "expr": {
              "InvokeAbstractOperationExpression": {
                "name": "string",
                "args": [
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "ParseTimeZoneOffsetString",
      "GetSubstitution"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeSyntaxDirectedOperationExpression": {
            "base": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            },
            "name": "string",
            "args": [
              {
                "CodeLiteral": {
                  "code": "string"
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "ParseModule"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "SubstringExpression": {
            "expr": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            },
            "from": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            },
            "to": {
              "BinaryExpression": {
                "left": {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                },
                "op": {
                  "Add": {}
                },
                "right": {
                  "DecimalMathValueLiteral": {
                    "n": "number"
                  }
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "ParseHexOctet",
      "Decode"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "InvokeAbstractOperationExpression": {
                  "name": "string",
                  "args": [
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              },
              {
                "NonterminalLiteral": {
                  "ordinal": "null",
                  "name": "string",
                  "flags": [
                    "string"
                  ]
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "ParseHexOctet"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ListExpression": {
            "entries": [
              {
                "StringLiteral": {
                  "s": "string"
                }
              },
              {
                "StringLiteral": {
                  "s": "string"
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "OrdinaryToPrimitive"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ListExpression": {
            "entries": [
              {
                "FieldLiteral": {
                  "name": "string"
                }
              },
              {
                "FieldLiteral": {
                  "name": "string"
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "OrdinaryObjectCreate"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "XRefExpression": {
            "kind": {
              "InternalSlots": {}
            },
            "id": "string"
          }
        }
      }
    },
    "appearsIn": [
      "OrdinaryFunctionCreate",
      "ModuleNamespaceCreate"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ConversionExpression": {
            "op": {
              "ToMath": {}
            },
            "expr": {
              "InvokeAbstractClosureExpression": {
                "ref": {
                  "Variable": {
                    "name": "string"
                  }
                },
                "args": [
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "NumericToRawBytes"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "BitwiseExpression": {
            "left": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            },
            "op": {
              "BAnd": {}
            },
            "right": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "NumberBitwiseOp",
      "ByteListBitwiseOp"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "BitwiseExpression": {
            "left": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            },
            "op": {
              "BXOr": {}
            },
            "right": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "NumberBitwiseOp",
      "ByteListBitwiseOp"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "BitwiseExpression": {
            "left": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            },
            "op": {
              "BOr": {}
            },
            "right": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "NumberBitwiseOp",
      "ByteListBitwiseOp"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "BinaryExpression": {
            "left": {
              "ConversionExpression": {
                "op": {
                  "ToMath": {}
                },
                "expr": {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "op": {
              "Mod": {}
            },
            "right": {
              "DecimalMathValueLiteral": {
                "n": "number"
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "Number::unsignedRightShift",
      "Number::signedRightShift",
      "Number::leftShift"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "HexLiteral": {
            "hex": "number",
            "name": "string"
          }
        }
      }
    },
    "appearsIn": [
      "Number::toString",
      "INTRINSICS.get RegExp.prototype.unicodeSets",
      "INTRINSICS.get RegExp.prototype.unicode",
      "INTRINSICS.get RegExp.prototype.sticky",
      "INTRINSICS.get RegExp.prototype.multiline",
      "INTRINSICS.get RegExp.prototype.ignoreCase",
      "INTRINSICS.get RegExp.prototype.hasIndices",
      "INTRINSICS.get RegExp.prototype.global",
      "INTRINSICS.get RegExp.prototype.dotAll",
      "INTRINSICS.Number.prototype.toPrecision"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "BinaryExpression": {
            "left": {
              "ConversionExpression": {
                "op": {
                  "ToMath": {}
                },
                "expr": {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "op": {
              "Div": {}
            },
            "right": {
              "ConversionExpression": {
                "op": {
                  "ToMath": {}
                },
                "expr": {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "Number::remainder",
      "BigInt::remainder",
      "BigInt::divide"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "MathFuncExpression": {
            "op": {
              "Truncate": {}
            },
            "args": [
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "Number::remainder"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "BinaryExpression": {
            "left": {
              "ConversionExpression": {
                "op": {
                  "ToMath": {}
                },
                "expr": {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "op": {
              "Sub": {}
            },
            "right": {
              "BinaryExpression": {
                "left": {
                  "ConversionExpression": {
                    "op": {
                      "ToMath": {}
                    },
                    "expr": {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "op": {
                  "Mul": {}
                },
                "right": {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "Number::remainder"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "params": [],
          "captured": [
            {
              "Variable": {
                "name": "string"
              }
            },
            {
              "Variable": {
                "name": "string"
              }
            },
            {
              "Variable": {
                "name": "string"
              }
            }
          ],
          "body": {
            "BlockStep": {
              "block": {
                "StepBlock": {
                  "steps": [
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "LetStep": {
                            "variable": {
                              "Variable": {
                                "name": "string"
                              }
                            },
                            "expr": {
                              "InvokeAbstractOperationExpression": {
                                "name": "string",
                                "args": [
                                  {
                                    "ReferenceExpression": {
                                      "ref": {
                                        "Variable": {
                                          "Variable": {
                                            "name": "string"
                                          }
                                        }
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "LetStep": {
                            "variable": {
                              "Variable": {
                                "name": "string"
                              }
                            },
                            "expr": {
                              "InvokeAbstractOperationExpression": {
                                "name": "string",
                                "args": [
                                  {
                                    "InvokeAbstractOperationExpression": {
                                      "name": "string",
                                      "args": [
                                        {
                                          "ReferenceExpression": {
                                            "ref": {
                                              "Variable": {
                                                "Variable": {
                                                  "name": "string"
                                                }
                                              }
                                            }
                                          }
                                        },
                                        {
                                          "ReferenceExpression": {
                                            "ref": {
                                              "Variable": {
                                                "Variable": {
                                                  "name": "string"
                                                }
                                              }
                                            }
                                          }
                                        },
                                        {
                                          "ListExpression": {
                                            "entries": [
                                              {
                                                "ReferenceExpression": {
                                                  "ref": {
                                                    "PropertyReference": {
                                                      "PropertyReference": {
                                                        "base": {
                                                          "Variable": {
                                                            "Variable": {
                                                              "name": "string"
                                                            }
                                                          }
                                                        },
                                                        "prop": {
                                                          "FieldProperty": {
                                                            "FieldProperty": {
                                                              "name": "string"
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "ReferenceExpression": {
                                                  "ref": {
                                                    "PropertyReference": {
                                                      "PropertyReference": {
                                                        "base": {
                                                          "Variable": {
                                                            "Variable": {
                                                              "name": "string"
                                                            }
                                                          }
                                                        },
                                                        "prop": {
                                                          "FieldProperty": {
                                                            "FieldProperty": {
                                                              "name": "string"
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "IfStep": {
                            "cond": {
                              "PredicateCondition": {
                                "expr": {
                                  "ReferenceExpression": {
                                    "ref": {
                                      "Variable": {
                                        "Variable": {
                                          "name": "string"
                                        }
                                      }
                                    }
                                  }
                                },
                                "negation": "boolean",
                                "op": {
                                  "Abrupt": {}
                                }
                              }
                            },
                            "thenStep": {
                              "BlockStep": {
                                "block": {
                                  "StepBlock": {
                                    "steps": [
                                      {
                                        "SubStep": {
                                          "directive": "null",
                                          "step": {
                                            "ReturnStep": {
                                              "expr": {
                                                "ReturnIfAbruptExpression": {
                                                  "expr": {
                                                    "InvokeAbstractOperationExpression": {
                                                      "name": "string",
                                                      "args": [
                                                        {
                                                          "ReferenceExpression": {
                                                            "ref": {
                                                              "PropertyReference": {
                                                                "PropertyReference": {
                                                                  "base": {
                                                                    "Variable": {
                                                                      "Variable": {
                                                                        "name": "string"
                                                                      }
                                                                    }
                                                                  },
                                                                  "prop": {
                                                                    "FieldProperty": {
                                                                      "FieldProperty": {
                                                                        "name": "string"
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "UndefinedLiteral": {}
                                                        },
                                                        {
                                                          "ListExpression": {
                                                            "entries": [
                                                              {
                                                                "ReferenceExpression": {
                                                                  "ref": {
                                                                    "PropertyReference": {
                                                                      "PropertyReference": {
                                                                        "base": {
                                                                          "Variable": {
                                                                            "Variable": {
                                                                              "name": "string"
                                                                            }
                                                                          }
                                                                        },
                                                                        "prop": {
                                                                          "FieldProperty": {
                                                                            "FieldProperty": {
                                                                              "name": "string"
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            ]
                                                          }
                                                        }
                                                      ]
                                                    }
                                                  },
                                                  "check": "boolean"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            },
                            "elseStep": "null"
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "ReturnStep": {
                            "expr": {
                              "ReturnIfAbruptExpression": {
                                "expr": {
                                  "ReferenceExpression": {
                                    "ref": {
                                      "Variable": {
                                        "Variable": {
                                          "name": "string"
                                        }
                                      }
                                    }
                                  }
                                },
                                "check": "boolean"
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "NewPromiseResolveThenableJob"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "InvokeAbstractOperationExpression": {
                  "name": "string",
                  "args": [
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    },
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    },
                    {
                      "ListExpression": {
                        "entries": [
                          {
                            "ReferenceExpression": {
                              "ref": {
                                "PropertyReference": {
                                  "PropertyReference": {
                                    "base": {
                                      "Variable": {
                                        "Variable": {
                                          "name": "string"
                                        }
                                      }
                                    },
                                    "prop": {
                                      "FieldProperty": {
                                        "FieldProperty": {
                                          "name": "string"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          {
                            "ReferenceExpression": {
                              "ref": {
                                "PropertyReference": {
                                  "PropertyReference": {
                                    "base": {
                                      "Variable": {
                                        "Variable": {
                                          "name": "string"
                                        }
                                      }
                                    },
                                    "prop": {
                                      "FieldProperty": {
                                        "FieldProperty": {
                                          "name": "string"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "NewPromiseResolveThenableJob"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "InvokeAbstractOperationExpression": {
                  "name": "string",
                  "args": [
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "PropertyReference": {
                            "PropertyReference": {
                              "base": {
                                "Variable": {
                                  "Variable": {
                                    "name": "string"
                                  }
                                }
                              },
                              "prop": {
                                "FieldProperty": {
                                  "FieldProperty": {
                                    "name": "string"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "NewPromiseResolveThenableJob",
      "AsyncGeneratorUnwrapYieldResumption"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "params": [],
          "captured": [
            {
              "Variable": {
                "name": "string"
              }
            },
            {
              "Variable": {
                "name": "string"
              }
            }
          ],
          "body": {
            "BlockStep": {
              "block": {
                "StepBlock": {
                  "steps": [
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "LetStep": {
                            "variable": {
                              "Variable": {
                                "name": "string"
                              }
                            },
                            "expr": {
                              "ReferenceExpression": {
                                "ref": {
                                  "PropertyReference": {
                                    "PropertyReference": {
                                      "base": {
                                        "Variable": {
                                          "Variable": {
                                            "name": "string"
                                          }
                                        }
                                      },
                                      "prop": {
                                        "FieldProperty": {
                                          "FieldProperty": {
                                            "name": "string"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "LetStep": {
                            "variable": {
                              "Variable": {
                                "name": "string"
                              }
                            },
                            "expr": {
                              "ReferenceExpression": {
                                "ref": {
                                  "PropertyReference": {
                                    "PropertyReference": {
                                      "base": {
                                        "Variable": {
                                          "Variable": {
                                            "name": "string"
                                          }
                                        }
                                      },
                                      "prop": {
                                        "FieldProperty": {
                                          "FieldProperty": {
                                            "name": "string"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "LetStep": {
                            "variable": {
                              "Variable": {
                                "name": "string"
                              }
                            },
                            "expr": {
                              "ReferenceExpression": {
                                "ref": {
                                  "PropertyReference": {
                                    "PropertyReference": {
                                      "base": {
                                        "Variable": {
                                          "Variable": {
                                            "name": "string"
                                          }
                                        }
                                      },
                                      "prop": {
                                        "FieldProperty": {
                                          "FieldProperty": {
                                            "name": "string"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "IfStep": {
                            "cond": {
                              "IsAreCondition": {
                                "left": [
                                  {
                                    "ReferenceExpression": {
                                      "ref": {
                                        "Variable": {
                                          "Variable": {
                                            "name": "string"
                                          }
                                        }
                                      }
                                    }
                                  }
                                ],
                                "negation": "boolean",
                                "right": [
                                  {
                                    "EnumLiteral": {
                                      "name": "string"
                                    }
                                  }
                                ]
                              }
                            },
                            "thenStep": {
                              "BlockStep": {
                                "block": {
                                  "StepBlock": {
                                    "steps": [
                                      {
                                        "SubStep": {
                                          "directive": "null",
                                          "step": {
                                            "IfStep": {
                                              "cond": {
                                                "IsAreCondition": {
                                                  "left": [
                                                    {
                                                      "ReferenceExpression": {
                                                        "ref": {
                                                          "Variable": {
                                                            "Variable": {
                                                              "name": "string"
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  ],
                                                  "negation": "boolean",
                                                  "right": [
                                                    {
                                                      "EnumLiteral": {
                                                        "name": "string"
                                                      }
                                                    }
                                                  ]
                                                }
                                              },
                                              "thenStep": {
                                                "BlockStep": {
                                                  "block": {
                                                    "StepBlock": {
                                                      "steps": [
                                                        {
                                                          "SubStep": {
                                                            "directive": "null",
                                                            "step": {
                                                              "LetStep": {
                                                                "variable": {
                                                                  "Variable": {
                                                                    "name": "string"
                                                                  }
                                                                },
                                                                "expr": {
                                                                  "InvokeAbstractOperationExpression": {
                                                                    "name": "string",
                                                                    "args": [
                                                                      {
                                                                        "ReferenceExpression": {
                                                                          "ref": {
                                                                            "Variable": {
                                                                              "Variable": {
                                                                                "name": "string"
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    ]
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      ]
                                                    }
                                                  }
                                                }
                                              },
                                              "elseStep": {
                                                "BlockStep": {
                                                  "block": {
                                                    "StepBlock": {
                                                      "steps": [
                                                        {
                                                          "SubStep": {
                                                            "directive": "null",
                                                            "step": {
                                                              "AssertStep": {
                                                                "cond": {
                                                                  "IsAreCondition": {
                                                                    "left": [
                                                                      {
                                                                        "ReferenceExpression": {
                                                                          "ref": {
                                                                            "Variable": {
                                                                              "Variable": {
                                                                                "name": "string"
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    ],
                                                                    "negation": "boolean",
                                                                    "right": [
                                                                      {
                                                                        "EnumLiteral": {
                                                                          "name": "string"
                                                                        }
                                                                      }
                                                                    ]
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "SubStep": {
                                                            "directive": "null",
                                                            "step": {
                                                              "LetStep": {
                                                                "variable": {
                                                                  "Variable": {
                                                                    "name": "string"
                                                                  }
                                                                },
                                                                "expr": {
                                                                  "InvokeAbstractOperationExpression": {
                                                                    "name": "string",
                                                                    "args": [
                                                                      {
                                                                        "ReferenceExpression": {
                                                                          "ref": {
                                                                            "Variable": {
                                                                              "Variable": {
                                                                                "name": "string"
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    ]
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      ]
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            },
                            "elseStep": {
                              "BlockStep": {
                                "block": {
                                  "StepBlock": {
                                    "steps": [
                                      {
                                        "SubStep": {
                                          "directive": "null",
                                          "step": {
                                            "LetStep": {
                                              "variable": {
                                                "Variable": {
                                                  "name": "string"
                                                }
                                              },
                                              "expr": {
                                                "InvokeAbstractOperationExpression": {
                                                  "name": "string",
                                                  "args": [
                                                    {
                                                      "InvokeAbstractOperationExpression": {
                                                        "name": "string",
                                                        "args": [
                                                          {
                                                            "ReferenceExpression": {
                                                              "ref": {
                                                                "Variable": {
                                                                  "Variable": {
                                                                    "name": "string"
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          },
                                                          {
                                                            "UndefinedLiteral": {}
                                                          },
                                                          {
                                                            "ListExpression": {
                                                              "entries": [
                                                                {
                                                                  "ReferenceExpression": {
                                                                    "ref": {
                                                                      "Variable": {
                                                                        "Variable": {
                                                                          "name": "string"
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              ]
                                                            }
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  ]
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "IfStep": {
                            "cond": {
                              "IsAreCondition": {
                                "left": [
                                  {
                                    "ReferenceExpression": {
                                      "ref": {
                                        "Variable": {
                                          "Variable": {
                                            "name": "string"
                                          }
                                        }
                                      }
                                    }
                                  }
                                ],
                                "negation": "boolean",
                                "right": [
                                  {
                                    "UndefinedLiteral": {}
                                  }
                                ]
                              }
                            },
                            "thenStep": {
                              "BlockStep": {
                                "block": {
                                  "StepBlock": {
                                    "steps": [
                                      {
                                        "SubStep": {
                                          "directive": "null",
                                          "step": {
                                            "AssertStep": {
                                              "cond": {
                                                "PredicateCondition": {
                                                  "expr": {
                                                    "ReferenceExpression": {
                                                      "ref": {
                                                        "Variable": {
                                                          "Variable": {
                                                            "name": "string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "negation": "boolean",
                                                  "op": {
                                                    "Abrupt": {}
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "SubStep": {
                                          "directive": "null",
                                          "step": {
                                            "ReturnStep": {
                                              "expr": {
                                                "EnumLiteral": {
                                                  "name": "string"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            },
                            "elseStep": "null"
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "AssertStep": {
                            "cond": {
                              "TypeCheckCondition": {
                                "expr": {
                                  "ReferenceExpression": {
                                    "ref": {
                                      "Variable": {
                                        "Variable": {
                                          "name": "string"
                                        }
                                      }
                                    }
                                  }
                                },
                                "negation": "boolean",
                                "ty": [
                                  {
                                    "Type": {
                                      "clo": {
                                        "names": []
                                      },
                                      "cont": {
                                        "Fin": {
                                          "set": []
                                        }
                                      },
                                      "record": {
                                        "Elem": {
                                          "map": {
                                            "PromiseCapabilityRecord": {
                                              "map": {}
                                            }
                                          }
                                        }
                                      },
                                      "map": {
                                        "Bot": {}
                                      },
                                      "list": {
                                        "Bot": {}
                                      },
                                      "ast": {
                                        "Simple": {
                                          "set": []
                                        }
                                      },
                                      "grammarSymbol": {
                                        "Fin": {
                                          "set": []
                                        }
                                      },
                                      "codeUnit": "boolean",
                                      "enumv": {
                                        "Fin": {
                                          "set": []
                                        }
                                      },
                                      "math": {
                                        "int": {
                                          "IntSetTy": {
                                            "set": []
                                          }
                                        }
                                      },
                                      "infinity": {
                                        "pos": []
                                      },
                                      "number": {
                                        "int": {
                                          "IntSetTy": {
                                            "set": []
                                          }
                                        },
                                        "hasNaN": "boolean"
                                      },
                                      "bigInt": "boolean",
                                      "str": {
                                        "Fin": {
                                          "set": []
                                        }
                                      },
                                      "bool": {
                                        "set": []
                                      },
                                      "undef": "boolean",
                                      "nullv": "boolean"
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "IfStep": {
                            "cond": {
                              "PredicateCondition": {
                                "expr": {
                                  "ReferenceExpression": {
                                    "ref": {
                                      "Variable": {
                                        "Variable": {
                                          "name": "string"
                                        }
                                      }
                                    }
                                  }
                                },
                                "negation": "boolean",
                                "op": {
                                  "Abrupt": {}
                                }
                              }
                            },
                            "thenStep": {
                              "BlockStep": {
                                "block": {
                                  "StepBlock": {
                                    "steps": [
                                      {
                                        "SubStep": {
                                          "directive": "null",
                                          "step": {
                                            "ReturnStep": {
                                              "expr": {
                                                "ReturnIfAbruptExpression": {
                                                  "expr": {
                                                    "InvokeAbstractOperationExpression": {
                                                      "name": "string",
                                                      "args": [
                                                        {
                                                          "ReferenceExpression": {
                                                            "ref": {
                                                              "PropertyReference": {
                                                                "PropertyReference": {
                                                                  "base": {
                                                                    "Variable": {
                                                                      "Variable": {
                                                                        "name": "string"
                                                                      }
                                                                    }
                                                                  },
                                                                  "prop": {
                                                                    "FieldProperty": {
                                                                      "FieldProperty": {
                                                                        "name": "string"
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "UndefinedLiteral": {}
                                                        },
                                                        {
                                                          "ListExpression": {
                                                            "entries": [
                                                              {
                                                                "ReferenceExpression": {
                                                                  "ref": {
                                                                    "PropertyReference": {
                                                                      "PropertyReference": {
                                                                        "base": {
                                                                          "Variable": {
                                                                            "Variable": {
                                                                              "name": "string"
                                                                            }
                                                                          }
                                                                        },
                                                                        "prop": {
                                                                          "FieldProperty": {
                                                                            "FieldProperty": {
                                                                              "name": "string"
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            ]
                                                          }
                                                        }
                                                      ]
                                                    }
                                                  },
                                                  "check": "boolean"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            },
                            "elseStep": {
                              "BlockStep": {
                                "block": {
                                  "StepBlock": {
                                    "steps": [
                                      {
                                        "SubStep": {
                                          "directive": "null",
                                          "step": {
                                            "ReturnStep": {
                                              "expr": {
                                                "ReturnIfAbruptExpression": {
                                                  "expr": {
                                                    "InvokeAbstractOperationExpression": {
                                                      "name": "string",
                                                      "args": [
                                                        {
                                                          "ReferenceExpression": {
                                                            "ref": {
                                                              "PropertyReference": {
                                                                "PropertyReference": {
                                                                  "base": {
                                                                    "Variable": {
                                                                      "Variable": {
                                                                        "name": "string"
                                                                      }
                                                                    }
                                                                  },
                                                                  "prop": {
                                                                    "FieldProperty": {
                                                                      "FieldProperty": {
                                                                        "name": "string"
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "UndefinedLiteral": {}
                                                        },
                                                        {
                                                          "ListExpression": {
                                                            "entries": [
                                                              {
                                                                "ReferenceExpression": {
                                                                  "ref": {
                                                                    "PropertyReference": {
                                                                      "PropertyReference": {
                                                                        "base": {
                                                                          "Variable": {
                                                                            "Variable": {
                                                                              "name": "string"
                                                                            }
                                                                          }
                                                                        },
                                                                        "prop": {
                                                                          "FieldProperty": {
                                                                            "FieldProperty": {
                                                                              "name": "string"
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            ]
                                                          }
                                                        }
                                                      ]
                                                    }
                                                  },
                                                  "check": "boolean"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "NewPromiseReactionJob"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "InvokeAbstractOperationExpression": {
                  "name": "string",
                  "args": [
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    },
                    {
                      "UndefinedLiteral": {}
                    },
                    {
                      "ListExpression": {
                        "entries": [
                          {
                            "ReferenceExpression": {
                              "ref": {
                                "Variable": {
                                  "Variable": {
                                    "name": "string"
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "NewPromiseReactionJob"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "InvokeAbstractOperationExpression": {
                  "name": "string",
                  "args": [
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "PropertyReference": {
                            "PropertyReference": {
                              "base": {
                                "PropertyReference": {
                                  "PropertyReference": {
                                    "base": {
                                      "Variable": {
                                        "Variable": {
                                          "name": "string"
                                        }
                                      }
                                    },
                                    "prop": {
                                      "FieldProperty": {
                                        "FieldProperty": {
                                          "name": "string"
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "prop": {
                                "FieldProperty": {
                                  "FieldProperty": {
                                    "name": "string"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "NewPromiseReactionJob"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "RecordExpression": {
            "tname": "string",
            "fields": [
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "UndefinedLiteral": {}
                }
              ],
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "UndefinedLiteral": {}
                }
              ]
            ]
          }
        }
      }
    },
    "appearsIn": [
      "NewPromiseCapability"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "params": [
            {
              "Variable": {
                "name": "string"
              }
            },
            {
              "Variable": {
                "name": "string"
              }
            }
          ],
          "captured": [
            {
              "Variable": {
                "name": "string"
              }
            }
          ],
          "body": {
            "BlockStep": {
              "block": {
                "StepBlock": {
                  "steps": [
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "IfStep": {
                            "cond": {
                              "IsAreCondition": {
                                "left": [
                                  {
                                    "ReferenceExpression": {
                                      "ref": {
                                        "PropertyReference": {
                                          "PropertyReference": {
                                            "base": {
                                              "Variable": {
                                                "Variable": {
                                                  "name": "string"
                                                }
                                              }
                                            },
                                            "prop": {
                                              "FieldProperty": {
                                                "FieldProperty": {
                                                  "name": "string"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                ],
                                "negation": "boolean",
                                "right": [
                                  {
                                    "UndefinedLiteral": {}
                                  }
                                ]
                              }
                            },
                            "thenStep": {
                              "ThrowStep": {
                                "name": "string"
                              }
                            },
                            "elseStep": "null"
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "IfStep": {
                            "cond": {
                              "IsAreCondition": {
                                "left": [
                                  {
                                    "ReferenceExpression": {
                                      "ref": {
                                        "PropertyReference": {
                                          "PropertyReference": {
                                            "base": {
                                              "Variable": {
                                                "Variable": {
                                                  "name": "string"
                                                }
                                              }
                                            },
                                            "prop": {
                                              "FieldProperty": {
                                                "FieldProperty": {
                                                  "name": "string"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                ],
                                "negation": "boolean",
                                "right": [
                                  {
                                    "UndefinedLiteral": {}
                                  }
                                ]
                              }
                            },
                            "thenStep": {
                              "ThrowStep": {
                                "name": "string"
                              }
                            },
                            "elseStep": "null"
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "SetStep": {
                            "ref": {
                              "PropertyReference": {
                                "PropertyReference": {
                                  "base": {
                                    "Variable": {
                                      "Variable": {
                                        "name": "string"
                                      }
                                    }
                                  },
                                  "prop": {
                                    "FieldProperty": {
                                      "FieldProperty": {
                                        "name": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "expr": {
                              "ReferenceExpression": {
                                "ref": {
                                  "Variable": {
                                    "Variable": {
                                      "name": "string"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "SetStep": {
                            "ref": {
                              "PropertyReference": {
                                "PropertyReference": {
                                  "base": {
                                    "Variable": {
                                      "Variable": {
                                        "name": "string"
                                      }
                                    }
                                  },
                                  "prop": {
                                    "FieldProperty": {
                                      "FieldProperty": {
                                        "name": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "expr": {
                              "ReferenceExpression": {
                                "ref": {
                                  "Variable": {
                                    "Variable": {
                                      "name": "string"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "ReturnStep": {
                            "expr": {
                              "UndefinedLiteral": {}
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "NewPromiseCapability"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "DecimalMathValueLiteral": {
                  "n": "number"
                }
              },
              {
                "StringLiteral": {
                  "s": "string"
                }
              },
              {
                "ListExpression": {
                  "entries": []
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "NewPromiseCapability",
      "MakeArgSetter",
      "MakeArgGetter",
      "INTRINSICS.Promise.prototype.finally",
      "INTRINSICS.Object.fromEntries",
      "ExecuteAsyncModule",
      "ContinueDynamicImport",
      "Await",
      "AsyncGeneratorAwaitReturn",
      "AsyncFromSyncIteratorContinuation"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeAbstractOperationExpression": {
                "name": "string",
                "args": [
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "ListExpression": {
                      "entries": [
                        {
                          "ReferenceExpression": {
                            "ref": {
                              "Variable": {
                                "Variable": {
                                  "name": "string"
                                }
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "NewPromiseCapability",
      "INTRINSICS.Array.of"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "FalseLiteral": {}
              },
              {
                "NullLiteral": {}
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "NewGlobalEnvironment"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ConversionExpression": {
            "op": {
              "ToNumber": {}
            },
            "expr": {
              "ReturnIfAbruptExpression": {
                "expr": {
                  "InvokeAbstractOperationExpression": {
                    "name": "string",
                    "args": [
                      {
                        "ReferenceExpression": {
                          "ref": {
                            "Variable": {
                              "Variable": {
                                "name": "string"
                              }
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "check": "boolean"
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "MakeTime",
      "MakeDay",
      "INTRINSICS.Atomics.store",
      "INTRINSICS.Atomics.compareExchange",
      "AtomicReadModifyWrite"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReferenceExpression": {
            "ref": {
              "PropertyReference": {
                "PropertyReference": {
                  "base": {
                    "RunningExecutionContext": {
                      "RunningExecutionContext": {}
                    }
                  },
                  "prop": {
                    "ComponentProperty": {
                      "ComponentProperty": {
                        "name": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "MakePrivateReference",
      "GetThisEnvironment",
      "ForInOfHeadEvaluation",
      "ForInOfBodyEvaluation",
      "CreatePerIterationEnvironment",
      "BlockDeclarationInstantiation",
      "AsyncGeneratorCompleteStep"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "NumberOfExpression": {
            "expr": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "MakeMatchIndicesIndexPairArray",
      "IsWordChar",
      "InitializeTypedArrayFromList",
      "INTRINSICS._TypedArray_",
      "INTRINSICS.TypedArray.of",
      "INTRINSICS.TypedArray.from",
      "INTRINSICS.String.raw",
      "INTRINSICS.Set.prototype.forEach",
      "INTRINSICS.Map.prototype.forEach",
      "INTRINSICS.Function.prototype.bind",
      "INTRINSICS.Date",
      "INTRINSICS.Atomics.notify",
      "INTRINSICS.Array.prototype.unshift",
      "INTRINSICS.Array.prototype.toSpliced",
      "INTRINSICS.Array.prototype.splice",
      "INTRINSICS.Array.prototype.sort",
      "INTRINSICS.Array.prototype.push",
      "INTRINSICS.Array.of",
      "INTRINSICS.Array",
      "GetTemplateObject",
      "GetSubstitution",
      "CreateUnmappedArgumentsObject",
      "CreateSetIterator",
      "CreateMappedArgumentsObject",
      "CreateMapIterator",
      "CreateDynamicFunction",
      "CharacterSetMatcher",
      "BackreferenceMatcher"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReferenceExpression": {
            "ref": {
              "PropertyReference": {
                "PropertyReference": {
                  "base": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  },
                  "prop": {
                    "IndexProperty": {
                      "IndexProperty": {
                        "index": {
                          "ReferenceExpression": {
                            "ref": {
                              "Variable": {
                                "Variable": {
                                  "name": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "MakeMatchIndicesIndexPairArray",
      "INTRINSICS.TypedArray.of",
      "INTRINSICS.String.raw",
      "INTRINSICS.Set.prototype.forEach",
      "INTRINSICS.Map.prototype.forEach",
      "INTRINSICS.Array.of",
      "INTRINSICS.Array",
      "GetTemplateObject",
      "CreateUnmappedArgumentsObject",
      "CreateSetIterator",
      "CreateMappedArgumentsObject",
      "CreateMapIterator",
      "CreateDynamicFunction",
      "ComposeWriteEventBytes",
      "ByteListEqual",
      "ByteListBitwiseOp",
      "BackreferenceMatcher"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "BinaryExpression": {
            "left": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            },
            "op": {
              "Add": {}
            },
            "right": {
              "ConversionExpression": {
                "op": {
                  "ToNumber": {}
                },
                "expr": {
                  "MathFuncExpression": {
                    "op": {
                      "Floor": {}
                    },
                    "args": [
                      {
                        "BinaryExpression": {
                          "left": {
                            "ConversionExpression": {
                              "op": {
                                "ToMath": {}
                              },
                              "expr": {
                                "ReferenceExpression": {
                                  "ref": {
                                    "Variable": {
                                      "Variable": {
                                        "name": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "op": {
                            "Div": {}
                          },
                          "right": {
                            "DecimalMathValueLiteral": {
                              "n": "number"
                            }
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "MakeDay"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ConversionExpression": {
            "op": {
              "ToNumber": {}
            },
            "expr": {
              "BinaryExpression": {
                "left": {
                  "ConversionExpression": {
                    "op": {
                      "ToMath": {}
                    },
                    "expr": {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "op": {
                  "Mod": {}
                },
                "right": {
                  "DecimalMathValueLiteral": {
                    "n": "number"
                  }
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "MakeDay"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "params": [
            {
              "Variable": {
                "name": "string"
              }
            }
          ],
          "captured": [
            {
              "Variable": {
                "name": "string"
              }
            },
            {
              "Variable": {
                "name": "string"
              }
            }
          ],
          "body": {
            "BlockStep": {
              "block": {
                "StepBlock": {
                  "steps": [
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "ReturnStep": {
                            "expr": {
                              "ReturnIfAbruptExpression": {
                                "expr": {
                                  "InvokeMethodExpression": {
                                    "ref": {
                                      "PropertyReference": {
                                        "base": {
                                          "Variable": {
                                            "Variable": {
                                              "name": "string"
                                            }
                                          }
                                        },
                                        "prop": {
                                          "ComponentProperty": {
                                            "ComponentProperty": {
                                              "name": "string"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "args": [
                                      {
                                        "ReferenceExpression": {
                                          "ref": {
                                            "Variable": {
                                              "Variable": {
                                                "name": "string"
                                              }
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "ReferenceExpression": {
                                          "ref": {
                                            "Variable": {
                                              "Variable": {
                                                "name": "string"
                                              }
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "FalseLiteral": {}
                                      }
                                    ]
                                  }
                                },
                                "check": "boolean"
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "MakeArgSetter"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "params": [],
          "captured": [
            {
              "Variable": {
                "name": "string"
              }
            },
            {
              "Variable": {
                "name": "string"
              }
            }
          ],
          "body": {
            "BlockStep": {
              "block": {
                "StepBlock": {
                  "steps": [
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "ReturnStep": {
                            "expr": {
                              "InvokeMethodExpression": {
                                "ref": {
                                  "PropertyReference": {
                                    "base": {
                                      "Variable": {
                                        "Variable": {
                                          "name": "string"
                                        }
                                      }
                                    },
                                    "prop": {
                                      "ComponentProperty": {
                                        "ComponentProperty": {
                                          "name": "string"
                                        }
                                      }
                                    }
                                  }
                                },
                                "args": [
                                  {
                                    "ReferenceExpression": {
                                      "ref": {
                                        "Variable": {
                                          "Variable": {
                                            "name": "string"
                                          }
                                        }
                                      }
                                    }
                                  },
                                  {
                                    "FalseLiteral": {}
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "MakeArgGetter"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "InvokeAbstractOperationExpression": {
                  "name": "string",
                  "args": [
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "IteratorStepValue",
      "INTRINSICS.Promise.race",
      "INTRINSICS.Promise.any",
      "INTRINSICS.Promise.allSettled",
      "INTRINSICS.Promise.all",
      "INTRINSICS.Date.prototype.setSeconds",
      "INTRINSICS.Date.prototype.setMonth",
      "INTRINSICS.Date.prototype.setMinutes",
      "INTRINSICS.Date.prototype.setHours",
      "INTRINSICS.Date.prototype.setFullYear",
      "INTRINSICS.Date.prototype.setDate",
      "INTRINSICS.Date",
      "INTRINSICS.AsyncFromSyncIteratorPrototype.next",
      "HostEnqueueFinalizationRegistryCleanupJob",
      "AsyncFromSyncIteratorContinuation"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "InvokeAbstractOperationExpression": {
                  "name": "string",
                  "args": [
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    },
                    {
                      "StringLiteral": {
                        "s": "string"
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "IteratorStepValue",
      "IteratorClose",
      "INTRINSICS.yet:PromiseResolveFunction",
      "INTRINSICS.AsyncFromSyncIteratorPrototype.throw",
      "INTRINSICS.AsyncFromSyncIteratorPrototype.return",
      "AsyncIteratorClose",
      "AddEntriesFromIterable"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeAbstractOperationExpression": {
                "name": "string",
                "args": [
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "PropertyReference": {
                          "PropertyReference": {
                            "base": {
                              "Variable": {
                                "Variable": {
                                  "name": "string"
                                }
                              }
                            },
                            "prop": {
                              "FieldProperty": {
                                "FieldProperty": {
                                  "name": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "PropertyReference": {
                          "PropertyReference": {
                            "base": {
                              "Variable": {
                                "Variable": {
                                  "name": "string"
                                }
                              }
                            },
                            "prop": {
                              "FieldProperty": {
                                "FieldProperty": {
                                  "name": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "IteratorNext",
      "ForInOfBodyEvaluation"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeAbstractOperationExpression": {
                "name": "string",
                "args": [
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "PropertyReference": {
                          "PropertyReference": {
                            "base": {
                              "Variable": {
                                "Variable": {
                                  "name": "string"
                                }
                              }
                            },
                            "prop": {
                              "FieldProperty": {
                                "FieldProperty": {
                                  "name": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "PropertyReference": {
                          "PropertyReference": {
                            "base": {
                              "Variable": {
                                "Variable": {
                                  "name": "string"
                                }
                              }
                            },
                            "prop": {
                              "FieldProperty": {
                                "FieldProperty": {
                                  "name": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  {
                    "ListExpression": {
                      "entries": [
                        {
                          "ReferenceExpression": {
                            "ref": {
                              "Variable": {
                                "Variable": {
                                  "name": "string"
                                }
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "IteratorNext"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "BinaryExpression": {
            "left": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            },
            "op": {
              "Add": {}
            },
            "right": {
              "ReferenceExpression": {
                "ref": {
                  "PropertyReference": {
                    "PropertyReference": {
                      "base": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      },
                      "prop": {
                        "FieldProperty": {
                          "FieldProperty": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "IsViewOutOfBounds",
      "INTRINSICS.String.prototype[@@iterator]"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "BinaryExpression": {
            "left": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            },
            "op": {
              "Add": {}
            },
            "right": {
              "BinaryExpression": {
                "left": {
                  "ReferenceExpression": {
                    "ref": {
                      "PropertyReference": {
                        "PropertyReference": {
                          "base": {
                            "Variable": {
                              "Variable": {
                                "name": "string"
                              }
                            }
                          },
                          "prop": {
                            "FieldProperty": {
                              "FieldProperty": {
                                "name": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "op": {
                  "Mul": {}
                },
                "right": {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "IsTypedArrayOutOfBounds"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ConversionExpression": {
            "op": {
              "ToMath": {}
            },
            "expr": {
              "CodeUnitAtExpression": {
                "base": {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                },
                "index": {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "IsLessThan"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "BinaryExpression": {
            "left": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            },
            "op": {
              "Mul": {}
            },
            "right": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "InitializeTypedArrayFromTypedArray",
      "InitializeTypedArrayFromArrayBuffer",
      "INTRINSICS.TypedArray.prototype.copyWithin",
      "AllocateTypedArrayBuffer"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeAbstractOperationExpression": {
                "name": "string",
                "args": [
                  {
                    "IntrinsicExpression": {
                      "intr": {
                        "Intrinsic": {
                          "base": "string",
                          "props": []
                        }
                      }
                    }
                  },
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "InitializeTypedArrayFromTypedArray",
      "CloneArrayBuffer",
      "Await",
      "AllocateTypedArrayBuffer"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReferenceExpression": {
            "ref": {
              "ActiveFunctionObject": {
                "ActiveFunctionObject": {}
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.yet:PromiseResolveFunction",
      "INTRINSICS.yet:PromiseRejectFunction",
      "INTRINSICS.yet:Promise.anyRejectElementFunction",
      "INTRINSICS.yet:Promise.allSettledResolveElementFunction",
      "INTRINSICS.yet:Promise.allSettledRejectElementFunction",
      "INTRINSICS.yet:Promise.allResolveElementFunction",
      "INTRINSICS._NativeError_",
      "INTRINSICS.RegExp",
      "INTRINSICS.Proxy.revocable",
      "INTRINSICS.GeneratorFunction",
      "INTRINSICS.Function",
      "INTRINSICS.FinalizationRegistry",
      "INTRINSICS.Error",
      "INTRINSICS.AsyncGeneratorFunction",
      "INTRINSICS.AsyncFunction",
      "INTRINSICS.Array",
      "INTRINSICS.AggregateError"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "IntrinsicExpression": {
                  "intr": {
                    "Intrinsic": {
                      "base": "string",
                      "props": [
                        "string"
                      ]
                    }
                  }
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.yet:Promise.allSettledResolveElementFunction",
      "INTRINSICS.yet:Promise.allSettledRejectElementFunction",
      "INTRINSICS.Proxy.revocable",
      "INTRINSICS.Promise.withResolvers",
      "INTRINSICS.Object.getOwnPropertyDescriptors",
      "INTRINSICS.Object.fromEntries",
      "INTRINSICS.JSON.stringify",
      "INTRINSICS.JSON.parse",
      "FromPropertyDescriptor",
      "DoWait",
      "CreateIterResultObject"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeAbstractOperationExpression": {
                "name": "string",
                "args": [
                  {
                    "ThisLiteral": {}
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.set Object.prototype.__proto__",
      "INTRINSICS.get Object.prototype.__proto__",
      "INTRINSICS.Symbol.prototype.toString",
      "INTRINSICS.String.prototype[@@iterator]",
      "INTRINSICS.String.prototype.toWellFormed",
      "INTRINSICS.String.prototype.toLowerCase",
      "INTRINSICS.String.prototype.substring",
      "INTRINSICS.String.prototype.startsWith",
      "INTRINSICS.String.prototype.split",
      "INTRINSICS.String.prototype.slice",
      "INTRINSICS.String.prototype.search",
      "INTRINSICS.String.prototype.replaceAll",
      "INTRINSICS.String.prototype.replace",
      "INTRINSICS.String.prototype.repeat",
      "INTRINSICS.String.prototype.padStart",
      "INTRINSICS.String.prototype.padEnd",
      "INTRINSICS.String.prototype.normalize",
      "INTRINSICS.String.prototype.matchAll",
      "INTRINSICS.String.prototype.match",
      "INTRINSICS.String.prototype.localeCompare",
      "INTRINSICS.String.prototype.lastIndexOf",
      "INTRINSICS.String.prototype.isWellFormed",
      "INTRINSICS.String.prototype.indexOf",
      "INTRINSICS.String.prototype.includes",
      "INTRINSICS.String.prototype.endsWith",
      "INTRINSICS.String.prototype.concat",
      "INTRINSICS.String.prototype.codePointAt",
      "INTRINSICS.String.prototype.charCodeAt",
      "INTRINSICS.String.prototype.charAt",
      "INTRINSICS.String.prototype.at",
      "INTRINSICS.Object.prototype.toString",
      "INTRINSICS.Object.prototype.propertyIsEnumerable",
      "INTRINSICS.Object.prototype.isPrototypeOf",
      "INTRINSICS.Object.prototype.hasOwnProperty",
      "INTRINSICS.Object.prototype.__lookupSetter__",
      "INTRINSICS.Object.prototype.__lookupGetter__",
      "INTRINSICS.Object.prototype.__defineSetter__",
      "INTRINSICS.Object.prototype.__defineGetter__",
      "INTRINSICS.Number.prototype.toString",
      "INTRINSICS.Number.prototype.toPrecision",
      "INTRINSICS.Number.prototype.toFixed",
      "INTRINSICS.Number.prototype.toExponential",
      "INTRINSICS.Date.prototype.toJSON",
      "INTRINSICS.Boolean.prototype.toString",
      "INTRINSICS.BigInt.prototype.toString",
      "INTRINSICS.Array.prototype.with",
      "INTRINSICS.Array.prototype.values",
      "INTRINSICS.Array.prototype.unshift",
      "INTRINSICS.Array.prototype.toString",
      "INTRINSICS.Array.prototype.toSpliced",
      "INTRINSICS.Array.prototype.toSorted",
      "INTRINSICS.Array.prototype.toReversed",
      "INTRINSICS.Array.prototype.toLocaleString",
      "INTRINSICS.Array.prototype.splice",
      "INTRINSICS.Array.prototype.sort",
      "INTRINSICS.Array.prototype.some",
      "INTRINSICS.Array.prototype.slice",
      "INTRINSICS.Array.prototype.shift",
      "INTRINSICS.Array.prototype.reverse",
      "INTRINSICS.Array.prototype.reduceRight",
      "INTRINSICS.Array.prototype.reduce",
      "INTRINSICS.Array.prototype.push",
      "INTRINSICS.Array.prototype.pop",
      "INTRINSICS.Array.prototype.map",
      "INTRINSICS.Array.prototype.lastIndexOf",
      "INTRINSICS.Array.prototype.keys",
      "INTRINSICS.Array.prototype.join",
      "INTRINSICS.Array.prototype.indexOf",
      "INTRINSICS.Array.prototype.includes",
      "INTRINSICS.Array.prototype.forEach",
      "INTRINSICS.Array.prototype.flatMap",
      "INTRINSICS.Array.prototype.flat",
      "INTRINSICS.Array.prototype.findLastIndex",
      "INTRINSICS.Array.prototype.findLast",
      "INTRINSICS.Array.prototype.findIndex",
      "INTRINSICS.Array.prototype.find",
      "INTRINSICS.Array.prototype.filter",
      "INTRINSICS.Array.prototype.fill",
      "INTRINSICS.Array.prototype.every",
      "INTRINSICS.Array.prototype.entries",
      "INTRINSICS.Array.prototype.copyWithin",
      "INTRINSICS.Array.prototype.concat",
      "INTRINSICS.Array.prototype.at"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "SubstringExpression": {
            "expr": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            },
            "from": {
              "DecimalMathValueLiteral": {
                "n": "number"
              }
            },
            "to": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.parseInt",
      "INTRINSICS.String.prototype.split",
      "INTRINSICS.String.prototype.replace",
      "GetSubstitution"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ThisLiteral": {}
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.get TypedArray.prototype[@@toStringTag]",
      "INTRINSICS.get TypedArray.prototype.length",
      "INTRINSICS.get TypedArray.prototype.byteOffset",
      "INTRINSICS.get TypedArray.prototype.byteLength",
      "INTRINSICS.get TypedArray.prototype.buffer",
      "INTRINSICS.get Symbol.prototype.description",
      "INTRINSICS.get SharedArrayBuffer.prototype.maxByteLength",
      "INTRINSICS.get SharedArrayBuffer.prototype.growable",
      "INTRINSICS.get SharedArrayBuffer.prototype.byteLength",
      "INTRINSICS.get Set.prototype.size",
      "INTRINSICS.get RegExp.prototype.unicodeSets",
      "INTRINSICS.get RegExp.prototype.unicode",
      "INTRINSICS.get RegExp.prototype.sticky",
      "INTRINSICS.get RegExp.prototype.source",
      "INTRINSICS.get RegExp.prototype.multiline",
      "INTRINSICS.get RegExp.prototype.ignoreCase",
      "INTRINSICS.get RegExp.prototype.hasIndices",
      "INTRINSICS.get RegExp.prototype.global",
      "INTRINSICS.get RegExp.prototype.flags",
      "INTRINSICS.get RegExp.prototype.dotAll",
      "INTRINSICS.get Map.prototype.size",
      "INTRINSICS.get DataView.prototype.byteOffset",
      "INTRINSICS.get DataView.prototype.byteLength",
      "INTRINSICS.get DataView.prototype.buffer",
      "INTRINSICS.get ArrayBuffer.prototype.resizable",
      "INTRINSICS.get ArrayBuffer.prototype.maxByteLength",
      "INTRINSICS.get ArrayBuffer.prototype.detached",
      "INTRINSICS.get ArrayBuffer.prototype.byteLength",
      "INTRINSICS.WeakSet.prototype.has",
      "INTRINSICS.WeakSet.prototype.delete",
      "INTRINSICS.WeakSet.prototype.add",
      "INTRINSICS.WeakRef.prototype.deref",
      "INTRINSICS.WeakMap.prototype.set",
      "INTRINSICS.WeakMap.prototype.has",
      "INTRINSICS.WeakMap.prototype.get",
      "INTRINSICS.WeakMap.prototype.delete",
      "INTRINSICS.TypedArray.prototype.with",
      "INTRINSICS.TypedArray.prototype.values",
      "INTRINSICS.TypedArray.prototype.toSorted",
      "INTRINSICS.TypedArray.prototype.toReversed",
      "INTRINSICS.TypedArray.prototype.subarray",
      "INTRINSICS.TypedArray.prototype.sort",
      "INTRINSICS.TypedArray.prototype.some",
      "INTRINSICS.TypedArray.prototype.slice",
      "INTRINSICS.TypedArray.prototype.set",
      "INTRINSICS.TypedArray.prototype.reverse",
      "INTRINSICS.TypedArray.prototype.reduceRight",
      "INTRINSICS.TypedArray.prototype.reduce",
      "INTRINSICS.TypedArray.prototype.map",
      "INTRINSICS.TypedArray.prototype.lastIndexOf",
      "INTRINSICS.TypedArray.prototype.keys",
      "INTRINSICS.TypedArray.prototype.join",
      "INTRINSICS.TypedArray.prototype.indexOf",
      "INTRINSICS.TypedArray.prototype.includes",
      "INTRINSICS.TypedArray.prototype.forEach",
      "INTRINSICS.TypedArray.prototype.findLastIndex",
      "INTRINSICS.TypedArray.prototype.findLast",
      "INTRINSICS.TypedArray.prototype.findIndex",
      "INTRINSICS.TypedArray.prototype.find",
      "INTRINSICS.TypedArray.prototype.filter",
      "INTRINSICS.TypedArray.prototype.fill",
      "INTRINSICS.TypedArray.prototype.every",
      "INTRINSICS.TypedArray.prototype.entries",
      "INTRINSICS.TypedArray.prototype.copyWithin",
      "INTRINSICS.TypedArray.prototype.at",
      "INTRINSICS.TypedArray.of",
      "INTRINSICS.TypedArray.from",
      "INTRINSICS.String.prototype.trimStart",
      "INTRINSICS.String.prototype.trimEnd",
      "INTRINSICS.String.prototype.trim",
      "INTRINSICS.SharedArrayBuffer.prototype.slice",
      "INTRINSICS.SharedArrayBuffer.prototype.grow",
      "INTRINSICS.Set.prototype.values",
      "INTRINSICS.Set.prototype.has",
      "INTRINSICS.Set.prototype.forEach",
      "INTRINSICS.Set.prototype.entries",
      "INTRINSICS.Set.prototype.delete",
      "INTRINSICS.Set.prototype.clear",
      "INTRINSICS.Set.prototype.add",
      "INTRINSICS.RegExp.prototype[@@split]",
      "INTRINSICS.RegExp.prototype[@@search]",
      "INTRINSICS.RegExp.prototype[@@replace]",
      "INTRINSICS.RegExp.prototype[@@match]",
      "INTRINSICS.RegExp.prototype[@@matchAll]",
      "INTRINSICS.RegExp.prototype.toString",
      "INTRINSICS.RegExp.prototype.test",
      "INTRINSICS.RegExp.prototype.exec",
      "INTRINSICS.Promise.withResolvers",
      "INTRINSICS.Promise.resolve",
      "INTRINSICS.Promise.reject",
      "INTRINSICS.Promise.race",
      "INTRINSICS.Promise.prototype.then",
      "INTRINSICS.Promise.prototype.finally",
      "INTRINSICS.Promise.prototype.catch",
      "INTRINSICS.Promise.any",
      "INTRINSICS.Promise.allSettled",
      "INTRINSICS.Promise.all",
      "INTRINSICS.Object.prototype.toLocaleString",
      "INTRINSICS.Map.prototype.values",
      "INTRINSICS.Map.prototype.set",
      "INTRINSICS.Map.prototype.keys",
      "INTRINSICS.Map.prototype.has",
      "INTRINSICS.Map.prototype.get",
      "INTRINSICS.Map.prototype.forEach",
      "INTRINSICS.Map.prototype.entries",
      "INTRINSICS.Map.prototype.delete",
      "INTRINSICS.Map.prototype.clear",
      "INTRINSICS.GeneratorFunction.prototype.prototype.throw",
      "INTRINSICS.GeneratorFunction.prototype.prototype.return",
      "INTRINSICS.Function.prototype[@@hasInstance]",
      "INTRINSICS.Function.prototype.toString",
      "INTRINSICS.Function.prototype.call",
      "INTRINSICS.Function.prototype.bind",
      "INTRINSICS.Function.prototype.apply",
      "INTRINSICS.ForInIteratorPrototype.next",
      "INTRINSICS.FinalizationRegistry.prototype.unregister",
      "INTRINSICS.FinalizationRegistry.prototype.register",
      "INTRINSICS.Error.prototype.toString",
      "INTRINSICS.Date.prototype[@@toPrimitive]",
      "INTRINSICS.Date.prototype.valueOf",
      "INTRINSICS.Date.prototype.toUTCString",
      "INTRINSICS.Date.prototype.toTimeString",
      "INTRINSICS.Date.prototype.toString",
      "INTRINSICS.Date.prototype.toISOString",
      "INTRINSICS.Date.prototype.toDateString",
      "INTRINSICS.Date.prototype.setUTCSeconds",
      "INTRINSICS.Date.prototype.setUTCMonth",
      "INTRINSICS.Date.prototype.setUTCMinutes",
      "INTRINSICS.Date.prototype.setUTCMilliseconds",
      "INTRINSICS.Date.prototype.setUTCHours",
      "INTRINSICS.Date.prototype.setUTCFullYear",
      "INTRINSICS.Date.prototype.setUTCDate",
      "INTRINSICS.Date.prototype.setTime",
      "INTRINSICS.Date.prototype.setSeconds",
      "INTRINSICS.Date.prototype.setMonth",
      "INTRINSICS.Date.prototype.setMinutes",
      "INTRINSICS.Date.prototype.setMilliseconds",
      "INTRINSICS.Date.prototype.setHours",
      "INTRINSICS.Date.prototype.setFullYear",
      "INTRINSICS.Date.prototype.setDate",
      "INTRINSICS.Date.prototype.getUTCSeconds",
      "INTRINSICS.Date.prototype.getUTCMonth",
      "INTRINSICS.Date.prototype.getUTCMinutes",
      "INTRINSICS.Date.prototype.getUTCMilliseconds",
      "INTRINSICS.Date.prototype.getUTCHours",
      "INTRINSICS.Date.prototype.getUTCFullYear",
      "INTRINSICS.Date.prototype.getUTCDay",
      "INTRINSICS.Date.prototype.getUTCDate",
      "INTRINSICS.Date.prototype.getTimezoneOffset",
      "INTRINSICS.Date.prototype.getTime",
      "INTRINSICS.Date.prototype.getSeconds",
      "INTRINSICS.Date.prototype.getMonth",
      "INTRINSICS.Date.prototype.getMinutes",
      "INTRINSICS.Date.prototype.getMilliseconds",
      "INTRINSICS.Date.prototype.getHours",
      "INTRINSICS.Date.prototype.getFullYear",
      "INTRINSICS.Date.prototype.getDay",
      "INTRINSICS.Date.prototype.getDate",
      "INTRINSICS.DataView.prototype.setUint8",
      "INTRINSICS.DataView.prototype.setUint32",
      "INTRINSICS.DataView.prototype.setUint16",
      "INTRINSICS.DataView.prototype.setInt8",
      "INTRINSICS.DataView.prototype.setInt32",
      "INTRINSICS.DataView.prototype.setInt16",
      "INTRINSICS.DataView.prototype.setFloat64",
      "INTRINSICS.DataView.prototype.setFloat32",
      "INTRINSICS.DataView.prototype.setBigUint64",
      "INTRINSICS.DataView.prototype.setBigInt64",
      "INTRINSICS.DataView.prototype.getUint8",
      "INTRINSICS.DataView.prototype.getUint32",
      "INTRINSICS.DataView.prototype.getUint16",
      "INTRINSICS.DataView.prototype.getInt8",
      "INTRINSICS.DataView.prototype.getInt32",
      "INTRINSICS.DataView.prototype.getInt16",
      "INTRINSICS.DataView.prototype.getFloat64",
      "INTRINSICS.DataView.prototype.getFloat32",
      "INTRINSICS.DataView.prototype.getBigUint64",
      "INTRINSICS.DataView.prototype.getBigInt64",
      "INTRINSICS.AsyncGeneratorFunction.prototype.prototype.throw",
      "INTRINSICS.AsyncGeneratorFunction.prototype.prototype.return",
      "INTRINSICS.AsyncGeneratorFunction.prototype.prototype.next",
      "INTRINSICS.AsyncFromSyncIteratorPrototype.throw",
      "INTRINSICS.AsyncFromSyncIteratorPrototype.return",
      "INTRINSICS.AsyncFromSyncIteratorPrototype.next",
      "INTRINSICS.ArrayBuffer.prototype.transferToFixedLength",
      "INTRINSICS.ArrayBuffer.prototype.transfer",
      "INTRINSICS.ArrayBuffer.prototype.slice",
      "INTRINSICS.ArrayBuffer.prototype.resize",
      "INTRINSICS.Array.of",
      "INTRINSICS.Array.from"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeAbstractOperationExpression": {
                "name": "string",
                "args": [
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "NewTargetLiteral": {}
                  },
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS._TypedArray_"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeAbstractOperationExpression": {
                "name": "string",
                "args": [
                  {
                    "ReturnIfAbruptExpression": {
                      "expr": {
                        "InvokeAbstractOperationExpression": {
                          "name": "string",
                          "args": [
                            {
                              "ReferenceExpression": {
                                "ref": {
                                  "Variable": {
                                    "Variable": {
                                      "name": "string"
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "ReferenceExpression": {
                                "ref": {
                                  "Variable": {
                                    "Variable": {
                                      "name": "string"
                                    }
                                  }
                                }
                              }
                            }
                          ]
                        }
                      },
                      "check": "boolean"
                    }
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS._TypedArray_",
      "INTRINSICS.TypedArray.from"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "NewTargetLiteral": {}
        }
      }
    },
    "appearsIn": [
      "INTRINSICS._NativeError_",
      "INTRINSICS.RegExp",
      "INTRINSICS.Error",
      "INTRINSICS.Array",
      "INTRINSICS.AggregateError"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeAbstractOperationExpression": {
                "name": "string",
                "args": [
                  {
                    "NewTargetLiteral": {}
                  },
                  {
                    "StringLiteral": {
                      "s": "string"
                    }
                  },
                  {
                    "ListExpression": {
                      "entries": [
                        {
                          "FieldLiteral": {
                            "name": "string"
                          }
                        }
                      ]
                    }
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.WeakSet",
      "INTRINSICS.WeakRef",
      "INTRINSICS.WeakMap",
      "INTRINSICS.Set",
      "INTRINSICS.Number",
      "INTRINSICS.Map",
      "INTRINSICS.Date",
      "INTRINSICS.Boolean"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "InvokeAbstractOperationExpression": {
                  "name": "string",
                  "args": [
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    },
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    },
                    {
                      "ListExpression": {
                        "entries": [
                          {
                            "ReferenceExpression": {
                              "ref": {
                                "Variable": {
                                  "Variable": {
                                    "name": "string"
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.WeakSet",
      "INTRINSICS.Set",
      "INTRINSICS.AsyncFromSyncIteratorPrototype.throw",
      "INTRINSICS.AsyncFromSyncIteratorPrototype.return"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeAbstractOperationExpression": {
                "name": "string",
                "args": [
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "ListExpression": {
                      "entries": [
                        {
                          "ConversionExpression": {
                            "op": {
                              "ToNumber": {}
                            },
                            "expr": {
                              "ReferenceExpression": {
                                "ref": {
                                  "Variable": {
                                    "Variable": {
                                      "name": "string"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.TypedArray.prototype.with",
      "INTRINSICS.TypedArray.prototype.toSorted",
      "INTRINSICS.TypedArray.prototype.toReversed",
      "INTRINSICS.TypedArray.prototype.slice",
      "INTRINSICS.TypedArray.prototype.map",
      "INTRINSICS.TypedArray.prototype.filter",
      "INTRINSICS.TypedArray.of",
      "INTRINSICS.TypedArray.from",
      "INTRINSICS.SharedArrayBuffer.prototype.slice",
      "INTRINSICS.ArrayBuffer.prototype.slice",
      "INTRINSICS.Array.from"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "params": [
            {
              "Variable": {
                "name": "string"
              }
            },
            {
              "Variable": {
                "name": "string"
              }
            }
          ],
          "captured": [
            {
              "Variable": {
                "name": "string"
              }
            }
          ],
          "body": {
            "BlockStep": {
              "block": {
                "StepBlock": {
                  "steps": [
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "ReturnStep": {
                            "expr": {
                              "ReturnIfAbruptExpression": {
                                "expr": {
                                  "InvokeAbstractOperationExpression": {
                                    "name": "string",
                                    "args": [
                                      {
                                        "ReferenceExpression": {
                                          "ref": {
                                            "Variable": {
                                              "Variable": {
                                                "name": "string"
                                              }
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "ReferenceExpression": {
                                          "ref": {
                                            "Variable": {
                                              "Variable": {
                                                "name": "string"
                                              }
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "ReferenceExpression": {
                                          "ref": {
                                            "Variable": {
                                              "Variable": {
                                                "name": "string"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                },
                                "check": "boolean"
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.TypedArray.prototype.toSorted",
      "INTRINSICS.TypedArray.prototype.sort",
      "INTRINSICS.Array.prototype.toSorted",
      "INTRINSICS.Array.prototype.sort"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeAbstractOperationExpression": {
                "name": "string",
                "args": [
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "EnumLiteral": {
                      "name": "string"
                    }
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.TypedArray.prototype.toSorted",
      "INTRINSICS.TypedArray.prototype.sort",
      "INTRINSICS.Array.prototype.toSorted",
      "INTRINSICS.Array.prototype.sort"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeAbstractOperationExpression": {
                "name": "string",
                "args": [
                  {
                    "ConversionExpression": {
                      "op": {
                        "ToNumber": {}
                      },
                      "expr": {
                        "BinaryExpression": {
                          "left": {
                            "BinaryExpression": {
                              "left": {
                                "ReferenceExpression": {
                                  "ref": {
                                    "Variable": {
                                      "Variable": {
                                        "name": "string"
                                      }
                                    }
                                  }
                                }
                              },
                              "op": {
                                "Sub": {}
                              },
                              "right": {
                                "ReferenceExpression": {
                                  "ref": {
                                    "Variable": {
                                      "Variable": {
                                        "name": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "op": {
                            "Sub": {}
                          },
                          "right": {
                            "DecimalMathValueLiteral": {
                              "n": "number"
                            }
                          }
                        }
                      }
                    }
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.TypedArray.prototype.toReversed",
      "INTRINSICS.Array.prototype.toReversed"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "MathFuncExpression": {
            "op": {
              "Max": {}
            },
            "args": [
              {
                "BinaryExpression": {
                  "left": {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  "op": {
                    "Add": {}
                  },
                  "right": {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "DecimalMathValueLiteral": {
                  "n": "number"
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.TypedArray.prototype.subarray",
      "INTRINSICS.TypedArray.prototype.slice",
      "INTRINSICS.TypedArray.prototype.fill",
      "INTRINSICS.TypedArray.prototype.copyWithin",
      "INTRINSICS.String.prototype.slice",
      "INTRINSICS.SharedArrayBuffer.prototype.slice",
      "INTRINSICS.ArrayBuffer.prototype.slice",
      "INTRINSICS.Array.prototype.toSpliced",
      "INTRINSICS.Array.prototype.splice",
      "INTRINSICS.Array.prototype.slice",
      "INTRINSICS.Array.prototype.fill",
      "INTRINSICS.Array.prototype.copyWithin"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ListExpression": {
            "entries": [
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "ConversionExpression": {
                  "op": {
                    "ToNumber": {}
                  },
                  "expr": {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.TypedArray.prototype.subarray"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "MathFuncExpression": {
            "op": {
              "Max": {}
            },
            "args": [
              {
                "BinaryExpression": {
                  "left": {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  "op": {
                    "Sub": {}
                  },
                  "right": {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "DecimalMathValueLiteral": {
                  "n": "number"
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.TypedArray.prototype.subarray",
      "INTRINSICS.TypedArray.prototype.slice",
      "INTRINSICS.SharedArrayBuffer.prototype.slice",
      "INTRINSICS.ArrayBuffer.prototype.slice",
      "INTRINSICS.Array.prototype.slice"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ListExpression": {
            "entries": [
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "ConversionExpression": {
                  "op": {
                    "ToNumber": {}
                  },
                  "expr": {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "ConversionExpression": {
                  "op": {
                    "ToNumber": {}
                  },
                  "expr": {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.TypedArray.prototype.subarray"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "ReturnIfAbruptExpression": {
                  "expr": {
                    "InvokeAbstractOperationExpression": {
                      "name": "string",
                      "args": [
                        {
                          "ReferenceExpression": {
                            "ref": {
                              "Variable": {
                                "Variable": {
                                  "name": "string"
                                }
                              }
                            }
                          }
                        },
                        {
                          "ReferenceExpression": {
                            "ref": {
                              "Variable": {
                                "Variable": {
                                  "name": "string"
                                }
                              }
                            }
                          }
                        },
                        {
                          "ListExpression": {
                            "entries": [
                              {
                                "ReferenceExpression": {
                                  "ref": {
                                    "Variable": {
                                      "Variable": {
                                        "name": "string"
                                      }
                                    }
                                  }
                                }
                              },
                              {
                                "ConversionExpression": {
                                  "op": {
                                    "ToNumber": {}
                                  },
                                  "expr": {
                                    "ReferenceExpression": {
                                      "ref": {
                                        "Variable": {
                                          "Variable": {
                                            "name": "string"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              {
                                "ReferenceExpression": {
                                  "ref": {
                                    "Variable": {
                                      "Variable": {
                                        "name": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  },
                  "check": "boolean"
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.TypedArray.prototype.some",
      "INTRINSICS.TypedArray.prototype.filter",
      "INTRINSICS.TypedArray.prototype.every",
      "INTRINSICS.Array.prototype.some",
      "INTRINSICS.Array.prototype.filter",
      "INTRINSICS.Array.prototype.every"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "MathFuncExpression": {
            "op": {
              "Floor": {}
            },
            "args": [
              {
                "BinaryExpression": {
                  "left": {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  "op": {
                    "Div": {}
                  },
                  "right": {
                    "DecimalMathValueLiteral": {
                      "n": "number"
                    }
                  }
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.TypedArray.prototype.reverse",
      "INTRINSICS.Array.prototype.reverse"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "BinaryExpression": {
            "left": {
              "BinaryExpression": {
                "left": {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                },
                "op": {
                  "Sub": {}
                },
                "right": {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "op": {
              "Sub": {}
            },
            "right": {
              "DecimalMathValueLiteral": {
                "n": "number"
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.TypedArray.prototype.reverse",
      "INTRINSICS.Array.prototype.reverse"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeAbstractOperationExpression": {
                "name": "string",
                "args": [
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "ListExpression": {
                      "entries": [
                        {
                          "ReferenceExpression": {
                            "ref": {
                              "Variable": {
                                "Variable": {
                                  "name": "string"
                                }
                              }
                            }
                          }
                        },
                        {
                          "ConversionExpression": {
                            "op": {
                              "ToNumber": {}
                            },
                            "expr": {
                              "ReferenceExpression": {
                                "ref": {
                                  "Variable": {
                                    "Variable": {
                                      "name": "string"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        {
                          "ReferenceExpression": {
                            "ref": {
                              "Variable": {
                                "Variable": {
                                  "name": "string"
                                }
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.TypedArray.prototype.map",
      "INTRINSICS.Array.prototype.map",
      "FindViaPredicate"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "MathFuncExpression": {
            "op": {
              "Min": {}
            },
            "args": [
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "BinaryExpression": {
                  "left": {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  "op": {
                    "Sub": {}
                  },
                  "right": {
                    "DecimalMathValueLiteral": {
                      "n": "number"
                    }
                  }
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.TypedArray.prototype.lastIndexOf",
      "INTRINSICS.Array.prototype.lastIndexOf"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeAbstractOperationExpression": {
                "name": "string",
                "args": [
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "ReturnIfAbruptExpression": {
                      "expr": {
                        "InvokeAbstractOperationExpression": {
                          "name": "string",
                          "args": [
                            {
                              "ConversionExpression": {
                                "op": {
                                  "ToNumber": {}
                                },
                                "expr": {
                                  "ReferenceExpression": {
                                    "ref": {
                                      "Variable": {
                                        "Variable": {
                                          "name": "string"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          ]
                        }
                      },
                      "check": "boolean"
                    }
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.TypedArray.prototype.lastIndexOf",
      "INTRINSICS.TypedArray.prototype.join",
      "INTRINSICS.TypedArray.prototype.indexOf",
      "INTRINSICS.TypedArray.prototype.includes",
      "INTRINSICS.String.raw",
      "INTRINSICS.RegExp.prototype[@@split]",
      "INTRINSICS.RegExp.prototype[@@replace]",
      "INTRINSICS.Array.prototype.toLocaleString",
      "INTRINSICS.Array.prototype.lastIndexOf",
      "INTRINSICS.Array.prototype.join",
      "INTRINSICS.Array.prototype.indexOf",
      "INTRINSICS.Array.prototype.includes"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeAbstractOperationExpression": {
                "name": "string",
                "args": [
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "EnumLiteral": {
                      "name": "string"
                    }
                  },
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.TypedArray.prototype.findLastIndex",
      "INTRINSICS.TypedArray.prototype.findLast",
      "INTRINSICS.TypedArray.prototype.findIndex",
      "INTRINSICS.TypedArray.prototype.find",
      "INTRINSICS.Array.prototype.findLastIndex",
      "INTRINSICS.Array.prototype.findLast",
      "INTRINSICS.Array.prototype.findIndex",
      "INTRINSICS.Array.prototype.find"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "MathFuncExpression": {
            "op": {
              "Min": {}
            },
            "args": [
              {
                "BinaryExpression": {
                  "left": {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  "op": {
                    "Sub": {}
                  },
                  "right": {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "BinaryExpression": {
                  "left": {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  "op": {
                    "Sub": {}
                  },
                  "right": {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.TypedArray.prototype.copyWithin",
      "INTRINSICS.Array.prototype.copyWithin"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeAbstractOperationExpression": {
                "name": "string",
                "args": [
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "ListExpression": {
                      "entries": [
                        {
                          "ReferenceExpression": {
                            "ref": {
                              "Variable": {
                                "Variable": {
                                  "name": "string"
                                }
                              }
                            }
                          }
                        },
                        {
                          "ConversionExpression": {
                            "op": {
                              "ToNumber": {}
                            },
                            "expr": {
                              "ReferenceExpression": {
                                "ref": {
                                  "Variable": {
                                    "Variable": {
                                      "name": "string"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.TypedArray.from",
      "INTRINSICS.Array.from"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeAbstractOperationExpression": {
                "name": "string",
                "args": [
                  {
                    "ReturnIfAbruptExpression": {
                      "expr": {
                        "InvokeAbstractOperationExpression": {
                          "name": "string",
                          "args": [
                            {
                              "ReferenceExpression": {
                                "ref": {
                                  "Variable": {
                                    "Variable": {
                                      "name": "string"
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "StringLiteral": {
                                "s": "string"
                              }
                            }
                          ]
                        }
                      },
                      "check": "boolean"
                    }
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.String.raw",
      "INTRINSICS.RegExp.prototype[@@split]",
      "INTRINSICS.RegExp.prototype[@@replace]",
      "INTRINSICS.RegExp.prototype[@@match]",
      "INTRINSICS.RegExp.prototype[@@matchAll]",
      "INTRINSICS.RegExp.prototype.toString",
      "INTRINSICS.Array.prototype.toLocaleString",
      "CreateRegExpStringIterator"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "params": [],
          "captured": [
            {
              "Variable": {
                "name": "string"
              }
            }
          ],
          "body": {
            "BlockStep": {
              "block": {
                "StepBlock": {
                  "steps": [
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "LetStep": {
                            "variable": {
                              "Variable": {
                                "name": "string"
                              }
                            },
                            "expr": {
                              "LengthExpression": {
                                "expr": {
                                  "ReferenceExpression": {
                                    "ref": {
                                      "Variable": {
                                        "Variable": {
                                          "name": "string"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "LetStep": {
                            "variable": {
                              "Variable": {
                                "name": "string"
                              }
                            },
                            "expr": {
                              "DecimalMathValueLiteral": {
                                "n": "number"
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "RepeatStep": {
                            "cond": {
                              "BinaryCondition": {
                                "left": {
                                  "ReferenceExpression": {
                                    "ref": {
                                      "Variable": {
                                        "Variable": {
                                          "name": "string"
                                        }
                                      }
                                    }
                                  }
                                },
                                "op": {
                                  "LessThan": {}
                                },
                                "right": {
                                  "ReferenceExpression": {
                                    "ref": {
                                      "Variable": {
                                        "Variable": {
                                          "name": "string"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "body": {
                              "BlockStep": {
                                "block": {
                                  "StepBlock": {
                                    "steps": [
                                      {
                                        "SubStep": {
                                          "directive": "null",
                                          "step": {
                                            "LetStep": {
                                              "variable": {
                                                "Variable": {
                                                  "name": "string"
                                                }
                                              },
                                              "expr": {
                                                "InvokeAbstractOperationExpression": {
                                                  "name": "string",
                                                  "args": [
                                                    {
                                                      "ReferenceExpression": {
                                                        "ref": {
                                                          "Variable": {
                                                            "Variable": {
                                                              "name": "string"
                                                            }
                                                          }
                                                        }
                                                      }
                                                    },
                                                    {
                                                      "ReferenceExpression": {
                                                        "ref": {
                                                          "Variable": {
                                                            "Variable": {
                                                              "name": "string"
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  ]
                                                }
                                              }
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "SubStep": {
                                          "directive": "null",
                                          "step": {
                                            "LetStep": {
                                              "variable": {
                                                "Variable": {
                                                  "name": "string"
                                                }
                                              },
                                              "expr": {
                                                "BinaryExpression": {
                                                  "left": {
                                                    "ReferenceExpression": {
                                                      "ref": {
                                                        "Variable": {
                                                          "Variable": {
                                                            "name": "string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "op": {
                                                    "Add": {}
                                                  },
                                                  "right": {
                                                    "ReferenceExpression": {
                                                      "ref": {
                                                        "PropertyReference": {
                                                          "PropertyReference": {
                                                            "base": {
                                                              "Variable": {
                                                                "Variable": {
                                                                  "name": "string"
                                                                }
                                                              }
                                                            },
                                                            "prop": {
                                                              "FieldProperty": {
                                                                "FieldProperty": {
                                                                  "name": "string"
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "SubStep": {
                                          "directive": "null",
                                          "step": {
                                            "LetStep": {
                                              "variable": {
                                                "Variable": {
                                                  "name": "string"
                                                }
                                              },
                                              "expr": {
                                                "SubstringExpression": {
                                                  "expr": {
                                                    "ReferenceExpression": {
                                                      "ref": {
                                                        "Variable": {
                                                          "Variable": {
                                                            "name": "string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "from": {
                                                    "ReferenceExpression": {
                                                      "ref": {
                                                        "Variable": {
                                                          "Variable": {
                                                            "name": "string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "to": {
                                                    "ReferenceExpression": {
                                                      "ref": {
                                                        "Variable": {
                                                          "Variable": {
                                                            "name": "string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "SubStep": {
                                          "directive": "null",
                                          "step": {
                                            "SetStep": {
                                              "ref": {
                                                "Variable": {
                                                  "Variable": {
                                                    "name": "string"
                                                  }
                                                }
                                              },
                                              "expr": {
                                                "ReferenceExpression": {
                                                  "ref": {
                                                    "Variable": {
                                                      "Variable": {
                                                        "name": "string"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "SubStep": {
                                          "directive": "null",
                                          "step": {
                                            "PerformStep": {
                                              "expr": {
                                                "ReturnIfAbruptExpression": {
                                                  "expr": {
                                                    "InvokeAbstractOperationExpression": {
                                                      "name": "string",
                                                      "args": [
                                                        {
                                                          "InvokeAbstractOperationExpression": {
                                                            "name": "string",
                                                            "args": [
                                                              {
                                                                "ReferenceExpression": {
                                                                  "ref": {
                                                                    "Variable": {
                                                                      "Variable": {
                                                                        "name": "string"
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              },
                                                              {
                                                                "FalseLiteral": {}
                                                              }
                                                            ]
                                                          }
                                                        }
                                                      ]
                                                    }
                                                  },
                                                  "check": "boolean"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "ReturnStep": {
                            "expr": {
                              "UndefinedLiteral": {}
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.String.prototype[@@iterator]"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "SubstringExpression": {
            "expr": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            },
            "from": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            },
            "to": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.String.prototype[@@iterator]",
      "INTRINSICS.String.prototype.startsWith",
      "INTRINSICS.String.prototype.split",
      "INTRINSICS.String.prototype.replaceAll",
      "INTRINSICS.String.prototype.endsWith",
      "INTRINSICS.RegExp.prototype[@@split]"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ClampExpression": {
            "target": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            },
            "lower": {
              "DecimalMathValueLiteral": {
                "n": "number"
              }
            },
            "upper": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.String.prototype.substring",
      "INTRINSICS.String.prototype.startsWith",
      "INTRINSICS.String.prototype.indexOf",
      "INTRINSICS.String.prototype.includes",
      "INTRINSICS.String.prototype.endsWith"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "MathFuncExpression": {
            "op": {
              "Max": {}
            },
            "args": [
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.String.prototype.substring"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "BinaryExpression": {
            "left": {
              "ExponentiationExpression": {
                "base": {
                  "DecimalMathValueLiteral": {
                    "n": "number"
                  }
                },
                "power": {
                  "DecimalMathValueLiteral": {
                    "n": "number"
                  }
                }
              }
            },
            "op": {
              "Sub": {}
            },
            "right": {
              "DecimalMathValueLiteral": {
                "n": "number"
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.String.prototype.split",
      "INTRINSICS.RegExp.prototype[@@split]"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "DecimalMathValueLiteral": {
                  "n": "number"
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.String.prototype.split",
      "INTRINSICS.String.prototype.replaceAll",
      "INTRINSICS.String.prototype.replace"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "SubstringExpression": {
            "expr": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            },
            "from": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            },
            "to": "null"
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.String.prototype.split"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeAbstractOperationExpression": {
                "name": "string",
                "args": [
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "UndefinedLiteral": {}
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.String.prototype.search",
      "INTRINSICS.String.prototype.match",
      "INTRINSICS.Promise.prototype.finally"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "MathFuncExpression": {
            "op": {
              "Max": {}
            },
            "args": [
              {
                "DecimalMathValueLiteral": {
                  "n": "number"
                }
              },
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.String.prototype.replaceAll"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeAbstractOperationExpression": {
                "name": "string",
                "args": [
                  {
                    "ReturnIfAbruptExpression": {
                      "expr": {
                        "InvokeAbstractOperationExpression": {
                          "name": "string",
                          "args": [
                            {
                              "ReferenceExpression": {
                                "ref": {
                                  "Variable": {
                                    "Variable": {
                                      "name": "string"
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "UndefinedLiteral": {}
                            },
                            {
                              "ListExpression": {
                                "entries": [
                                  {
                                    "ReferenceExpression": {
                                      "ref": {
                                        "Variable": {
                                          "Variable": {
                                            "name": "string"
                                          }
                                        }
                                      }
                                    }
                                  },
                                  {
                                    "ConversionExpression": {
                                      "op": {
                                        "ToNumber": {}
                                      },
                                      "expr": {
                                        "ReferenceExpression": {
                                          "ref": {
                                            "Variable": {
                                              "Variable": {
                                                "name": "string"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  {
                                    "ReferenceExpression": {
                                      "ref": {
                                        "Variable": {
                                          "Variable": {
                                            "name": "string"
                                          }
                                        }
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      "check": "boolean"
                    }
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.String.prototype.replaceAll",
      "INTRINSICS.String.prototype.replace"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeAbstractOperationExpression": {
                "name": "string",
                "args": [
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "UndefinedLiteral": {}
                  },
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.String.prototype.replaceAll",
      "INTRINSICS.String.prototype.replace"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "SubstringExpression": {
            "expr": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            },
            "from": {
              "BinaryExpression": {
                "left": {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                },
                "op": {
                  "Add": {}
                },
                "right": {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "to": "null"
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.String.prototype.replace"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ClampExpression": {
            "target": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            },
            "lower": {
              "DecimalMathValueLiteral": {
                "n": "number"
              }
            },
            "upper": {
              "BinaryExpression": {
                "left": {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                },
                "op": {
                  "Sub": {}
                },
                "right": {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.String.prototype.lastIndexOf",
      "INTRINSICS.Array.prototype.toSpliced",
      "INTRINSICS.Array.prototype.splice"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeAbstractOperationExpression": {
                "name": "string",
                "args": [
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "IntrinsicExpression": {
                      "intr": {
                        "Intrinsic": {
                          "base": "string",
                          "props": []
                        }
                      }
                    }
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.SharedArrayBuffer.prototype.slice",
      "INTRINSICS.RegExp.prototype[@@split]",
      "INTRINSICS.RegExp.prototype[@@matchAll]",
      "INTRINSICS.Promise.prototype.then",
      "INTRINSICS.Promise.prototype.finally",
      "INTRINSICS.ArrayBuffer.prototype.slice"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "DecimalMathValueLiteral": {
                  "n": "number"
                }
              },
              {
                "EnumLiteral": {
                  "name": "string"
                }
              },
              {
                "TrueLiteral": {}
              },
              {
                "EnumLiteral": {
                  "name": "string"
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.SharedArrayBuffer.prototype.grow"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "EnumLiteral": {
                  "name": "string"
                }
              },
              {
                "ConversionExpression": {
                  "op": {
                    "ToBigInt": {}
                  },
                  "expr": {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.SharedArrayBuffer.prototype.grow"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ConversionExpression": {
            "op": {
              "ToMath": {}
            },
            "expr": {
              "InvokeAbstractOperationExpression": {
                "name": "string",
                "args": [
                  {
                    "EnumLiteral": {
                      "name": "string"
                    }
                  },
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.SharedArrayBuffer.prototype.grow"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "DecimalMathValueLiteral": {
                  "n": "number"
                }
              },
              {
                "DecimalMathValueLiteral": {
                  "n": "number"
                }
              },
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.SharedArrayBuffer.prototype.grow"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "StringConcatExpression": {
            "exprs": [
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "StringLiteral": {
                  "s": "string"
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.RegExp.prototype[@@split]"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeAbstractOperationExpression": {
                "name": "string",
                "args": [
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "ListExpression": {
                      "entries": [
                        {
                          "ReferenceExpression": {
                            "ref": {
                              "Variable": {
                                "Variable": {
                                  "name": "string"
                                }
                              }
                            }
                          }
                        },
                        {
                          "ReferenceExpression": {
                            "ref": {
                              "Variable": {
                                "Variable": {
                                  "name": "string"
                                }
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.RegExp.prototype[@@split]",
      "INTRINSICS.RegExp.prototype[@@matchAll]"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeAbstractOperationExpression": {
                "name": "string",
                "args": [
                  {
                    "DecimalMathValueLiteral": {
                      "n": "number"
                    }
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.RegExp.prototype[@@split]",
      "INTRINSICS.RegExp.prototype[@@match]",
      "INTRINSICS.Array.from",
      "CreateArrayFromList",
      "AllocateSharedArrayBuffer"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "MathFuncExpression": {
            "op": {
              "Max": {}
            },
            "args": [
              {
                "BinaryExpression": {
                  "left": {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  "op": {
                    "Sub": {}
                  },
                  "right": {
                    "DecimalMathValueLiteral": {
                      "n": "number"
                    }
                  }
                }
              },
              {
                "DecimalMathValueLiteral": {
                  "n": "number"
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.RegExp.prototype[@@replace]"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ListConcatExpression": {
            "exprs": [
              {
                "ListExpression": {
                  "entries": [
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              },
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "ListExpression": {
                  "entries": [
                    {
                      "ConversionExpression": {
                        "op": {
                          "ToNumber": {}
                        },
                        "expr": {
                          "ReferenceExpression": {
                            "ref": {
                              "Variable": {
                                "Variable": {
                                  "name": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.RegExp.prototype[@@replace]"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeAbstractOperationExpression": {
                "name": "string",
                "args": [
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "UndefinedLiteral": {}
                  },
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.RegExp.prototype[@@replace]"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeAbstractOperationExpression": {
                "name": "string",
                "args": [
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.RegExp.prototype[@@replace]"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "StringConcatExpression": {
            "exprs": [
              {
                "StringLiteral": {
                  "s": "string"
                }
              },
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "StringLiteral": {
                  "s": "string"
                }
              },
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.RegExp.prototype.toString"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "params": [],
          "captured": [],
          "body": {
            "BlockStep": {
              "block": {
                "StepBlock": {
                  "steps": [
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "LetStep": {
                            "variable": {
                              "Variable": {
                                "name": "string"
                              }
                            },
                            "expr": {
                              "ReferenceExpression": {
                                "ref": {
                                  "ActiveFunctionObject": {
                                    "ActiveFunctionObject": {}
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "LetStep": {
                            "variable": {
                              "Variable": {
                                "name": "string"
                              }
                            },
                            "expr": {
                              "ReferenceExpression": {
                                "ref": {
                                  "PropertyReference": {
                                    "PropertyReference": {
                                      "base": {
                                        "Variable": {
                                          "Variable": {
                                            "name": "string"
                                          }
                                        }
                                      },
                                      "prop": {
                                        "FieldProperty": {
                                          "FieldProperty": {
                                            "name": "string"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "IfStep": {
                            "cond": {
                              "IsAreCondition": {
                                "left": [
                                  {
                                    "ReferenceExpression": {
                                      "ref": {
                                        "Variable": {
                                          "Variable": {
                                            "name": "string"
                                          }
                                        }
                                      }
                                    }
                                  }
                                ],
                                "negation": "boolean",
                                "right": [
                                  {
                                    "NullLiteral": {}
                                  }
                                ]
                              }
                            },
                            "thenStep": {
                              "ReturnStep": {
                                "expr": {
                                  "UndefinedLiteral": {}
                                }
                              }
                            },
                            "elseStep": "null"
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "SetStep": {
                            "ref": {
                              "PropertyReference": {
                                "PropertyReference": {
                                  "base": {
                                    "Variable": {
                                      "Variable": {
                                        "name": "string"
                                      }
                                    }
                                  },
                                  "prop": {
                                    "FieldProperty": {
                                      "FieldProperty": {
                                        "name": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "expr": {
                              "NullLiteral": {}
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "AssertStep": {
                            "cond": {
                              "TypeCheckCondition": {
                                "expr": {
                                  "ReferenceExpression": {
                                    "ref": {
                                      "Variable": {
                                        "Variable": {
                                          "name": "string"
                                        }
                                      }
                                    }
                                  }
                                },
                                "negation": "boolean",
                                "ty": [
                                  {
                                    "Type": {
                                      "clo": {
                                        "names": []
                                      },
                                      "cont": {
                                        "Fin": {
                                          "set": []
                                        }
                                      },
                                      "record": {
                                        "Elem": {
                                          "map": {
                                            "ProxyExoticObject": {
                                              "map": {}
                                            }
                                          }
                                        }
                                      },
                                      "map": {
                                        "Bot": {}
                                      },
                                      "list": {
                                        "Bot": {}
                                      },
                                      "ast": {
                                        "Simple": {
                                          "set": []
                                        }
                                      },
                                      "grammarSymbol": {
                                        "Fin": {
                                          "set": []
                                        }
                                      },
                                      "codeUnit": "boolean",
                                      "enumv": {
                                        "Fin": {
                                          "set": []
                                        }
                                      },
                                      "math": {
                                        "int": {
                                          "IntSetTy": {
                                            "set": []
                                          }
                                        }
                                      },
                                      "infinity": {
                                        "pos": []
                                      },
                                      "number": {
                                        "int": {
                                          "IntSetTy": {
                                            "set": []
                                          }
                                        },
                                        "hasNaN": "boolean"
                                      },
                                      "bigInt": "boolean",
                                      "str": {
                                        "Fin": {
                                          "set": []
                                        }
                                      },
                                      "bool": {
                                        "set": []
                                      },
                                      "undef": "boolean",
                                      "nullv": "boolean"
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "SetStep": {
                            "ref": {
                              "PropertyReference": {
                                "PropertyReference": {
                                  "base": {
                                    "Variable": {
                                      "Variable": {
                                        "name": "string"
                                      }
                                    }
                                  },
                                  "prop": {
                                    "FieldProperty": {
                                      "FieldProperty": {
                                        "name": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "expr": {
                              "NullLiteral": {}
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "SetStep": {
                            "ref": {
                              "PropertyReference": {
                                "PropertyReference": {
                                  "base": {
                                    "Variable": {
                                      "Variable": {
                                        "name": "string"
                                      }
                                    }
                                  },
                                  "prop": {
                                    "FieldProperty": {
                                      "FieldProperty": {
                                        "name": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "expr": {
                              "NullLiteral": {}
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "ReturnStep": {
                            "expr": {
                              "UndefinedLiteral": {}
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.Proxy.revocable"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "DecimalMathValueLiteral": {
                  "n": "number"
                }
              },
              {
                "StringLiteral": {
                  "s": "string"
                }
              },
              {
                "ListExpression": {
                  "entries": [
                    {
                      "FieldLiteral": {
                        "name": "string"
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.Proxy.revocable"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "InvokeAbstractOperationExpression": {
                  "name": "string",
                  "args": [
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    },
                    {
                      "EnumLiteral": {
                        "name": "string"
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.Promise.race",
      "INTRINSICS.Promise.any",
      "INTRINSICS.Promise.allSettled",
      "INTRINSICS.Promise.all",
      "INTRINSICS.AsyncGeneratorFunction.prototype.prototype.throw",
      "INTRINSICS.AsyncGeneratorFunction.prototype.prototype.return",
      "INTRINSICS.AsyncGeneratorFunction.prototype.prototype.next"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "InvokeAbstractOperationExpression": {
                  "name": "string",
                  "args": [
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    },
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    },
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    },
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.Promise.race",
      "INTRINSICS.Promise.any",
      "INTRINSICS.Promise.allSettled",
      "INTRINSICS.Promise.all"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "params": [
            {
              "Variable": {
                "name": "string"
              }
            }
          ],
          "captured": [
            {
              "Variable": {
                "name": "string"
              }
            },
            {
              "Variable": {
                "name": "string"
              }
            }
          ],
          "body": {
            "BlockStep": {
              "block": {
                "StepBlock": {
                  "steps": [
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "LetStep": {
                            "variable": {
                              "Variable": {
                                "name": "string"
                              }
                            },
                            "expr": {
                              "ReturnIfAbruptExpression": {
                                "expr": {
                                  "InvokeAbstractOperationExpression": {
                                    "name": "string",
                                    "args": [
                                      {
                                        "ReferenceExpression": {
                                          "ref": {
                                            "Variable": {
                                              "Variable": {
                                                "name": "string"
                                              }
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "UndefinedLiteral": {}
                                      }
                                    ]
                                  }
                                },
                                "check": "boolean"
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "LetStep": {
                            "variable": {
                              "Variable": {
                                "name": "string"
                              }
                            },
                            "expr": {
                              "ReturnIfAbruptExpression": {
                                "expr": {
                                  "InvokeAbstractOperationExpression": {
                                    "name": "string",
                                    "args": [
                                      {
                                        "ReferenceExpression": {
                                          "ref": {
                                            "Variable": {
                                              "Variable": {
                                                "name": "string"
                                              }
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "ReferenceExpression": {
                                          "ref": {
                                            "Variable": {
                                              "Variable": {
                                                "name": "string"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                },
                                "check": "boolean"
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "LetStep": {
                            "variable": {
                              "Variable": {
                                "name": "string"
                              }
                            },
                            "expr": {
                              "params": [],
                              "captured": [
                                {
                                  "Variable": {
                                    "name": "string"
                                  }
                                }
                              ],
                              "body": {
                                "BlockStep": {
                                  "block": {
                                    "StepBlock": {
                                      "steps": [
                                        {
                                          "SubStep": {
                                            "directive": "null",
                                            "step": {
                                              "ReturnStep": {
                                                "expr": {
                                                  "ReferenceExpression": {
                                                    "ref": {
                                                      "Variable": {
                                                        "Variable": {
                                                          "name": "string"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "LetStep": {
                            "variable": {
                              "Variable": {
                                "name": "string"
                              }
                            },
                            "expr": {
                              "InvokeAbstractOperationExpression": {
                                "name": "string",
                                "args": [
                                  {
                                    "ReferenceExpression": {
                                      "ref": {
                                        "Variable": {
                                          "Variable": {
                                            "name": "string"
                                          }
                                        }
                                      }
                                    }
                                  },
                                  {
                                    "DecimalMathValueLiteral": {
                                      "n": "number"
                                    }
                                  },
                                  {
                                    "StringLiteral": {
                                      "s": "string"
                                    }
                                  },
                                  {
                                    "ListExpression": {
                                      "entries": []
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "ReturnStep": {
                            "expr": {
                              "ReturnIfAbruptExpression": {
                                "expr": {
                                  "InvokeAbstractOperationExpression": {
                                    "name": "string",
                                    "args": [
                                      {
                                        "ReferenceExpression": {
                                          "ref": {
                                            "Variable": {
                                              "Variable": {
                                                "name": "string"
                                              }
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "StringLiteral": {
                                          "s": "string"
                                        }
                                      },
                                      {
                                        "ListExpression": {
                                          "entries": [
                                            {
                                              "ReferenceExpression": {
                                                "ref": {
                                                  "Variable": {
                                                    "Variable": {
                                                      "name": "string"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      }
                                    ]
                                  }
                                },
                                "check": "boolean"
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.Promise.prototype.finally"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "params": [],
          "captured": [
            {
              "Variable": {
                "name": "string"
              }
            }
          ],
          "body": {
            "BlockStep": {
              "block": {
                "StepBlock": {
                  "steps": [
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "ReturnStep": {
                            "expr": {
                              "ReferenceExpression": {
                                "ref": {
                                  "Variable": {
                                    "Variable": {
                                      "name": "string"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.Promise.prototype.finally"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "params": [
            {
              "Variable": {
                "name": "string"
              }
            }
          ],
          "captured": [
            {
              "Variable": {
                "name": "string"
              }
            },
            {
              "Variable": {
                "name": "string"
              }
            }
          ],
          "body": {
            "BlockStep": {
              "block": {
                "StepBlock": {
                  "steps": [
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "LetStep": {
                            "variable": {
                              "Variable": {
                                "name": "string"
                              }
                            },
                            "expr": {
                              "ReturnIfAbruptExpression": {
                                "expr": {
                                  "InvokeAbstractOperationExpression": {
                                    "name": "string",
                                    "args": [
                                      {
                                        "ReferenceExpression": {
                                          "ref": {
                                            "Variable": {
                                              "Variable": {
                                                "name": "string"
                                              }
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "UndefinedLiteral": {}
                                      }
                                    ]
                                  }
                                },
                                "check": "boolean"
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "LetStep": {
                            "variable": {
                              "Variable": {
                                "name": "string"
                              }
                            },
                            "expr": {
                              "ReturnIfAbruptExpression": {
                                "expr": {
                                  "InvokeAbstractOperationExpression": {
                                    "name": "string",
                                    "args": [
                                      {
                                        "ReferenceExpression": {
                                          "ref": {
                                            "Variable": {
                                              "Variable": {
                                                "name": "string"
                                              }
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "ReferenceExpression": {
                                          "ref": {
                                            "Variable": {
                                              "Variable": {
                                                "name": "string"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                },
                                "check": "boolean"
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "LetStep": {
                            "variable": {
                              "Variable": {
                                "name": "string"
                              }
                            },
                            "expr": {
                              "params": [],
                              "captured": [
                                {
                                  "Variable": {
                                    "name": "string"
                                  }
                                }
                              ],
                              "body": {
                                "BlockStep": {
                                  "block": {
                                    "StepBlock": {
                                      "steps": [
                                        {
                                          "SubStep": {
                                            "directive": "null",
                                            "step": {
                                              "ReturnStep": {
                                                "expr": {
                                                  "InvokeAbstractOperationExpression": {
                                                    "name": "string",
                                                    "args": [
                                                      {
                                                        "ReferenceExpression": {
                                                          "ref": {
                                                            "Variable": {
                                                              "Variable": {
                                                                "name": "string"
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    ]
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "LetStep": {
                            "variable": {
                              "Variable": {
                                "name": "string"
                              }
                            },
                            "expr": {
                              "InvokeAbstractOperationExpression": {
                                "name": "string",
                                "args": [
                                  {
                                    "ReferenceExpression": {
                                      "ref": {
                                        "Variable": {
                                          "Variable": {
                                            "name": "string"
                                          }
                                        }
                                      }
                                    }
                                  },
                                  {
                                    "DecimalMathValueLiteral": {
                                      "n": "number"
                                    }
                                  },
                                  {
                                    "StringLiteral": {
                                      "s": "string"
                                    }
                                  },
                                  {
                                    "ListExpression": {
                                      "entries": []
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "ReturnStep": {
                            "expr": {
                              "ReturnIfAbruptExpression": {
                                "expr": {
                                  "InvokeAbstractOperationExpression": {
                                    "name": "string",
                                    "args": [
                                      {
                                        "ReferenceExpression": {
                                          "ref": {
                                            "Variable": {
                                              "Variable": {
                                                "name": "string"
                                              }
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "StringLiteral": {
                                          "s": "string"
                                        }
                                      },
                                      {
                                        "ListExpression": {
                                          "entries": [
                                            {
                                              "ReferenceExpression": {
                                                "ref": {
                                                  "Variable": {
                                                    "Variable": {
                                                      "name": "string"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      }
                                    ]
                                  }
                                },
                                "check": "boolean"
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.Promise.prototype.finally"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "params": [],
          "captured": [
            {
              "Variable": {
                "name": "string"
              }
            }
          ],
          "body": {
            "BlockStep": {
              "block": {
                "StepBlock": {
                  "steps": [
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "ReturnStep": {
                            "expr": {
                              "InvokeAbstractOperationExpression": {
                                "name": "string",
                                "args": [
                                  {
                                    "ReferenceExpression": {
                                      "ref": {
                                        "Variable": {
                                          "Variable": {
                                            "name": "string"
                                          }
                                        }
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.Promise.prototype.finally"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeAbstractOperationExpression": {
                "name": "string",
                "args": [
                  {
                    "NewTargetLiteral": {}
                  },
                  {
                    "StringLiteral": {
                      "s": "string"
                    }
                  },
                  {
                    "ListExpression": {
                      "entries": [
                        {
                          "FieldLiteral": {
                            "name": "string"
                          }
                        },
                        {
                          "FieldLiteral": {
                            "name": "string"
                          }
                        },
                        {
                          "FieldLiteral": {
                            "name": "string"
                          }
                        },
                        {
                          "FieldLiteral": {
                            "name": "string"
                          }
                        },
                        {
                          "FieldLiteral": {
                            "name": "string"
                          }
                        }
                      ]
                    }
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.Promise"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "InvokeAbstractOperationExpression": {
                  "name": "string",
                  "args": [
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    },
                    {
                      "UndefinedLiteral": {}
                    },
                    {
                      "ListExpression": {
                        "entries": [
                          {
                            "ReferenceExpression": {
                              "ref": {
                                "PropertyReference": {
                                  "PropertyReference": {
                                    "base": {
                                      "Variable": {
                                        "Variable": {
                                          "name": "string"
                                        }
                                      }
                                    },
                                    "prop": {
                                      "FieldProperty": {
                                        "FieldProperty": {
                                          "name": "string"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          {
                            "ReferenceExpression": {
                              "ref": {
                                "PropertyReference": {
                                  "PropertyReference": {
                                    "base": {
                                      "Variable": {
                                        "Variable": {
                                          "name": "string"
                                        }
                                      }
                                    },
                                    "prop": {
                                      "FieldProperty": {
                                        "FieldProperty": {
                                          "name": "string"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.Promise"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "RecordExpression": {
            "tname": "string",
            "fields": [
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              ],
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "TrueLiteral": {}
                }
              ],
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "TrueLiteral": {}
                }
              ]
            ]
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.Object.prototype.__defineSetter__",
      "INTRINSICS.Object.prototype.__defineGetter__"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeAbstractOperationExpression": {
                "name": "string",
                "args": [
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "EnumLiteral": {
                      "name": "string"
                    }
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.Object.groupBy",
      "INTRINSICS.Map.groupBy"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "params": [
            {
              "Variable": {
                "name": "string"
              }
            },
            {
              "Variable": {
                "name": "string"
              }
            }
          ],
          "captured": [
            {
              "Variable": {
                "name": "string"
              }
            }
          ],
          "body": {
            "BlockStep": {
              "block": {
                "StepBlock": {
                  "steps": [
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "LetStep": {
                            "variable": {
                              "Variable": {
                                "name": "string"
                              }
                            },
                            "expr": {
                              "ReturnIfAbruptExpression": {
                                "expr": {
                                  "InvokeAbstractOperationExpression": {
                                    "name": "string",
                                    "args": [
                                      {
                                        "ReferenceExpression": {
                                          "ref": {
                                            "Variable": {
                                              "Variable": {
                                                "name": "string"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                },
                                "check": "boolean"
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "PerformStep": {
                            "expr": {
                              "ReturnIfAbruptExpression": {
                                "expr": {
                                  "InvokeAbstractOperationExpression": {
                                    "name": "string",
                                    "args": [
                                      {
                                        "ReferenceExpression": {
                                          "ref": {
                                            "Variable": {
                                              "Variable": {
                                                "name": "string"
                                              }
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "ReferenceExpression": {
                                          "ref": {
                                            "Variable": {
                                              "Variable": {
                                                "name": "string"
                                              }
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "ReferenceExpression": {
                                          "ref": {
                                            "Variable": {
                                              "Variable": {
                                                "name": "string"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                },
                                "check": "boolean"
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "ReturnStep": {
                            "expr": {
                              "UndefinedLiteral": {}
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.Object.fromEntries"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ConversionExpression": {
            "op": {
              "ToNumber": {}
            },
            "expr": {
              "ConversionExpression": {
                "op": {
                  "ToMath": {}
                },
                "expr": {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.Number"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "NumberLiteral": {
            "double": "number"
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.Number",
      "INTRINSICS.Date",
      "INTRINSICS.Date.UTC",
      "INTRINSICS.Array.prototype.unshift",
      "INTRINSICS.Array",
      "FlattenIntoArray"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "NumberLiteral": {
            "double": "null"
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.Math.min",
      "INTRINSICS.Math.max"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "BinaryExpression": {
            "left": {
              "BinaryExpression": {
                "left": {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                },
                "op": {
                  "Mul": {}
                },
                "right": {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "op": {
              "Mod": {}
            },
            "right": {
              "ExponentiationExpression": {
                "base": {
                  "DecimalMathValueLiteral": {
                    "n": "number"
                  }
                },
                "power": {
                  "DecimalMathValueLiteral": {
                    "n": "number"
                  }
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.Math.imul"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "MathOpExpression": {
            "op": "string",
            "args": [
              {
                "MathFuncExpression": {
                  "op": {
                    "Abs": {}
                  },
                  "args": [
                    {
                      "BinaryExpression": {
                        "left": {
                          "ConversionExpression": {
                            "op": {
                              "ToMath": {}
                            },
                            "expr": {
                              "ReferenceExpression": {
                                "ref": {
                                  "Variable": {
                                    "Variable": {
                                      "name": "string"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "op": {
                          "Div": {}
                        },
                        "right": {
                          "ConversionExpression": {
                            "op": {
                              "ToMath": {}
                            },
                            "expr": {
                              "ReferenceExpression": {
                                "ref": {
                                  "Variable": {
                                    "Variable": {
                                      "name": "string"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.Math.atan2"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "RecordExpression": {
            "tname": "string",
            "fields": [
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "ReferenceExpression": {
                    "ref": {
                      "PropertyReference": {
                        "PropertyReference": {
                          "base": {
                            "Variable": {
                              "Variable": {
                                "name": "string"
                              }
                            }
                          },
                          "prop": {
                            "FieldProperty": {
                              "FieldProperty": {
                                "name": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              ],
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              ]
            ]
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.Map.groupBy"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "RecordExpression": {
            "tname": "string",
            "fields": [
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              ],
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              ],
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              ],
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              ],
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              ]
            ]
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.JSON.stringify",
      "GetRawBytesFromSharedBlock"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "InvokeSyntaxDirectedOperationExpression": {
                  "base": {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  "name": "string",
                  "args": []
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.JSON.parse",
      "GeneratorStart",
      "ForInOfHeadEvaluation",
      "ForInOfBodyEvaluation",
      "ForBodyEvaluation",
      "AsyncGeneratorStart",
      "AsyncBlockStart"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "RecordExpression": {
            "tname": "string",
            "fields": [
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "EnumLiteral": {
                    "name": "string"
                  }
                }
              ],
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              ],
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "EnumLiteral": {
                    "name": "string"
                  }
                }
              ]
            ]
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.GeneratorFunction.prototype.prototype.return",
      "INTRINSICS.AsyncGeneratorFunction.prototype.prototype.return"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReferenceExpression": {
            "ref": {
              "PropertyReference": {
                "PropertyReference": {
                  "base": {
                    "PropertyReference": {
                      "PropertyReference": {
                        "base": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        },
                        "prop": {
                          "FieldProperty": {
                            "FieldProperty": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "prop": {
                    "IndexProperty": {
                      "IndexProperty": {
                        "index": {
                          "DecimalMathValueLiteral": {
                            "n": "number"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.ForInIteratorPrototype.next",
      "AsyncGeneratorCompleteStep"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeAbstractOperationExpression": {
                "name": "string",
                "args": [
                  {
                    "NewTargetLiteral": {}
                  },
                  {
                    "StringLiteral": {
                      "s": "string"
                    }
                  },
                  {
                    "ListExpression": {
                      "entries": [
                        {
                          "FieldLiteral": {
                            "name": "string"
                          }
                        },
                        {
                          "FieldLiteral": {
                            "name": "string"
                          }
                        },
                        {
                          "FieldLiteral": {
                            "name": "string"
                          }
                        }
                      ]
                    }
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.FinalizationRegistry"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeAbstractOperationExpression": {
                "name": "string",
                "args": [
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "StringLiteral": {
                      "s": "string"
                    }
                  },
                  {
                    "ListExpression": {
                      "entries": [
                        {
                          "FieldLiteral": {
                            "name": "string"
                          }
                        }
                      ]
                    }
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.Error",
      "INTRINSICS.AggregateError"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "MathFuncExpression": {
                  "op": {
                    "Abs": {}
                  },
                  "args": [
                    {
                      "ConversionExpression": {
                        "op": {
                          "ToMath": {}
                        },
                        "expr": {
                          "ReferenceExpression": {
                            "ref": {
                              "Variable": {
                                "Variable": {
                                  "name": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              },
              {
                "DecimalMathValueLiteral": {
                  "n": "number"
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.Date.prototype.toUTCString",
      "DateString"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "InvokeAbstractOperationExpression": {
                  "name": "string",
                  "args": [
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              },
              {
                "InvokeAbstractOperationExpression": {
                  "name": "string",
                  "args": [
                    {
                      "InvokeAbstractOperationExpression": {
                        "name": "string",
                        "args": [
                          {
                            "ReferenceExpression": {
                              "ref": {
                                "Variable": {
                                  "Variable": {
                                    "name": "string"
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "InvokeAbstractOperationExpression": {
                        "name": "string",
                        "args": [
                          {
                            "ReferenceExpression": {
                              "ref": {
                                "Variable": {
                                  "Variable": {
                                    "name": "string"
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    },
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.Date.prototype.setUTCSeconds",
      "INTRINSICS.Date.prototype.setSeconds"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "InvokeAbstractOperationExpression": {
                  "name": "string",
                  "args": [
                    {
                      "InvokeAbstractOperationExpression": {
                        "name": "string",
                        "args": [
                          {
                            "ReferenceExpression": {
                              "ref": {
                                "Variable": {
                                  "Variable": {
                                    "name": "string"
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    },
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              },
              {
                "InvokeAbstractOperationExpression": {
                  "name": "string",
                  "args": [
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.Date.prototype.setUTCMonth",
      "INTRINSICS.Date.prototype.setMonth"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "InvokeAbstractOperationExpression": {
                  "name": "string",
                  "args": [
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              },
              {
                "InvokeAbstractOperationExpression": {
                  "name": "string",
                  "args": [
                    {
                      "InvokeAbstractOperationExpression": {
                        "name": "string",
                        "args": [
                          {
                            "ReferenceExpression": {
                              "ref": {
                                "Variable": {
                                  "Variable": {
                                    "name": "string"
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    },
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    },
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.Date.prototype.setUTCMinutes",
      "INTRINSICS.Date.prototype.setMinutes"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "InvokeAbstractOperationExpression": {
                  "name": "string",
                  "args": [
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              },
              {
                "InvokeAbstractOperationExpression": {
                  "name": "string",
                  "args": [
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              },
              {
                "InvokeAbstractOperationExpression": {
                  "name": "string",
                  "args": [
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              },
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.Date.prototype.setUTCMilliseconds",
      "INTRINSICS.Date.prototype.setMilliseconds"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "InvokeAbstractOperationExpression": {
                  "name": "string",
                  "args": [
                    {
                      "InvokeAbstractOperationExpression": {
                        "name": "string",
                        "args": [
                          {
                            "ReferenceExpression": {
                              "ref": {
                                "Variable": {
                                  "Variable": {
                                    "name": "string"
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.Date.prototype.setUTCMilliseconds"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "InvokeAbstractOperationExpression": {
                  "name": "string",
                  "args": [
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              },
              {
                "InvokeAbstractOperationExpression": {
                  "name": "string",
                  "args": [
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    },
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    },
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    },
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.Date.prototype.setUTCHours",
      "INTRINSICS.Date.prototype.setHours"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "InvokeAbstractOperationExpression": {
                  "name": "string",
                  "args": [
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    },
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    },
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              },
              {
                "InvokeAbstractOperationExpression": {
                  "name": "string",
                  "args": [
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.Date.prototype.setUTCFullYear",
      "INTRINSICS.Date.prototype.setFullYear"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "InvokeAbstractOperationExpression": {
                  "name": "string",
                  "args": [
                    {
                      "InvokeAbstractOperationExpression": {
                        "name": "string",
                        "args": [
                          {
                            "ReferenceExpression": {
                              "ref": {
                                "Variable": {
                                  "Variable": {
                                    "name": "string"
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "InvokeAbstractOperationExpression": {
                        "name": "string",
                        "args": [
                          {
                            "ReferenceExpression": {
                              "ref": {
                                "Variable": {
                                  "Variable": {
                                    "name": "string"
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              },
              {
                "InvokeAbstractOperationExpression": {
                  "name": "string",
                  "args": [
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.Date.prototype.setUTCDate",
      "INTRINSICS.Date.prototype.setDate"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "InvokeAbstractOperationExpression": {
                  "name": "string",
                  "args": [
                    {
                      "InvokeAbstractOperationExpression": {
                        "name": "string",
                        "args": [
                          {
                            "InvokeAbstractOperationExpression": {
                              "name": "string",
                              "args": [
                                {
                                  "ReferenceExpression": {
                                    "ref": {
                                      "Variable": {
                                        "Variable": {
                                          "name": "string"
                                        }
                                      }
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "ReferenceExpression": {
                              "ref": {
                                "Variable": {
                                  "Variable": {
                                    "name": "string"
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.Date.prototype.setMilliseconds"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeAbstractOperationExpression": {
                "name": "string",
                "args": [
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "PropertyReference": {
                          "PropertyReference": {
                            "base": {
                              "Variable": {
                                "Variable": {
                                  "name": "string"
                                }
                              }
                            },
                            "prop": {
                              "IndexProperty": {
                                "IndexProperty": {
                                  "index": {
                                    "DecimalMathValueLiteral": {
                                      "n": "number"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.Date"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "InvokeAbstractOperationExpression": {
                  "name": "string",
                  "args": [
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    },
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    },
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              },
              {
                "InvokeAbstractOperationExpression": {
                  "name": "string",
                  "args": [
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    },
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    },
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    },
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.Date"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeAbstractOperationExpression": {
                "name": "string",
                "args": [
                  {
                    "NewTargetLiteral": {}
                  },
                  {
                    "StringLiteral": {
                      "s": "string"
                    }
                  },
                  {
                    "ListExpression": {
                      "entries": [
                        {
                          "FieldLiteral": {
                            "name": "string"
                          }
                        },
                        {
                          "FieldLiteral": {
                            "name": "string"
                          }
                        },
                        {
                          "FieldLiteral": {
                            "name": "string"
                          }
                        },
                        {
                          "FieldLiteral": {
                            "name": "string"
                          }
                        }
                      ]
                    }
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.DataView"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "BinaryExpression": {
            "left": {
              "ConversionExpression": {
                "op": {
                  "ToMath": {}
                },
                "expr": {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "op": {
              "Mod": {}
            },
            "right": {
              "ExponentiationExpression": {
                "base": {
                  "DecimalMathValueLiteral": {
                    "n": "number"
                  }
                },
                "power": {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.BigInt.asIntN"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeNumericMethodExpression": {
            "base": "string",
            "name": "string",
            "args": [
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.Atomics.sub",
      "INTRINSICS.Atomics.add"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeAbstractOperationExpression": {
                "name": "string",
                "args": [
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "TrueLiteral": {}
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.Atomics.notify",
      "CompareArrayElements"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "MathFuncExpression": {
            "op": {
              "Max": {}
            },
            "args": [
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "DecimalMathValueLiteral": {
                  "n": "number"
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.Atomics.notify"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReferenceExpression": {
            "ref": {
              "AgentRecord": {
                "AgentRecord": {}
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.Atomics.isLockFree",
      "AgentSignifier",
      "AgentCanSuspend"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.Atomics.compareExchange",
      "GetValueFromBuffer"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "UndefinedLiteral": {}
              },
              {
                "TrueLiteral": {}
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.AsyncGeneratorFunction.prototype.prototype.next"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "TrueLiteral": {}
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.AsyncFromSyncIteratorPrototype.return"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "MathFuncExpression": {
            "op": {
              "Min": {}
            },
            "args": [
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "BinaryExpression": {
                  "left": {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  "op": {
                    "Sub": {}
                  },
                  "right": {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.ArrayBuffer.prototype.slice"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "MathFuncExpression": {
            "op": {
              "Min": {}
            },
            "args": [
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "ReferenceExpression": {
                  "ref": {
                    "PropertyReference": {
                      "PropertyReference": {
                        "base": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        },
                        "prop": {
                          "FieldProperty": {
                            "FieldProperty": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.ArrayBuffer.prototype.resize",
      "ArrayBufferCopyAndDetach"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeAbstractOperationExpression": {
                "name": "string",
                "args": [
                  {
                    "ConversionExpression": {
                      "op": {
                        "ToNumber": {}
                      },
                      "expr": {
                        "BinaryExpression": {
                          "left": {
                            "ReferenceExpression": {
                              "ref": {
                                "Variable": {
                                  "Variable": {
                                    "name": "string"
                                  }
                                }
                              }
                            }
                          },
                          "op": {
                            "Sub": {}
                          },
                          "right": {
                            "DecimalMathValueLiteral": {
                              "n": "number"
                            }
                          }
                        }
                      }
                    }
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.Array.prototype.unshift",
      "INTRINSICS.Array.prototype.shift"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeAbstractOperationExpression": {
                "name": "string",
                "args": [
                  {
                    "ConversionExpression": {
                      "op": {
                        "ToNumber": {}
                      },
                      "expr": {
                        "BinaryExpression": {
                          "left": {
                            "BinaryExpression": {
                              "left": {
                                "ReferenceExpression": {
                                  "ref": {
                                    "Variable": {
                                      "Variable": {
                                        "name": "string"
                                      }
                                    }
                                  }
                                }
                              },
                              "op": {
                                "Add": {}
                              },
                              "right": {
                                "ReferenceExpression": {
                                  "ref": {
                                    "Variable": {
                                      "Variable": {
                                        "name": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "op": {
                            "Sub": {}
                          },
                          "right": {
                            "DecimalMathValueLiteral": {
                              "n": "number"
                            }
                          }
                        }
                      }
                    }
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.Array.prototype.unshift",
      "INTRINSICS.Array.prototype.splice"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "BinaryExpression": {
            "left": {
              "BinaryExpression": {
                "left": {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                },
                "op": {
                  "Add": {}
                },
                "right": {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "op": {
              "Sub": {}
            },
            "right": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.Array.prototype.toSpliced"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeAbstractOperationExpression": {
                "name": "string",
                "args": [
                  {
                    "ConversionExpression": {
                      "op": {
                        "ToNumber": {}
                      },
                      "expr": {
                        "BinaryExpression": {
                          "left": {
                            "ReferenceExpression": {
                              "ref": {
                                "Variable": {
                                  "Variable": {
                                    "name": "string"
                                  }
                                }
                              }
                            }
                          },
                          "op": {
                            "Add": {}
                          },
                          "right": {
                            "ReferenceExpression": {
                              "ref": {
                                "Variable": {
                                  "Variable": {
                                    "name": "string"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.Array.prototype.splice"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ConversionExpression": {
            "op": {
              "ToNumber": {}
            },
            "expr": {
              "BinaryExpression": {
                "left": {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                },
                "op": {
                  "Sub": {}
                },
                "right": {
                  "DecimalMathValueLiteral": {
                    "n": "number"
                  }
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.Array.prototype.pop"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeAbstractOperationExpression": {
                "name": "string",
                "args": [
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "DecimalMathValueLiteral": {
                      "n": "number"
                    }
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.Array.prototype.flatMap",
      "INTRINSICS.Array.prototype.flat",
      "INTRINSICS.Array.prototype.filter",
      "INTRINSICS.Array.prototype.concat"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ConversionExpression": {
            "op": {
              "ToNumber": {}
            },
            "expr": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.Array.of",
      "CreateArrayIterator"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeAbstractOperationExpression": {
                "name": "string",
                "args": [
                  {
                    "DecimalMathValueLiteral": {
                      "n": "number"
                    }
                  },
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.Array"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "ErrorObjectLiteral": {
                  "name": "string"
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.Array.from",
      "GroupBy",
      "AddEntriesFromIterable"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "InvokeAbstractOperationExpression": {
                  "name": "string",
                  "args": [
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    },
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    },
                    {
                      "ListExpression": {
                        "entries": [
                          {
                            "ReferenceExpression": {
                              "ref": {
                                "Variable": {
                                  "Variable": {
                                    "name": "string"
                                  }
                                }
                              }
                            }
                          },
                          {
                            "ConversionExpression": {
                              "op": {
                                "ToNumber": {}
                              },
                              "expr": {
                                "ReferenceExpression": {
                                  "ref": {
                                    "Variable": {
                                      "Variable": {
                                        "name": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.Array.from"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "InvokeAbstractOperationExpression": {
                  "name": "string",
                  "args": [
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    },
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    },
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.Array.from"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeAbstractOperationExpression": {
                "name": "string",
                "args": [
                  {
                    "ReturnIfAbruptExpression": {
                      "expr": {
                        "InvokeAbstractOperationExpression": {
                          "name": "string",
                          "args": [
                            {
                              "ReferenceExpression": {
                                "ref": {
                                  "Variable": {
                                    "Variable": {
                                      "name": "string"
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "EnumLiteral": {
                                "name": "string"
                              }
                            }
                          ]
                        }
                      },
                      "check": "boolean"
                    }
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "INTRINSICS.AggregateError"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "InvokeAbstractOperationExpression": {
                  "name": "string",
                  "args": [
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    },
                    {
                      "UndefinedLiteral": {}
                    },
                    {
                      "ListExpression": {
                        "entries": [
                          {
                            "ReferenceExpression": {
                              "ref": {
                                "Variable": {
                                  "Variable": {
                                    "name": "string"
                                  }
                                }
                              }
                            }
                          },
                          {
                            "ConversionExpression": {
                              "op": {
                                "ToNumber": {}
                              },
                              "expr": {
                                "ReferenceExpression": {
                                  "ref": {
                                    "Variable": {
                                      "Variable": {
                                        "name": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "GroupBy"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "SoleElementExpression": {
            "list": {
              "InvokeSyntaxDirectedOperationExpression": {
                "base": {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                },
                "name": "string",
                "args": []
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "GlobalDeclarationInstantiation",
      "FunctionDeclarationInstantiation",
      "ForInOfBodyEvaluation",
      "EvalDeclarationInstantiation",
      "BlockDeclarationInstantiation"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "ConversionExpression": {
                  "op": {
                    "ToNumber": {}
                  },
                  "expr": {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "ConversionExpression": {
                  "op": {
                    "ToNumber": {}
                  },
                  "expr": {
                    "BinaryExpression": {
                      "left": {
                        "ReferenceExpression": {
                          "ref": {
                            "Variable": {
                              "Variable": {
                                "name": "string"
                              }
                            }
                          }
                        }
                      },
                      "op": {
                        "Sub": {}
                      },
                      "right": {
                        "DecimalMathValueLiteral": {
                          "n": "number"
                        }
                      }
                    }
                  }
                }
              },
              {
                "ConversionExpression": {
                  "op": {
                    "ToNumber": {}
                  },
                  "expr": {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "GetUTCEpochNanoseconds"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "ConversionExpression": {
                  "op": {
                    "ToNumber": {}
                  },
                  "expr": {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "ConversionExpression": {
                  "op": {
                    "ToNumber": {}
                  },
                  "expr": {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "ConversionExpression": {
                  "op": {
                    "ToNumber": {}
                  },
                  "expr": {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "ConversionExpression": {
                  "op": {
                    "ToNumber": {}
                  },
                  "expr": {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "GetUTCEpochNanoseconds"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeMethodExpression": {
            "ref": {
              "PropertyReference": {
                "base": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                },
                "prop": {
                  "ComponentProperty": {
                    "ComponentProperty": {
                      "name": "string"
                    }
                  }
                }
              }
            },
            "args": []
          }
        }
      }
    },
    "appearsIn": [
      "GetThisEnvironment",
      "GetModuleNamespace",
      "EvaluateCall",
      "ContinueDynamicImport",
      "AsyncModuleExecutionFulfilled"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeSyntaxDirectedOperationExpression": {
            "base": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            },
            "name": "string",
            "args": [
              {
                "TrueLiteral": {}
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "GetTemplateObject"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeSyntaxDirectedOperationExpression": {
            "base": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            },
            "name": "string",
            "args": [
              {
                "FalseLiteral": {}
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "GetTemplateObject"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "SubstringExpression": {
            "expr": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            },
            "from": {
              "MathFuncExpression": {
                "op": {
                  "Min": {}
                },
                "args": [
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            },
            "to": "null"
          }
        }
      }
    },
    "appearsIn": [
      "GetSubstitution"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "SubstringExpression": {
            "expr": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            },
            "from": {
              "DecimalMathValueLiteral": {
                "n": "number"
              }
            },
            "to": {
              "BinaryExpression": {
                "left": {
                  "DecimalMathValueLiteral": {
                    "n": "number"
                  }
                },
                "op": {
                  "Add": {}
                },
                "right": {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "GetSubstitution"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReferenceExpression": {
            "ref": {
              "PropertyReference": {
                "PropertyReference": {
                  "base": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  },
                  "prop": {
                    "IndexProperty": {
                      "IndexProperty": {
                        "index": {
                          "BinaryExpression": {
                            "left": {
                              "ReferenceExpression": {
                                "ref": {
                                  "Variable": {
                                    "Variable": {
                                      "name": "string"
                                    }
                                  }
                                }
                              }
                            },
                            "op": {
                              "Sub": {}
                            },
                            "right": {
                              "DecimalMathValueLiteral": {
                                "n": "number"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "GetSubstitution"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "StringLiteral": {
                  "s": "string"
                }
              },
              {
                "DecimalMathValueLiteral": {
                  "n": "number"
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "GetSubstitution"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "SubstringExpression": {
            "expr": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            },
            "from": {
              "DecimalMathValueLiteral": {
                "n": "number"
              }
            },
            "to": {
              "BinaryExpression": {
                "left": {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                },
                "op": {
                  "Add": {}
                },
                "right": {
                  "DecimalMathValueLiteral": {
                    "n": "number"
                  }
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "GetSubstitution"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "GetNamedTimeZoneEpochNanoseconds"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "RecordExpression": {
            "tname": "string",
            "fields": [
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "EnumLiteral": {
                    "name": "string"
                  }
                }
              ],
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "TrueLiteral": {}
                }
              ],
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              ],
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              ],
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              ],
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              ],
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              ]
            ]
          }
        }
      }
    },
    "appearsIn": [
      "GetModifySetValueInBuffer",
      "AtomicCompareExchangeInSharedBlock"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "RecordExpression": {
            "tname": "string",
            "fields": [
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              ],
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              ],
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "FalseLiteral": {}
                }
              ]
            ]
          }
        }
      }
    },
    "appearsIn": [
      "GetIteratorFromMethod",
      "CreateAsyncFromSyncIterator"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "params": [],
          "captured": [
            {
              "Variable": {
                "name": "string"
              }
            }
          ],
          "body": {
            "BlockStep": {
              "block": {
                "StepBlock": {
                  "steps": [
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "LetStep": {
                            "variable": {
                              "Variable": {
                                "name": "string"
                              }
                            },
                            "expr": {
                              "ReferenceExpression": {
                                "ref": {
                                  "RunningExecutionContext": {
                                    "RunningExecutionContext": {}
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "LetStep": {
                            "variable": {
                              "Variable": {
                                "name": "string"
                              }
                            },
                            "expr": {
                              "ReferenceExpression": {
                                "ref": {
                                  "PropertyReference": {
                                    "PropertyReference": {
                                      "base": {
                                        "Variable": {
                                          "Variable": {
                                            "name": "string"
                                          }
                                        }
                                      },
                                      "prop": {
                                        "ComponentProperty": {
                                          "ComponentProperty": {
                                            "name": "string"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "IfStep": {
                            "cond": {
                              "TypeCheckCondition": {
                                "expr": {
                                  "ReferenceExpression": {
                                    "ref": {
                                      "Variable": {
                                        "Variable": {
                                          "name": "string"
                                        }
                                      }
                                    }
                                  }
                                },
                                "negation": "boolean",
                                "ty": [
                                  {
                                    "Type": {
                                      "clo": {
                                        "names": []
                                      },
                                      "cont": {
                                        "Fin": {
                                          "set": []
                                        }
                                      },
                                      "record": {
                                        "Elem": {
                                          "map": {}
                                        }
                                      },
                                      "map": {
                                        "Bot": {}
                                      },
                                      "list": {
                                        "Bot": {}
                                      },
                                      "ast": {
                                        "Top": {}
                                      },
                                      "grammarSymbol": {
                                        "Fin": {
                                          "set": []
                                        }
                                      },
                                      "codeUnit": "boolean",
                                      "enumv": {
                                        "Fin": {
                                          "set": []
                                        }
                                      },
                                      "math": {
                                        "int": {
                                          "IntSetTy": {
                                            "set": []
                                          }
                                        }
                                      },
                                      "infinity": {
                                        "pos": []
                                      },
                                      "number": {
                                        "int": {
                                          "IntSetTy": {
                                            "set": []
                                          }
                                        },
                                        "hasNaN": "boolean"
                                      },
                                      "bigInt": "boolean",
                                      "str": {
                                        "Fin": {
                                          "set": []
                                        }
                                      },
                                      "bool": {
                                        "set": []
                                      },
                                      "undef": "boolean",
                                      "nullv": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            "thenStep": {
                              "BlockStep": {
                                "block": {
                                  "StepBlock": {
                                    "steps": [
                                      {
                                        "SubStep": {
                                          "directive": "null",
                                          "step": {
                                            "LetStep": {
                                              "variable": {
                                                "Variable": {
                                                  "name": "string"
                                                }
                                              },
                                              "expr": {
                                                "InvokeAbstractOperationExpression": {
                                                  "name": "string",
                                                  "args": [
                                                    {
                                                      "InvokeSyntaxDirectedOperationExpression": {
                                                        "base": {
                                                          "ReferenceExpression": {
                                                            "ref": {
                                                              "Variable": {
                                                                "Variable": {
                                                                  "name": "string"
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        "name": "string",
                                                        "args": []
                                                      }
                                                    }
                                                  ]
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            },
                            "elseStep": {
                              "BlockStep": {
                                "block": {
                                  "StepBlock": {
                                    "steps": [
                                      {
                                        "SubStep": {
                                          "directive": "null",
                                          "step": {
                                            "AssertStep": {
                                              "cond": {
                                                "TypeCheckCondition": {
                                                  "expr": {
                                                    "ReferenceExpression": {
                                                      "ref": {
                                                        "Variable": {
                                                          "Variable": {
                                                            "name": "string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "negation": "boolean",
                                                  "ty": [
                                                    {
                                                      "Type": {
                                                        "clo": {
                                                          "CloTopTy": {}
                                                        },
                                                        "cont": {
                                                          "Fin": {
                                                            "set": []
                                                          }
                                                        },
                                                        "record": {
                                                          "Elem": {
                                                            "map": {}
                                                          }
                                                        },
                                                        "map": {
                                                          "Bot": {}
                                                        },
                                                        "list": {
                                                          "Bot": {}
                                                        },
                                                        "ast": {
                                                          "Simple": {
                                                            "set": []
                                                          }
                                                        },
                                                        "grammarSymbol": {
                                                          "Fin": {
                                                            "set": []
                                                          }
                                                        },
                                                        "codeUnit": "boolean",
                                                        "enumv": {
                                                          "Fin": {
                                                            "set": []
                                                          }
                                                        },
                                                        "math": {
                                                          "int": {
                                                            "IntSetTy": {
                                                              "set": []
                                                            }
                                                          }
                                                        },
                                                        "infinity": {
                                                          "pos": []
                                                        },
                                                        "number": {
                                                          "int": {
                                                            "IntSetTy": {
                                                              "set": []
                                                            }
                                                          },
                                                          "hasNaN": "boolean"
                                                        },
                                                        "bigInt": "boolean",
                                                        "str": {
                                                          "Fin": {
                                                            "set": []
                                                          }
                                                        },
                                                        "bool": {
                                                          "set": []
                                                        },
                                                        "undef": "boolean",
                                                        "nullv": "boolean"
                                                      }
                                                    }
                                                  ]
                                                }
                                              }
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "SubStep": {
                                          "directive": "null",
                                          "step": {
                                            "LetStep": {
                                              "variable": {
                                                "Variable": {
                                                  "name": "string"
                                                }
                                              },
                                              "expr": {
                                                "InvokeAbstractClosureExpression": {
                                                  "ref": {
                                                    "Variable": {
                                                      "name": "string"
                                                    }
                                                  },
                                                  "args": []
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "AssertStep": {
                            "cond": {
                              "ExpressionCondition": {
                                "expr": {
                                  "YetExpression": {
                                    "str": "string",
                                    "block": "null"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "RemoveContextStep": {
                            "removeContext": {
                              "Variable": {
                                "Variable": {
                                  "name": "string"
                                }
                              }
                            },
                            "restoreContext": {
                              "None$": "null"
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "SetStep": {
                            "ref": {
                              "PropertyReference": {
                                "PropertyReference": {
                                  "base": {
                                    "Variable": {
                                      "Variable": {
                                        "name": "string"
                                      }
                                    }
                                  },
                                  "prop": {
                                    "FieldProperty": {
                                      "FieldProperty": {
                                        "name": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "expr": {
                              "EnumLiteral": {
                                "name": "string"
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "NoteStep": {
                            "note": "string"
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "IfStep": {
                            "cond": {
                              "PredicateCondition": {
                                "expr": {
                                  "ReferenceExpression": {
                                    "ref": {
                                      "Variable": {
                                        "Variable": {
                                          "name": "string"
                                        }
                                      }
                                    }
                                  }
                                },
                                "negation": "boolean",
                                "op": {
                                  "Normal": {}
                                }
                              }
                            },
                            "thenStep": {
                              "BlockStep": {
                                "block": {
                                  "StepBlock": {
                                    "steps": [
                                      {
                                        "SubStep": {
                                          "directive": "null",
                                          "step": {
                                            "LetStep": {
                                              "variable": {
                                                "Variable": {
                                                  "name": "string"
                                                }
                                              },
                                              "expr": {
                                                "UndefinedLiteral": {}
                                              }
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            },
                            "elseStep": {
                              "IfStep": {
                                "cond": {
                                  "PredicateCondition": {
                                    "expr": {
                                      "ReferenceExpression": {
                                        "ref": {
                                          "Variable": {
                                            "Variable": {
                                              "name": "string"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "negation": "boolean",
                                    "op": {
                                      "Return": {}
                                    }
                                  }
                                },
                                "thenStep": {
                                  "BlockStep": {
                                    "block": {
                                      "StepBlock": {
                                        "steps": [
                                          {
                                            "SubStep": {
                                              "directive": "null",
                                              "step": {
                                                "LetStep": {
                                                  "variable": {
                                                    "Variable": {
                                                      "name": "string"
                                                    }
                                                  },
                                                  "expr": {
                                                    "ReferenceExpression": {
                                                      "ref": {
                                                        "PropertyReference": {
                                                          "PropertyReference": {
                                                            "base": {
                                                              "Variable": {
                                                                "Variable": {
                                                                  "name": "string"
                                                                }
                                                              }
                                                            },
                                                            "prop": {
                                                              "FieldProperty": {
                                                                "FieldProperty": {
                                                                  "name": "string"
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  }
                                },
                                "elseStep": {
                                  "BlockStep": {
                                    "block": {
                                      "StepBlock": {
                                        "steps": [
                                          {
                                            "SubStep": {
                                              "directive": "null",
                                              "step": {
                                                "AssertStep": {
                                                  "cond": {
                                                    "PredicateCondition": {
                                                      "expr": {
                                                        "ReferenceExpression": {
                                                          "ref": {
                                                            "Variable": {
                                                              "Variable": {
                                                                "name": "string"
                                                              }
                                                            }
                                                          }
                                                        }
                                                      },
                                                      "negation": "boolean",
                                                      "op": {
                                                        "Throw": {}
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "SubStep": {
                                              "directive": "null",
                                              "step": {
                                                "ReturnStep": {
                                                  "expr": {
                                                    "ReturnIfAbruptExpression": {
                                                      "expr": {
                                                        "ReferenceExpression": {
                                                          "ref": {
                                                            "Variable": {
                                                              "Variable": {
                                                                "name": "string"
                                                              }
                                                            }
                                                          }
                                                        }
                                                      },
                                                      "check": "boolean"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "ReturnStep": {
                            "expr": {
                              "InvokeAbstractOperationExpression": {
                                "name": "string",
                                "args": [
                                  {
                                    "ReferenceExpression": {
                                      "ref": {
                                        "Variable": {
                                          "Variable": {
                                            "name": "string"
                                          }
                                        }
                                      }
                                    }
                                  },
                                  {
                                    "TrueLiteral": {}
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "GeneratorStart"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ListConcatExpression": {
            "exprs": [
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "ListExpression": {
                  "entries": [
                    {
                      "StringLiteral": {
                        "s": "string"
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "FunctionDeclarationInstantiation"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeMethodExpression": {
                "ref": {
                  "PropertyReference": {
                    "base": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    },
                    "prop": {
                      "ComponentProperty": {
                        "ComponentProperty": {
                          "name": "string"
                        }
                      }
                    }
                  }
                },
                "args": [
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "FalseLiteral": {}
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "FunctionDeclarationInstantiation"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeAbstractOperationExpression": {
                "name": "string",
                "args": [
                  {
                    "ReturnIfAbruptExpression": {
                      "expr": {
                        "ReferenceExpression": {
                          "ref": {
                            "Variable": {
                              "Variable": {
                                "name": "string"
                              }
                            }
                          }
                        }
                      },
                      "check": "boolean"
                    }
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "ForInOfHeadEvaluation"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "CoveredByExpression": {
            "code": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            },
            "rule": {
              "NonterminalLiteral": {
                "ordinal": "null",
                "name": "string",
                "flags": []
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "ForInOfBodyEvaluation"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "InvokeSyntaxDirectedOperationExpression": {
                  "base": {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  "name": "string",
                  "args": [
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "ForInOfBodyEvaluation"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "InvokeSyntaxDirectedOperationExpression": {
                  "base": {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  "name": "string",
                  "args": [
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    },
                    {
                      "UndefinedLiteral": {}
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "ForInOfBodyEvaluation"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "InvokeAbstractOperationExpression": {
                  "name": "string",
                  "args": [
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "PropertyReference": {
                            "PropertyReference": {
                              "base": {
                                "Variable": {
                                  "Variable": {
                                    "name": "string"
                                  }
                                }
                              },
                              "prop": {
                                "FieldProperty": {
                                  "FieldProperty": {
                                    "name": "string"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "ForInOfBodyEvaluation"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "InvokeSyntaxDirectedOperationExpression": {
                  "base": {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  "name": "string",
                  "args": [
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    },
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "ForInOfBodyEvaluation"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeSyntaxDirectedOperationExpression": {
                "base": {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                },
                "name": "string",
                "args": []
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "ForBodyEvaluation",
      "EvaluateStringOrNumericBinaryExpression",
      "EvaluatePropertyAccessWithExpressionKey",
      "EvaluateNew",
      "EvaluateCall"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "IntListExpression": {
            "from": {
              "DecimalMathValueLiteral": {
                "n": "number"
              }
            },
            "isFromInclusive": "boolean",
            "to": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            },
            "isToInclusive": "boolean",
            "isAscending": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "FindViaPredicate"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "params": [],
          "captured": [
            {
              "Variable": {
                "name": "string"
              }
            }
          ],
          "body": {
            "BlockStep": {
              "block": {
                "StepBlock": {
                  "steps": [
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "PerformStep": {
                            "expr": {
                              "InvokeAbstractOperationExpression": {
                                "name": "string",
                                "args": [
                                  {
                                    "ReferenceExpression": {
                                      "ref": {
                                        "Variable": {
                                          "Variable": {
                                            "name": "string"
                                          }
                                        }
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "ReturnStep": {
                            "expr": {
                              "UndefinedLiteral": {}
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "ExecuteAsyncModule"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "params": [
            {
              "Variable": {
                "name": "string"
              }
            }
          ],
          "captured": [
            {
              "Variable": {
                "name": "string"
              }
            }
          ],
          "body": {
            "BlockStep": {
              "block": {
                "StepBlock": {
                  "steps": [
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "PerformStep": {
                            "expr": {
                              "InvokeAbstractOperationExpression": {
                                "name": "string",
                                "args": [
                                  {
                                    "ReferenceExpression": {
                                      "ref": {
                                        "Variable": {
                                          "Variable": {
                                            "name": "string"
                                          }
                                        }
                                      }
                                    }
                                  },
                                  {
                                    "ReferenceExpression": {
                                      "ref": {
                                        "Variable": {
                                          "Variable": {
                                            "name": "string"
                                          }
                                        }
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "ReturnStep": {
                            "expr": {
                              "UndefinedLiteral": {}
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "ExecuteAsyncModule"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "ListExpression": {
                  "entries": [
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    },
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "EnumerableOwnProperties",
      "CreateSetIterator",
      "CreateArrayIterator"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "params": [],
          "captured": [
            {
              "Variable": {
                "name": "string"
              }
            },
            {
              "Variable": {
                "name": "string"
              }
            },
            {
              "Variable": {
                "name": "string"
              }
            }
          ],
          "body": {
            "BlockStep": {
              "block": {
                "StepBlock": {
                  "steps": [
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "AssertStep": {
                            "cond": {
                              "IsAreCondition": {
                                "left": [
                                  {
                                    "InvokeAbstractOperationExpression": {
                                      "name": "string",
                                      "args": []
                                    }
                                  }
                                ],
                                "negation": "boolean",
                                "right": [
                                  {
                                    "ReferenceExpression": {
                                      "ref": {
                                        "Variable": {
                                          "Variable": {
                                            "name": "string"
                                          }
                                        }
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "PerformStep": {
                            "expr": {
                              "ReturnIfAbruptExpression": {
                                "expr": {
                                  "InvokeAbstractOperationExpression": {
                                    "name": "string",
                                    "args": [
                                      {
                                        "ReferenceExpression": {
                                          "ref": {
                                            "PropertyReference": {
                                              "PropertyReference": {
                                                "base": {
                                                  "Variable": {
                                                    "Variable": {
                                                      "name": "string"
                                                    }
                                                  }
                                                },
                                                "prop": {
                                                  "FieldProperty": {
                                                    "FieldProperty": {
                                                      "name": "string"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "UndefinedLiteral": {}
                                      },
                                      {
                                        "ListExpression": {
                                          "entries": [
                                            {
                                              "ReferenceExpression": {
                                                "ref": {
                                                  "Variable": {
                                                    "Variable": {
                                                      "name": "string"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      }
                                    ]
                                  }
                                },
                                "check": "boolean"
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "ReturnStep": {
                            "expr": {
                              "EnumLiteral": {
                                "name": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "EnqueueResolveInAgentJob"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "params": [],
          "captured": [
            {
              "Variable": {
                "name": "string"
              }
            },
            {
              "Variable": {
                "name": "string"
              }
            }
          ],
          "body": {
            "BlockStep": {
              "block": {
                "StepBlock": {
                  "steps": [
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "PerformStep": {
                            "expr": {
                              "InvokeAbstractOperationExpression": {
                                "name": "string",
                                "args": [
                                  {
                                    "ReferenceExpression": {
                                      "ref": {
                                        "Variable": {
                                          "Variable": {
                                            "name": "string"
                                          }
                                        }
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "IfStep": {
                            "cond": {
                              "ContainsCondition": {
                                "list": {
                                  "ReferenceExpression": {
                                    "ref": {
                                      "PropertyReference": {
                                        "PropertyReference": {
                                          "base": {
                                            "Variable": {
                                              "Variable": {
                                                "name": "string"
                                              }
                                            }
                                          },
                                          "prop": {
                                            "FieldProperty": {
                                              "FieldProperty": {
                                                "name": "string"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                "negation": "boolean",
                                "target": {
                                  "Expr": {
                                    "expr": {
                                      "ReferenceExpression": {
                                        "ref": {
                                          "Variable": {
                                            "Variable": {
                                              "name": "string"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "thenStep": {
                              "BlockStep": {
                                "block": {
                                  "StepBlock": {
                                    "steps": [
                                      {
                                        "SubStep": {
                                          "directive": "null",
                                          "step": {
                                            "YetStep": {
                                              "expr": {
                                                "YetExpression": {
                                                  "str": "string",
                                                  "block": "null"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "SubStep": {
                                          "directive": "null",
                                          "step": {
                                            "AssertStep": {
                                              "cond": {
                                                "ExpressionCondition": {
                                                  "expr": {
                                                    "YetExpression": {
                                                      "str": "string",
                                                      "block": "null"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "SubStep": {
                                          "directive": "null",
                                          "step": {
                                            "SetStep": {
                                              "ref": {
                                                "PropertyReference": {
                                                  "PropertyReference": {
                                                    "base": {
                                                      "Variable": {
                                                        "Variable": {
                                                          "name": "string"
                                                        }
                                                      }
                                                    },
                                                    "prop": {
                                                      "FieldProperty": {
                                                        "FieldProperty": {
                                                          "name": "string"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              "expr": {
                                                "StringLiteral": {
                                                  "s": "string"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "SubStep": {
                                          "directive": "null",
                                          "step": {
                                            "PerformStep": {
                                              "expr": {
                                                "InvokeAbstractOperationExpression": {
                                                  "name": "string",
                                                  "args": [
                                                    {
                                                      "ReferenceExpression": {
                                                        "ref": {
                                                          "Variable": {
                                                            "Variable": {
                                                              "name": "string"
                                                            }
                                                          }
                                                        }
                                                      }
                                                    },
                                                    {
                                                      "ReferenceExpression": {
                                                        "ref": {
                                                          "Variable": {
                                                            "Variable": {
                                                              "name": "string"
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  ]
                                                }
                                              }
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "SubStep": {
                                          "directive": "null",
                                          "step": {
                                            "PerformStep": {
                                              "expr": {
                                                "InvokeAbstractOperationExpression": {
                                                  "name": "string",
                                                  "args": [
                                                    {
                                                      "ReferenceExpression": {
                                                        "ref": {
                                                          "Variable": {
                                                            "Variable": {
                                                              "name": "string"
                                                            }
                                                          }
                                                        }
                                                      }
                                                    },
                                                    {
                                                      "ReferenceExpression": {
                                                        "ref": {
                                                          "Variable": {
                                                            "Variable": {
                                                              "name": "string"
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  ]
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            },
                            "elseStep": "null"
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "PerformStep": {
                            "expr": {
                              "InvokeAbstractOperationExpression": {
                                "name": "string",
                                "args": [
                                  {
                                    "ReferenceExpression": {
                                      "ref": {
                                        "Variable": {
                                          "Variable": {
                                            "name": "string"
                                          }
                                        }
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "ReturnStep": {
                            "expr": {
                              "EnumLiteral": {
                                "name": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "EnqueueAtomicsWaitAsyncTimeoutJob"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "StringConcatExpression": {
            "exprs": [
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "Encode"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "CodeUnitAtExpression": {
            "base": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            },
            "index": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "Encode",
      "Decode",
      "CodePointAt"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeAbstractOperationExpression": {
                "name": "string",
                "args": [
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "TrueLiteral": {}
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "DoWait"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "MathFuncExpression": {
            "op": {
              "Max": {}
            },
            "args": [
              {
                "ConversionExpression": {
                  "op": {
                    "ToMath": {}
                  },
                  "expr": {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "DecimalMathValueLiteral": {
                  "n": "number"
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "DoWait"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "BinaryExpression": {
            "left": {
              "BinaryExpression": {
                "left": {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                },
                "op": {
                  "Mul": {}
                },
                "right": {
                  "DecimalMathValueLiteral": {
                    "n": "number"
                  }
                }
              }
            },
            "op": {
              "Add": {}
            },
            "right": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "DoWait"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "BinaryExpression": {
            "left": {
              "BinaryExpression": {
                "left": {
                  "ConversionExpression": {
                    "op": {
                      "ToMath": {}
                    },
                    "expr": {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "op": {
                  "Add": {}
                },
                "right": {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "op": {
              "Add": {}
            },
            "right": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "DoWait"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "RecordExpression": {
            "tname": "string",
            "fields": [
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              ],
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "TrueLiteral": {}
                }
              ],
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              ],
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "TrueLiteral": {}
                }
              ]
            ]
          }
        }
      }
    },
    "appearsIn": [
      "DefineMethodProperty"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "BinaryExpression": {
                  "left": {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  "op": {
                    "Add": {}
                  },
                  "right": {
                    "DecimalMathValueLiteral": {
                      "n": "number"
                    }
                  }
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "Decode"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ListExpression": {
            "entries": [
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "Decode"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "MathFuncExpression": {
            "op": {
              "Floor": {}
            },
            "args": [
              {
                "BinaryExpression": {
                  "left": {
                    "BinaryExpression": {
                      "left": {
                        "ReferenceExpression": {
                          "ref": {
                            "Variable": {
                              "Variable": {
                                "name": "string"
                              }
                            }
                          }
                        }
                      },
                      "op": {
                        "Sub": {}
                      },
                      "right": {
                        "DecimalMathValueLiteral": {
                          "n": "number"
                        }
                      }
                    }
                  },
                  "op": {
                    "Div": {}
                  },
                  "right": {
                    "DecimalMathValueLiteral": {
                      "n": "number"
                    }
                  }
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "DayFromYear"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "IntrinsicExpression": {
                  "intr": {
                    "Intrinsic": {
                      "base": "string",
                      "props": [
                        "string"
                      ]
                    }
                  }
                }
              },
              {
                "ListExpression": {
                  "entries": [
                    {
                      "FieldLiteral": {
                        "name": "string"
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "CreateUnmappedArgumentsObject"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ListExpression": {
            "entries": [
              {
                "DecimalMathValueLiteral": {
                  "n": "number"
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "CreateSharedByteDataBlock"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "params": [],
          "captured": [
            {
              "Variable": {
                "name": "string"
              }
            },
            {
              "Variable": {
                "name": "string"
              }
            }
          ],
          "body": {
            "BlockStep": {
              "block": {
                "StepBlock": {
                  "steps": [
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "LetStep": {
                            "variable": {
                              "Variable": {
                                "name": "string"
                              }
                            },
                            "expr": {
                              "DecimalMathValueLiteral": {
                                "n": "number"
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "LetStep": {
                            "variable": {
                              "Variable": {
                                "name": "string"
                              }
                            },
                            "expr": {
                              "ReferenceExpression": {
                                "ref": {
                                  "PropertyReference": {
                                    "PropertyReference": {
                                      "base": {
                                        "Variable": {
                                          "Variable": {
                                            "name": "string"
                                          }
                                        }
                                      },
                                      "prop": {
                                        "FieldProperty": {
                                          "FieldProperty": {
                                            "name": "string"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "LetStep": {
                            "variable": {
                              "Variable": {
                                "name": "string"
                              }
                            },
                            "expr": {
                              "NumberOfExpression": {
                                "expr": {
                                  "ReferenceExpression": {
                                    "ref": {
                                      "Variable": {
                                        "Variable": {
                                          "name": "string"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "RepeatStep": {
                            "cond": {
                              "BinaryCondition": {
                                "left": {
                                  "ReferenceExpression": {
                                    "ref": {
                                      "Variable": {
                                        "Variable": {
                                          "name": "string"
                                        }
                                      }
                                    }
                                  }
                                },
                                "op": {
                                  "LessThan": {}
                                },
                                "right": {
                                  "ReferenceExpression": {
                                    "ref": {
                                      "Variable": {
                                        "Variable": {
                                          "name": "string"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "body": {
                              "BlockStep": {
                                "block": {
                                  "StepBlock": {
                                    "steps": [
                                      {
                                        "SubStep": {
                                          "directive": "null",
                                          "step": {
                                            "LetStep": {
                                              "variable": {
                                                "Variable": {
                                                  "name": "string"
                                                }
                                              },
                                              "expr": {
                                                "ReferenceExpression": {
                                                  "ref": {
                                                    "PropertyReference": {
                                                      "PropertyReference": {
                                                        "base": {
                                                          "Variable": {
                                                            "Variable": {
                                                              "name": "string"
                                                            }
                                                          }
                                                        },
                                                        "prop": {
                                                          "IndexProperty": {
                                                            "IndexProperty": {
                                                              "index": {
                                                                "ReferenceExpression": {
                                                                  "ref": {
                                                                    "Variable": {
                                                                      "Variable": {
                                                                        "name": "string"
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "SubStep": {
                                          "directive": "null",
                                          "step": {
                                            "SetStep": {
                                              "ref": {
                                                "Variable": {
                                                  "Variable": {
                                                    "name": "string"
                                                  }
                                                }
                                              },
                                              "expr": {
                                                "BinaryExpression": {
                                                  "left": {
                                                    "ReferenceExpression": {
                                                      "ref": {
                                                        "Variable": {
                                                          "Variable": {
                                                            "name": "string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "op": {
                                                    "Add": {}
                                                  },
                                                  "right": {
                                                    "DecimalMathValueLiteral": {
                                                      "n": "number"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "SubStep": {
                                          "directive": "null",
                                          "step": {
                                            "IfStep": {
                                              "cond": {
                                                "IsAreCondition": {
                                                  "left": [
                                                    {
                                                      "ReferenceExpression": {
                                                        "ref": {
                                                          "Variable": {
                                                            "Variable": {
                                                              "name": "string"
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  ],
                                                  "negation": "boolean",
                                                  "right": [
                                                    {
                                                      "EnumLiteral": {
                                                        "name": "string"
                                                      }
                                                    }
                                                  ]
                                                }
                                              },
                                              "thenStep": {
                                                "BlockStep": {
                                                  "block": {
                                                    "StepBlock": {
                                                      "steps": [
                                                        {
                                                          "SubStep": {
                                                            "directive": "null",
                                                            "step": {
                                                              "IfStep": {
                                                                "cond": {
                                                                  "IsAreCondition": {
                                                                    "left": [
                                                                      {
                                                                        "ReferenceExpression": {
                                                                          "ref": {
                                                                            "Variable": {
                                                                              "Variable": {
                                                                                "name": "string"
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    ],
                                                                    "negation": "boolean",
                                                                    "right": [
                                                                      {
                                                                        "EnumLiteral": {
                                                                          "name": "string"
                                                                        }
                                                                      }
                                                                    ]
                                                                  }
                                                                },
                                                                "thenStep": {
                                                                  "BlockStep": {
                                                                    "block": {
                                                                      "StepBlock": {
                                                                        "steps": [
                                                                          {
                                                                            "SubStep": {
                                                                              "directive": "null",
                                                                              "step": {
                                                                                "LetStep": {
                                                                                  "variable": {
                                                                                    "Variable": {
                                                                                      "name": "string"
                                                                                    }
                                                                                  },
                                                                                  "expr": {
                                                                                    "InvokeAbstractOperationExpression": {
                                                                                      "name": "string",
                                                                                      "args": [
                                                                                        {
                                                                                          "ListExpression": {
                                                                                            "entries": [
                                                                                              {
                                                                                                "ReferenceExpression": {
                                                                                                  "ref": {
                                                                                                    "Variable": {
                                                                                                      "Variable": {
                                                                                                        "name": "string"
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              },
                                                                                              {
                                                                                                "ReferenceExpression": {
                                                                                                  "ref": {
                                                                                                    "Variable": {
                                                                                                      "Variable": {
                                                                                                        "name": "string"
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            ]
                                                                                          }
                                                                                        }
                                                                                      ]
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          },
                                                                          {
                                                                            "SubStep": {
                                                                              "directive": "null",
                                                                              "step": {
                                                                                "PerformStep": {
                                                                                  "expr": {
                                                                                    "ReturnIfAbruptExpression": {
                                                                                      "expr": {
                                                                                        "InvokeAbstractOperationExpression": {
                                                                                          "name": "string",
                                                                                          "args": [
                                                                                            {
                                                                                              "InvokeAbstractOperationExpression": {
                                                                                                "name": "string",
                                                                                                "args": [
                                                                                                  {
                                                                                                    "ReferenceExpression": {
                                                                                                      "ref": {
                                                                                                        "Variable": {
                                                                                                          "Variable": {
                                                                                                            "name": "string"
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  },
                                                                                                  {
                                                                                                    "FalseLiteral": {}
                                                                                                  }
                                                                                                ]
                                                                                              }
                                                                                            }
                                                                                          ]
                                                                                        }
                                                                                      },
                                                                                      "check": "boolean"
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        ]
                                                                      }
                                                                    }
                                                                  }
                                                                },
                                                                "elseStep": {
                                                                  "BlockStep": {
                                                                    "block": {
                                                                      "StepBlock": {
                                                                        "steps": [
                                                                          {
                                                                            "SubStep": {
                                                                              "directive": "null",
                                                                              "step": {
                                                                                "AssertStep": {
                                                                                  "cond": {
                                                                                    "IsAreCondition": {
                                                                                      "left": [
                                                                                        {
                                                                                          "ReferenceExpression": {
                                                                                            "ref": {
                                                                                              "Variable": {
                                                                                                "Variable": {
                                                                                                  "name": "string"
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      ],
                                                                                      "negation": "boolean",
                                                                                      "right": [
                                                                                        {
                                                                                          "EnumLiteral": {
                                                                                            "name": "string"
                                                                                          }
                                                                                        }
                                                                                      ]
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          },
                                                                          {
                                                                            "SubStep": {
                                                                              "directive": "null",
                                                                              "step": {
                                                                                "PerformStep": {
                                                                                  "expr": {
                                                                                    "ReturnIfAbruptExpression": {
                                                                                      "expr": {
                                                                                        "InvokeAbstractOperationExpression": {
                                                                                          "name": "string",
                                                                                          "args": [
                                                                                            {
                                                                                              "InvokeAbstractOperationExpression": {
                                                                                                "name": "string",
                                                                                                "args": [
                                                                                                  {
                                                                                                    "ReferenceExpression": {
                                                                                                      "ref": {
                                                                                                        "Variable": {
                                                                                                          "Variable": {
                                                                                                            "name": "string"
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  },
                                                                                                  {
                                                                                                    "FalseLiteral": {}
                                                                                                  }
                                                                                                ]
                                                                                              }
                                                                                            }
                                                                                          ]
                                                                                        }
                                                                                      },
                                                                                      "check": "boolean"
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        ]
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "SubStep": {
                                                            "directive": "null",
                                                            "step": {
                                                              "NoteStep": {
                                                                "note": "string"
                                                              }
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "SubStep": {
                                                            "directive": "null",
                                                            "step": {
                                                              "SetStep": {
                                                                "ref": {
                                                                  "Variable": {
                                                                    "Variable": {
                                                                      "name": "string"
                                                                    }
                                                                  }
                                                                },
                                                                "expr": {
                                                                  "NumberOfExpression": {
                                                                    "expr": {
                                                                      "ReferenceExpression": {
                                                                        "ref": {
                                                                          "Variable": {
                                                                            "Variable": {
                                                                              "name": "string"
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      ]
                                                    }
                                                  }
                                                }
                                              },
                                              "elseStep": "null"
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "ReturnStep": {
                            "expr": {
                              "InvokeAbstractOperationExpression": {
                                "name": "string",
                                "args": [
                                  {
                                    "UndefinedLiteral": {}
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "CreateSetIterator"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "StringLiteral": {
                  "s": "string"
                }
              },
              {
                "ListExpression": {
                  "entries": [
                    {
                      "FieldLiteral": {
                        "name": "string"
                      }
                    },
                    {
                      "FieldLiteral": {
                        "name": "string"
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "CreateResolvingFunctions"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "params": [],
          "captured": [
            {
              "Variable": {
                "name": "string"
              }
            },
            {
              "Variable": {
                "name": "string"
              }
            },
            {
              "Variable": {
                "name": "string"
              }
            },
            {
              "Variable": {
                "name": "string"
              }
            }
          ],
          "body": {
            "BlockStep": {
              "block": {
                "StepBlock": {
                  "steps": [
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "RepeatStep": {
                            "cond": "null",
                            "body": {
                              "BlockStep": {
                                "block": {
                                  "StepBlock": {
                                    "steps": [
                                      {
                                        "SubStep": {
                                          "directive": "null",
                                          "step": {
                                            "LetStep": {
                                              "variable": {
                                                "Variable": {
                                                  "name": "string"
                                                }
                                              },
                                              "expr": {
                                                "ReturnIfAbruptExpression": {
                                                  "expr": {
                                                    "InvokeAbstractOperationExpression": {
                                                      "name": "string",
                                                      "args": [
                                                        {
                                                          "ReferenceExpression": {
                                                            "ref": {
                                                              "Variable": {
                                                                "Variable": {
                                                                  "name": "string"
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "ReferenceExpression": {
                                                            "ref": {
                                                              "Variable": {
                                                                "Variable": {
                                                                  "name": "string"
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      ]
                                                    }
                                                  },
                                                  "check": "boolean"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "SubStep": {
                                          "directive": "null",
                                          "step": {
                                            "IfStep": {
                                              "cond": {
                                                "IsAreCondition": {
                                                  "left": [
                                                    {
                                                      "ReferenceExpression": {
                                                        "ref": {
                                                          "Variable": {
                                                            "Variable": {
                                                              "name": "string"
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  ],
                                                  "negation": "boolean",
                                                  "right": [
                                                    {
                                                      "NullLiteral": {}
                                                    }
                                                  ]
                                                }
                                              },
                                              "thenStep": {
                                                "ReturnStep": {
                                                  "expr": {
                                                    "UndefinedLiteral": {}
                                                  }
                                                }
                                              },
                                              "elseStep": "null"
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "SubStep": {
                                          "directive": "null",
                                          "step": {
                                            "IfStep": {
                                              "cond": {
                                                "IsAreCondition": {
                                                  "left": [
                                                    {
                                                      "ReferenceExpression": {
                                                        "ref": {
                                                          "Variable": {
                                                            "Variable": {
                                                              "name": "string"
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  ],
                                                  "negation": "boolean",
                                                  "right": [
                                                    {
                                                      "FalseLiteral": {}
                                                    }
                                                  ]
                                                }
                                              },
                                              "thenStep": {
                                                "BlockStep": {
                                                  "block": {
                                                    "StepBlock": {
                                                      "steps": [
                                                        {
                                                          "SubStep": {
                                                            "directive": "null",
                                                            "step": {
                                                              "PerformStep": {
                                                                "expr": {
                                                                  "ReturnIfAbruptExpression": {
                                                                    "expr": {
                                                                      "InvokeAbstractOperationExpression": {
                                                                        "name": "string",
                                                                        "args": [
                                                                          {
                                                                            "InvokeAbstractOperationExpression": {
                                                                              "name": "string",
                                                                              "args": [
                                                                                {
                                                                                  "ReferenceExpression": {
                                                                                    "ref": {
                                                                                      "Variable": {
                                                                                        "Variable": {
                                                                                          "name": "string"
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                },
                                                                                {
                                                                                  "FalseLiteral": {}
                                                                                }
                                                                              ]
                                                                            }
                                                                          }
                                                                        ]
                                                                      }
                                                                    },
                                                                    "check": "boolean"
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "SubStep": {
                                                            "directive": "null",
                                                            "step": {
                                                              "ReturnStep": {
                                                                "expr": {
                                                                  "UndefinedLiteral": {}
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      ]
                                                    }
                                                  }
                                                }
                                              },
                                              "elseStep": "null"
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "SubStep": {
                                          "directive": "null",
                                          "step": {
                                            "LetStep": {
                                              "variable": {
                                                "Variable": {
                                                  "name": "string"
                                                }
                                              },
                                              "expr": {
                                                "ReturnIfAbruptExpression": {
                                                  "expr": {
                                                    "InvokeAbstractOperationExpression": {
                                                      "name": "string",
                                                      "args": [
                                                        {
                                                          "ReturnIfAbruptExpression": {
                                                            "expr": {
                                                              "InvokeAbstractOperationExpression": {
                                                                "name": "string",
                                                                "args": [
                                                                  {
                                                                    "ReferenceExpression": {
                                                                      "ref": {
                                                                        "Variable": {
                                                                          "Variable": {
                                                                            "name": "string"
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  },
                                                                  {
                                                                    "StringLiteral": {
                                                                      "s": "string"
                                                                    }
                                                                  }
                                                                ]
                                                              }
                                                            },
                                                            "check": "boolean"
                                                          }
                                                        }
                                                      ]
                                                    }
                                                  },
                                                  "check": "boolean"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "SubStep": {
                                          "directive": "null",
                                          "step": {
                                            "IfStep": {
                                              "cond": {
                                                "IsAreCondition": {
                                                  "left": [
                                                    {
                                                      "ReferenceExpression": {
                                                        "ref": {
                                                          "Variable": {
                                                            "Variable": {
                                                              "name": "string"
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  ],
                                                  "negation": "boolean",
                                                  "right": [
                                                    {
                                                      "StringLiteral": {
                                                        "s": "string"
                                                      }
                                                    }
                                                  ]
                                                }
                                              },
                                              "thenStep": {
                                                "BlockStep": {
                                                  "block": {
                                                    "StepBlock": {
                                                      "steps": [
                                                        {
                                                          "SubStep": {
                                                            "directive": "null",
                                                            "step": {
                                                              "LetStep": {
                                                                "variable": {
                                                                  "Variable": {
                                                                    "name": "string"
                                                                  }
                                                                },
                                                                "expr": {
                                                                  "ConversionExpression": {
                                                                    "op": {
                                                                      "ToMath": {}
                                                                    },
                                                                    "expr": {
                                                                      "ReturnIfAbruptExpression": {
                                                                        "expr": {
                                                                          "InvokeAbstractOperationExpression": {
                                                                            "name": "string",
                                                                            "args": [
                                                                              {
                                                                                "ReturnIfAbruptExpression": {
                                                                                  "expr": {
                                                                                    "InvokeAbstractOperationExpression": {
                                                                                      "name": "string",
                                                                                      "args": [
                                                                                        {
                                                                                          "ReferenceExpression": {
                                                                                            "ref": {
                                                                                              "Variable": {
                                                                                                "Variable": {
                                                                                                  "name": "string"
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        },
                                                                                        {
                                                                                          "StringLiteral": {
                                                                                            "s": "string"
                                                                                          }
                                                                                        }
                                                                                      ]
                                                                                    }
                                                                                  },
                                                                                  "check": "boolean"
                                                                                }
                                                                              }
                                                                            ]
                                                                          }
                                                                        },
                                                                        "check": "boolean"
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "SubStep": {
                                                            "directive": "null",
                                                            "step": {
                                                              "LetStep": {
                                                                "variable": {
                                                                  "Variable": {
                                                                    "name": "string"
                                                                  }
                                                                },
                                                                "expr": {
                                                                  "InvokeAbstractOperationExpression": {
                                                                    "name": "string",
                                                                    "args": [
                                                                      {
                                                                        "ReferenceExpression": {
                                                                          "ref": {
                                                                            "Variable": {
                                                                              "Variable": {
                                                                                "name": "string"
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      },
                                                                      {
                                                                        "ReferenceExpression": {
                                                                          "ref": {
                                                                            "Variable": {
                                                                              "Variable": {
                                                                                "name": "string"
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      },
                                                                      {
                                                                        "ReferenceExpression": {
                                                                          "ref": {
                                                                            "Variable": {
                                                                              "Variable": {
                                                                                "name": "string"
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    ]
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "SubStep": {
                                                            "directive": "null",
                                                            "step": {
                                                              "PerformStep": {
                                                                "expr": {
                                                                  "ReturnIfAbruptExpression": {
                                                                    "expr": {
                                                                      "InvokeAbstractOperationExpression": {
                                                                        "name": "string",
                                                                        "args": [
                                                                          {
                                                                            "ReferenceExpression": {
                                                                              "ref": {
                                                                                "Variable": {
                                                                                  "Variable": {
                                                                                    "name": "string"
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          },
                                                                          {
                                                                            "StringLiteral": {
                                                                              "s": "string"
                                                                            }
                                                                          },
                                                                          {
                                                                            "ConversionExpression": {
                                                                              "op": {
                                                                                "ToNumber": {}
                                                                              },
                                                                              "expr": {
                                                                                "ReferenceExpression": {
                                                                                  "ref": {
                                                                                    "Variable": {
                                                                                      "Variable": {
                                                                                        "name": "string"
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          },
                                                                          {
                                                                            "TrueLiteral": {}
                                                                          }
                                                                        ]
                                                                      }
                                                                    },
                                                                    "check": "boolean"
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      ]
                                                    }
                                                  }
                                                }
                                              },
                                              "elseStep": "null"
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "SubStep": {
                                          "directive": "null",
                                          "step": {
                                            "PerformStep": {
                                              "expr": {
                                                "ReturnIfAbruptExpression": {
                                                  "expr": {
                                                    "InvokeAbstractOperationExpression": {
                                                      "name": "string",
                                                      "args": [
                                                        {
                                                          "InvokeAbstractOperationExpression": {
                                                            "name": "string",
                                                            "args": [
                                                              {
                                                                "ReferenceExpression": {
                                                                  "ref": {
                                                                    "Variable": {
                                                                      "Variable": {
                                                                        "name": "string"
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              },
                                                              {
                                                                "FalseLiteral": {}
                                                              }
                                                            ]
                                                          }
                                                        }
                                                      ]
                                                    }
                                                  },
                                                  "check": "boolean"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "CreateRegExpStringIterator"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeMethodExpression": {
                "ref": {
                  "PropertyReference": {
                    "base": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    },
                    "prop": {
                      "ComponentProperty": {
                        "ComponentProperty": {
                          "name": "string"
                        }
                      }
                    }
                  }
                },
                "args": [
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "TrueLiteral": {}
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "CreatePerIterationEnvironment"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "RecordExpression": {
            "tname": "string",
            "fields": [
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              ],
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "TrueLiteral": {}
                }
              ],
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "FalseLiteral": {}
                }
              ],
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "TrueLiteral": {}
                }
              ]
            ]
          }
        }
      }
    },
    "appearsIn": [
      "CreateNonEnumerableDataPropertyOrThrow"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "params": [],
          "captured": [
            {
              "Variable": {
                "name": "string"
              }
            },
            {
              "Variable": {
                "name": "string"
              }
            }
          ],
          "body": {
            "BlockStep": {
              "block": {
                "StepBlock": {
                  "steps": [
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "LetStep": {
                            "variable": {
                              "Variable": {
                                "name": "string"
                              }
                            },
                            "expr": {
                              "ReferenceExpression": {
                                "ref": {
                                  "PropertyReference": {
                                    "PropertyReference": {
                                      "base": {
                                        "Variable": {
                                          "Variable": {
                                            "name": "string"
                                          }
                                        }
                                      },
                                      "prop": {
                                        "FieldProperty": {
                                          "FieldProperty": {
                                            "name": "string"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "LetStep": {
                            "variable": {
                              "Variable": {
                                "name": "string"
                              }
                            },
                            "expr": {
                              "DecimalMathValueLiteral": {
                                "n": "number"
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "LetStep": {
                            "variable": {
                              "Variable": {
                                "name": "string"
                              }
                            },
                            "expr": {
                              "NumberOfExpression": {
                                "expr": {
                                  "ReferenceExpression": {
                                    "ref": {
                                      "Variable": {
                                        "Variable": {
                                          "name": "string"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "RepeatStep": {
                            "cond": {
                              "BinaryCondition": {
                                "left": {
                                  "ReferenceExpression": {
                                    "ref": {
                                      "Variable": {
                                        "Variable": {
                                          "name": "string"
                                        }
                                      }
                                    }
                                  }
                                },
                                "op": {
                                  "LessThan": {}
                                },
                                "right": {
                                  "ReferenceExpression": {
                                    "ref": {
                                      "Variable": {
                                        "Variable": {
                                          "name": "string"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "body": {
                              "BlockStep": {
                                "block": {
                                  "StepBlock": {
                                    "steps": [
                                      {
                                        "SubStep": {
                                          "directive": "null",
                                          "step": {
                                            "LetStep": {
                                              "variable": {
                                                "Variable": {
                                                  "name": "string"
                                                }
                                              },
                                              "expr": {
                                                "ReferenceExpression": {
                                                  "ref": {
                                                    "PropertyReference": {
                                                      "PropertyReference": {
                                                        "base": {
                                                          "Variable": {
                                                            "Variable": {
                                                              "name": "string"
                                                            }
                                                          }
                                                        },
                                                        "prop": {
                                                          "IndexProperty": {
                                                            "IndexProperty": {
                                                              "index": {
                                                                "ReferenceExpression": {
                                                                  "ref": {
                                                                    "Variable": {
                                                                      "Variable": {
                                                                        "name": "string"
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "SubStep": {
                                          "directive": "null",
                                          "step": {
                                            "SetStep": {
                                              "ref": {
                                                "Variable": {
                                                  "Variable": {
                                                    "name": "string"
                                                  }
                                                }
                                              },
                                              "expr": {
                                                "BinaryExpression": {
                                                  "left": {
                                                    "ReferenceExpression": {
                                                      "ref": {
                                                        "Variable": {
                                                          "Variable": {
                                                            "name": "string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "op": {
                                                    "Add": {}
                                                  },
                                                  "right": {
                                                    "DecimalMathValueLiteral": {
                                                      "n": "number"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "SubStep": {
                                          "directive": "null",
                                          "step": {
                                            "IfStep": {
                                              "cond": {
                                                "IsAreCondition": {
                                                  "left": [
                                                    {
                                                      "ReferenceExpression": {
                                                        "ref": {
                                                          "PropertyReference": {
                                                            "PropertyReference": {
                                                              "base": {
                                                                "Variable": {
                                                                  "Variable": {
                                                                    "name": "string"
                                                                  }
                                                                }
                                                              },
                                                              "prop": {
                                                                "FieldProperty": {
                                                                  "FieldProperty": {
                                                                    "name": "string"
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  ],
                                                  "negation": "boolean",
                                                  "right": [
                                                    {
                                                      "EnumLiteral": {
                                                        "name": "string"
                                                      }
                                                    }
                                                  ]
                                                }
                                              },
                                              "thenStep": {
                                                "BlockStep": {
                                                  "block": {
                                                    "StepBlock": {
                                                      "steps": [
                                                        {
                                                          "SubStep": {
                                                            "directive": "null",
                                                            "step": {
                                                              "IfStep": {
                                                                "cond": {
                                                                  "IsAreCondition": {
                                                                    "left": [
                                                                      {
                                                                        "ReferenceExpression": {
                                                                          "ref": {
                                                                            "Variable": {
                                                                              "Variable": {
                                                                                "name": "string"
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    ],
                                                                    "negation": "boolean",
                                                                    "right": [
                                                                      {
                                                                        "EnumLiteral": {
                                                                          "name": "string"
                                                                        }
                                                                      }
                                                                    ]
                                                                  }
                                                                },
                                                                "thenStep": {
                                                                  "BlockStep": {
                                                                    "block": {
                                                                      "StepBlock": {
                                                                        "steps": [
                                                                          {
                                                                            "SubStep": {
                                                                              "directive": "null",
                                                                              "step": {
                                                                                "LetStep": {
                                                                                  "variable": {
                                                                                    "Variable": {
                                                                                      "name": "string"
                                                                                    }
                                                                                  },
                                                                                  "expr": {
                                                                                    "ReferenceExpression": {
                                                                                      "ref": {
                                                                                        "PropertyReference": {
                                                                                          "PropertyReference": {
                                                                                            "base": {
                                                                                              "Variable": {
                                                                                                "Variable": {
                                                                                                  "name": "string"
                                                                                                }
                                                                                              }
                                                                                            },
                                                                                            "prop": {
                                                                                              "FieldProperty": {
                                                                                                "FieldProperty": {
                                                                                                  "name": "string"
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        ]
                                                                      }
                                                                    }
                                                                  }
                                                                },
                                                                "elseStep": {
                                                                  "IfStep": {
                                                                    "cond": {
                                                                      "IsAreCondition": {
                                                                        "left": [
                                                                          {
                                                                            "ReferenceExpression": {
                                                                              "ref": {
                                                                                "Variable": {
                                                                                  "Variable": {
                                                                                    "name": "string"
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        ],
                                                                        "negation": "boolean",
                                                                        "right": [
                                                                          {
                                                                            "EnumLiteral": {
                                                                              "name": "string"
                                                                            }
                                                                          }
                                                                        ]
                                                                      }
                                                                    },
                                                                    "thenStep": {
                                                                      "BlockStep": {
                                                                        "block": {
                                                                          "StepBlock": {
                                                                            "steps": [
                                                                              {
                                                                                "SubStep": {
                                                                                  "directive": "null",
                                                                                  "step": {
                                                                                    "LetStep": {
                                                                                      "variable": {
                                                                                        "Variable": {
                                                                                          "name": "string"
                                                                                        }
                                                                                      },
                                                                                      "expr": {
                                                                                        "ReferenceExpression": {
                                                                                          "ref": {
                                                                                            "PropertyReference": {
                                                                                              "PropertyReference": {
                                                                                                "base": {
                                                                                                  "Variable": {
                                                                                                    "Variable": {
                                                                                                      "name": "string"
                                                                                                    }
                                                                                                  }
                                                                                                },
                                                                                                "prop": {
                                                                                                  "FieldProperty": {
                                                                                                    "FieldProperty": {
                                                                                                      "name": "string"
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            ]
                                                                          }
                                                                        }
                                                                      }
                                                                    },
                                                                    "elseStep": {
                                                                      "BlockStep": {
                                                                        "block": {
                                                                          "StepBlock": {
                                                                            "steps": [
                                                                              {
                                                                                "SubStep": {
                                                                                  "directive": "null",
                                                                                  "step": {
                                                                                    "AssertStep": {
                                                                                      "cond": {
                                                                                        "IsAreCondition": {
                                                                                          "left": [
                                                                                            {
                                                                                              "ReferenceExpression": {
                                                                                                "ref": {
                                                                                                  "Variable": {
                                                                                                    "Variable": {
                                                                                                      "name": "string"
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          ],
                                                                                          "negation": "boolean",
                                                                                          "right": [
                                                                                            {
                                                                                              "EnumLiteral": {
                                                                                                "name": "string"
                                                                                              }
                                                                                            }
                                                                                          ]
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              },
                                                                              {
                                                                                "SubStep": {
                                                                                  "directive": "null",
                                                                                  "step": {
                                                                                    "LetStep": {
                                                                                      "variable": {
                                                                                        "Variable": {
                                                                                          "name": "string"
                                                                                        }
                                                                                      },
                                                                                      "expr": {
                                                                                        "InvokeAbstractOperationExpression": {
                                                                                          "name": "string",
                                                                                          "args": [
                                                                                            {
                                                                                              "ListExpression": {
                                                                                                "entries": [
                                                                                                  {
                                                                                                    "ReferenceExpression": {
                                                                                                      "ref": {
                                                                                                        "PropertyReference": {
                                                                                                          "PropertyReference": {
                                                                                                            "base": {
                                                                                                              "Variable": {
                                                                                                                "Variable": {
                                                                                                                  "name": "string"
                                                                                                                }
                                                                                                              }
                                                                                                            },
                                                                                                            "prop": {
                                                                                                              "FieldProperty": {
                                                                                                                "FieldProperty": {
                                                                                                                  "name": "string"
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  },
                                                                                                  {
                                                                                                    "ReferenceExpression": {
                                                                                                      "ref": {
                                                                                                        "PropertyReference": {
                                                                                                          "PropertyReference": {
                                                                                                            "base": {
                                                                                                              "Variable": {
                                                                                                                "Variable": {
                                                                                                                  "name": "string"
                                                                                                                }
                                                                                                              }
                                                                                                            },
                                                                                                            "prop": {
                                                                                                              "FieldProperty": {
                                                                                                                "FieldProperty": {
                                                                                                                  "name": "string"
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                ]
                                                                                              }
                                                                                            }
                                                                                          ]
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            ]
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "SubStep": {
                                                            "directive": "null",
                                                            "step": {
                                                              "PerformStep": {
                                                                "expr": {
                                                                  "ReturnIfAbruptExpression": {
                                                                    "expr": {
                                                                      "InvokeAbstractOperationExpression": {
                                                                        "name": "string",
                                                                        "args": [
                                                                          {
                                                                            "InvokeAbstractOperationExpression": {
                                                                              "name": "string",
                                                                              "args": [
                                                                                {
                                                                                  "ReferenceExpression": {
                                                                                    "ref": {
                                                                                      "Variable": {
                                                                                        "Variable": {
                                                                                          "name": "string"
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                },
                                                                                {
                                                                                  "FalseLiteral": {}
                                                                                }
                                                                              ]
                                                                            }
                                                                          }
                                                                        ]
                                                                      }
                                                                    },
                                                                    "check": "boolean"
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "SubStep": {
                                                            "directive": "null",
                                                            "step": {
                                                              "NoteStep": {
                                                                "note": "string"
                                                              }
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "SubStep": {
                                                            "directive": "null",
                                                            "step": {
                                                              "SetStep": {
                                                                "ref": {
                                                                  "Variable": {
                                                                    "Variable": {
                                                                      "name": "string"
                                                                    }
                                                                  }
                                                                },
                                                                "expr": {
                                                                  "NumberOfExpression": {
                                                                    "expr": {
                                                                      "ReferenceExpression": {
                                                                        "ref": {
                                                                          "Variable": {
                                                                            "Variable": {
                                                                              "name": "string"
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      ]
                                                    }
                                                  }
                                                }
                                              },
                                              "elseStep": "null"
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "ReturnStep": {
                            "expr": {
                              "InvokeAbstractOperationExpression": {
                                "name": "string",
                                "args": [
                                  {
                                    "UndefinedLiteral": {}
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "CreateMapIterator"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "ListExpression": {
                  "entries": [
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "PropertyReference": {
                            "PropertyReference": {
                              "base": {
                                "Variable": {
                                  "Variable": {
                                    "name": "string"
                                  }
                                }
                              },
                              "prop": {
                                "FieldProperty": {
                                  "FieldProperty": {
                                    "name": "string"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "PropertyReference": {
                            "PropertyReference": {
                              "base": {
                                "Variable": {
                                  "Variable": {
                                    "name": "string"
                                  }
                                }
                              },
                              "prop": {
                                "FieldProperty": {
                                  "FieldProperty": {
                                    "name": "string"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "CreateMapIterator"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "params": [],
          "captured": [
            {
              "Variable": {
                "name": "string"
              }
            }
          ],
          "body": {
            "BlockStep": {
              "block": {
                "StepBlock": {
                  "steps": [
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "ForEachStep": {
                            "ty": "null",
                            "variable": {
                              "Variable": {
                                "name": "string"
                              }
                            },
                            "expr": {
                              "ReferenceExpression": {
                                "ref": {
                                  "Variable": {
                                    "Variable": {
                                      "name": "string"
                                    }
                                  }
                                }
                              }
                            },
                            "ascending": "boolean",
                            "body": {
                              "BlockStep": {
                                "block": {
                                  "StepBlock": {
                                    "steps": [
                                      {
                                        "SubStep": {
                                          "directive": "null",
                                          "step": {
                                            "PerformStep": {
                                              "expr": {
                                                "ReturnIfAbruptExpression": {
                                                  "expr": {
                                                    "InvokeAbstractOperationExpression": {
                                                      "name": "string",
                                                      "args": [
                                                        {
                                                          "InvokeAbstractOperationExpression": {
                                                            "name": "string",
                                                            "args": [
                                                              {
                                                                "ReferenceExpression": {
                                                                  "ref": {
                                                                    "Variable": {
                                                                      "Variable": {
                                                                        "name": "string"
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              },
                                                              {
                                                                "FalseLiteral": {}
                                                              }
                                                            ]
                                                          }
                                                        }
                                                      ]
                                                    }
                                                  },
                                                  "check": "boolean"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "ReturnStep": {
                            "expr": {
                              "InvokeAbstractOperationExpression": {
                                "name": "string",
                                "args": [
                                  {
                                    "UndefinedLiteral": {}
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "CreateListIteratorRecord"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "EnumLiteral": {
                  "name": "string"
                }
              },
              {
                "IntrinsicExpression": {
                  "intr": {
                    "Intrinsic": {
                      "base": "string",
                      "props": []
                    }
                  }
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "CreateListIteratorRecord"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ListExpression": {
            "entries": [
              {
                "FieldLiteral": {
                  "name": "string"
                }
              },
              {
                "FieldLiteral": {
                  "name": "string"
                }
              },
              {
                "FieldLiteral": {
                  "name": "string"
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "CreateIteratorFromClosure",
      "AllocateArrayBuffer"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "IntrinsicExpression": {
                  "intr": {
                    "Intrinsic": {
                      "base": "string",
                      "props": []
                    }
                  }
                }
              },
              {
                "ListExpression": {
                  "entries": [
                    {
                      "FieldLiteral": {
                        "name": "string"
                      }
                    },
                    {
                      "FieldLiteral": {
                        "name": "string"
                      }
                    },
                    {
                      "FieldLiteral": {
                        "name": "string"
                      }
                    },
                    {
                      "FieldLiteral": {
                        "name": "string"
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "CreateForInIterator"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "GrammarSymbolLiteral": {
            "name": "string",
            "flags": []
          }
        }
      }
    },
    "appearsIn": [
      "CreateDynamicFunction"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "GrammarSymbolLiteral": {
            "name": "string",
            "flags": [
              "string",
              "string"
            ]
          }
        }
      }
    },
    "appearsIn": [
      "CreateDynamicFunction"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "StringConcatExpression": {
            "exprs": [
              {
                "HexLiteral": {
                  "hex": "number",
                  "name": "string"
                }
              },
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "HexLiteral": {
                  "hex": "number",
                  "name": "string"
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "CreateDynamicFunction"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "StringConcatExpression": {
            "exprs": [
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "StringLiteral": {
                  "s": "string"
                }
              },
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "HexLiteral": {
                  "hex": "number",
                  "name": "string"
                }
              },
              {
                "StringLiteral": {
                  "s": "string"
                }
              },
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "StringLiteral": {
                  "s": "string"
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "CreateDynamicFunction"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "InvokeAbstractOperationExpression": {
                  "name": "string",
                  "args": [
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              },
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "CreateDynamicFunction"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "EnumLiteral": {
                  "name": "string"
                }
              },
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "CreateDynamicFunction"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "IntrinsicExpression": {
                  "intr": {
                    "Intrinsic": {
                      "base": "string",
                      "props": [
                        "string",
                        "string"
                      ]
                    }
                  }
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "CreateDynamicFunction"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "RecordExpression": {
            "tname": "string",
            "fields": [
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              ],
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "TrueLiteral": {}
                }
              ],
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "TrueLiteral": {}
                }
              ],
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "TrueLiteral": {}
                }
              ]
            ]
          }
        }
      }
    },
    "appearsIn": [
      "CreateDataProperty"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ListExpression": {
            "entries": [
              {
                "FieldLiteral": {
                  "name": "string"
                }
              },
              {
                "FieldLiteral": {
                  "name": "string"
                }
              },
              {
                "FieldLiteral": {
                  "name": "string"
                }
              },
              {
                "FieldLiteral": {
                  "name": "string"
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "CreateAsyncIteratorFromClosure"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "IntrinsicExpression": {
                  "intr": {
                    "Intrinsic": {
                      "base": "string",
                      "props": []
                    }
                  }
                }
              },
              {
                "ListExpression": {
                  "entries": [
                    {
                      "FieldLiteral": {
                        "name": "string"
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "CreateAsyncFromSyncIterator"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "params": [],
          "captured": [
            {
              "Variable": {
                "name": "string"
              }
            },
            {
              "Variable": {
                "name": "string"
              }
            }
          ],
          "body": {
            "BlockStep": {
              "block": {
                "StepBlock": {
                  "steps": [
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "LetStep": {
                            "variable": {
                              "Variable": {
                                "name": "string"
                              }
                            },
                            "expr": {
                              "DecimalMathValueLiteral": {
                                "n": "number"
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "RepeatStep": {
                            "cond": "null",
                            "body": {
                              "BlockStep": {
                                "block": {
                                  "StepBlock": {
                                    "steps": [
                                      {
                                        "SubStep": {
                                          "directive": "null",
                                          "step": {
                                            "IfStep": {
                                              "cond": {
                                                "HasFieldCondition": {
                                                  "ref": {
                                                    "Variable": {
                                                      "Variable": {
                                                        "name": "string"
                                                      }
                                                    }
                                                  },
                                                  "negation": "boolean",
                                                  "field": {
                                                    "FieldLiteral": {
                                                      "name": "string"
                                                    }
                                                  }
                                                }
                                              },
                                              "thenStep": {
                                                "BlockStep": {
                                                  "block": {
                                                    "StepBlock": {
                                                      "steps": [
                                                        {
                                                          "SubStep": {
                                                            "directive": "null",
                                                            "step": {
                                                              "LetStep": {
                                                                "variable": {
                                                                  "Variable": {
                                                                    "name": "string"
                                                                  }
                                                                },
                                                                "expr": {
                                                                  "InvokeAbstractOperationExpression": {
                                                                    "name": "string",
                                                                    "args": [
                                                                      {
                                                                        "ReferenceExpression": {
                                                                          "ref": {
                                                                            "Variable": {
                                                                              "Variable": {
                                                                                "name": "string"
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      },
                                                                      {
                                                                        "EnumLiteral": {
                                                                          "name": "string"
                                                                        }
                                                                      }
                                                                    ]
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "SubStep": {
                                                            "directive": "null",
                                                            "step": {
                                                              "IfStep": {
                                                                "cond": {
                                                                  "IsAreCondition": {
                                                                    "left": [
                                                                      {
                                                                        "InvokeAbstractOperationExpression": {
                                                                          "name": "string",
                                                                          "args": [
                                                                            {
                                                                              "ReferenceExpression": {
                                                                                "ref": {
                                                                                  "Variable": {
                                                                                    "Variable": {
                                                                                      "name": "string"
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          ]
                                                                        }
                                                                      }
                                                                    ],
                                                                    "negation": "boolean",
                                                                    "right": [
                                                                      {
                                                                        "TrueLiteral": {}
                                                                      }
                                                                    ]
                                                                  }
                                                                },
                                                                "thenStep": {
                                                                  "ThrowStep": {
                                                                    "name": "string"
                                                                  }
                                                                },
                                                                "elseStep": "null"
                                                              }
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "SubStep": {
                                                            "directive": "null",
                                                            "step": {
                                                              "LetStep": {
                                                                "variable": {
                                                                  "Variable": {
                                                                    "name": "string"
                                                                  }
                                                                },
                                                                "expr": {
                                                                  "InvokeAbstractOperationExpression": {
                                                                    "name": "string",
                                                                    "args": [
                                                                      {
                                                                        "ReferenceExpression": {
                                                                          "ref": {
                                                                            "Variable": {
                                                                              "Variable": {
                                                                                "name": "string"
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    ]
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      ]
                                                    }
                                                  }
                                                }
                                              },
                                              "elseStep": {
                                                "BlockStep": {
                                                  "block": {
                                                    "StepBlock": {
                                                      "steps": [
                                                        {
                                                          "SubStep": {
                                                            "directive": "null",
                                                            "step": {
                                                              "LetStep": {
                                                                "variable": {
                                                                  "Variable": {
                                                                    "name": "string"
                                                                  }
                                                                },
                                                                "expr": {
                                                                  "ReturnIfAbruptExpression": {
                                                                    "expr": {
                                                                      "InvokeAbstractOperationExpression": {
                                                                        "name": "string",
                                                                        "args": [
                                                                          {
                                                                            "ReferenceExpression": {
                                                                              "ref": {
                                                                                "Variable": {
                                                                                  "Variable": {
                                                                                    "name": "string"
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        ]
                                                                      }
                                                                    },
                                                                    "check": "boolean"
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      ]
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "SubStep": {
                                          "directive": "null",
                                          "step": {
                                            "IfStep": {
                                              "cond": {
                                                "BinaryCondition": {
                                                  "left": {
                                                    "ReferenceExpression": {
                                                      "ref": {
                                                        "Variable": {
                                                          "Variable": {
                                                            "name": "string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "op": {
                                                    "GreaterThanEqual": {}
                                                  },
                                                  "right": {
                                                    "ReferenceExpression": {
                                                      "ref": {
                                                        "Variable": {
                                                          "Variable": {
                                                            "name": "string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              "thenStep": {
                                                "ReturnStep": {
                                                  "expr": {
                                                    "InvokeAbstractOperationExpression": {
                                                      "name": "string",
                                                      "args": [
                                                        {
                                                          "UndefinedLiteral": {}
                                                        }
                                                      ]
                                                    }
                                                  }
                                                }
                                              },
                                              "elseStep": "null"
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "SubStep": {
                                          "directive": "null",
                                          "step": {
                                            "LetStep": {
                                              "variable": {
                                                "Variable": {
                                                  "name": "string"
                                                }
                                              },
                                              "expr": {
                                                "ConversionExpression": {
                                                  "op": {
                                                    "ToNumber": {}
                                                  },
                                                  "expr": {
                                                    "ReferenceExpression": {
                                                      "ref": {
                                                        "Variable": {
                                                          "Variable": {
                                                            "name": "string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "SubStep": {
                                          "directive": "null",
                                          "step": {
                                            "IfStep": {
                                              "cond": {
                                                "IsAreCondition": {
                                                  "left": [
                                                    {
                                                      "ReferenceExpression": {
                                                        "ref": {
                                                          "Variable": {
                                                            "Variable": {
                                                              "name": "string"
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  ],
                                                  "negation": "boolean",
                                                  "right": [
                                                    {
                                                      "EnumLiteral": {
                                                        "name": "string"
                                                      }
                                                    }
                                                  ]
                                                }
                                              },
                                              "thenStep": {
                                                "BlockStep": {
                                                  "block": {
                                                    "StepBlock": {
                                                      "steps": [
                                                        {
                                                          "SubStep": {
                                                            "directive": "null",
                                                            "step": {
                                                              "LetStep": {
                                                                "variable": {
                                                                  "Variable": {
                                                                    "name": "string"
                                                                  }
                                                                },
                                                                "expr": {
                                                                  "ReferenceExpression": {
                                                                    "ref": {
                                                                      "Variable": {
                                                                        "Variable": {
                                                                          "name": "string"
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      ]
                                                    }
                                                  }
                                                }
                                              },
                                              "elseStep": {
                                                "BlockStep": {
                                                  "block": {
                                                    "StepBlock": {
                                                      "steps": [
                                                        {
                                                          "SubStep": {
                                                            "directive": "null",
                                                            "step": {
                                                              "LetStep": {
                                                                "variable": {
                                                                  "Variable": {
                                                                    "name": "string"
                                                                  }
                                                                },
                                                                "expr": {
                                                                  "ReturnIfAbruptExpression": {
                                                                    "expr": {
                                                                      "InvokeAbstractOperationExpression": {
                                                                        "name": "string",
                                                                        "args": [
                                                                          {
                                                                            "ReferenceExpression": {
                                                                              "ref": {
                                                                                "Variable": {
                                                                                  "Variable": {
                                                                                    "name": "string"
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        ]
                                                                      }
                                                                    },
                                                                    "check": "boolean"
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "SubStep": {
                                                            "directive": "null",
                                                            "step": {
                                                              "LetStep": {
                                                                "variable": {
                                                                  "Variable": {
                                                                    "name": "string"
                                                                  }
                                                                },
                                                                "expr": {
                                                                  "ReturnIfAbruptExpression": {
                                                                    "expr": {
                                                                      "InvokeAbstractOperationExpression": {
                                                                        "name": "string",
                                                                        "args": [
                                                                          {
                                                                            "ReferenceExpression": {
                                                                              "ref": {
                                                                                "Variable": {
                                                                                  "Variable": {
                                                                                    "name": "string"
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          },
                                                                          {
                                                                            "ReferenceExpression": {
                                                                              "ref": {
                                                                                "Variable": {
                                                                                  "Variable": {
                                                                                    "name": "string"
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        ]
                                                                      }
                                                                    },
                                                                    "check": "boolean"
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "SubStep": {
                                                            "directive": "null",
                                                            "step": {
                                                              "IfStep": {
                                                                "cond": {
                                                                  "IsAreCondition": {
                                                                    "left": [
                                                                      {
                                                                        "ReferenceExpression": {
                                                                          "ref": {
                                                                            "Variable": {
                                                                              "Variable": {
                                                                                "name": "string"
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    ],
                                                                    "negation": "boolean",
                                                                    "right": [
                                                                      {
                                                                        "EnumLiteral": {
                                                                          "name": "string"
                                                                        }
                                                                      }
                                                                    ]
                                                                  }
                                                                },
                                                                "thenStep": {
                                                                  "BlockStep": {
                                                                    "block": {
                                                                      "StepBlock": {
                                                                        "steps": [
                                                                          {
                                                                            "SubStep": {
                                                                              "directive": "null",
                                                                              "step": {
                                                                                "LetStep": {
                                                                                  "variable": {
                                                                                    "Variable": {
                                                                                      "name": "string"
                                                                                    }
                                                                                  },
                                                                                  "expr": {
                                                                                    "ReferenceExpression": {
                                                                                      "ref": {
                                                                                        "Variable": {
                                                                                          "Variable": {
                                                                                            "name": "string"
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        ]
                                                                      }
                                                                    }
                                                                  }
                                                                },
                                                                "elseStep": {
                                                                  "BlockStep": {
                                                                    "block": {
                                                                      "StepBlock": {
                                                                        "steps": [
                                                                          {
                                                                            "SubStep": {
                                                                              "directive": "null",
                                                                              "step": {
                                                                                "AssertStep": {
                                                                                  "cond": {
                                                                                    "IsAreCondition": {
                                                                                      "left": [
                                                                                        {
                                                                                          "ReferenceExpression": {
                                                                                            "ref": {
                                                                                              "Variable": {
                                                                                                "Variable": {
                                                                                                  "name": "string"
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      ],
                                                                                      "negation": "boolean",
                                                                                      "right": [
                                                                                        {
                                                                                          "EnumLiteral": {
                                                                                            "name": "string"
                                                                                          }
                                                                                        }
                                                                                      ]
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          },
                                                                          {
                                                                            "SubStep": {
                                                                              "directive": "null",
                                                                              "step": {
                                                                                "LetStep": {
                                                                                  "variable": {
                                                                                    "Variable": {
                                                                                      "name": "string"
                                                                                    }
                                                                                  },
                                                                                  "expr": {
                                                                                    "InvokeAbstractOperationExpression": {
                                                                                      "name": "string",
                                                                                      "args": [
                                                                                        {
                                                                                          "ListExpression": {
                                                                                            "entries": [
                                                                                              {
                                                                                                "ReferenceExpression": {
                                                                                                  "ref": {
                                                                                                    "Variable": {
                                                                                                      "Variable": {
                                                                                                        "name": "string"
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              },
                                                                                              {
                                                                                                "ReferenceExpression": {
                                                                                                  "ref": {
                                                                                                    "Variable": {
                                                                                                      "Variable": {
                                                                                                        "name": "string"
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            ]
                                                                                          }
                                                                                        }
                                                                                      ]
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        ]
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      ]
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "SubStep": {
                                          "directive": "null",
                                          "step": {
                                            "PerformStep": {
                                              "expr": {
                                                "ReturnIfAbruptExpression": {
                                                  "expr": {
                                                    "InvokeAbstractOperationExpression": {
                                                      "name": "string",
                                                      "args": [
                                                        {
                                                          "InvokeAbstractOperationExpression": {
                                                            "name": "string",
                                                            "args": [
                                                              {
                                                                "ReferenceExpression": {
                                                                  "ref": {
                                                                    "Variable": {
                                                                      "Variable": {
                                                                        "name": "string"
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              },
                                                              {
                                                                "FalseLiteral": {}
                                                              }
                                                            ]
                                                          }
                                                        }
                                                      ]
                                                    }
                                                  },
                                                  "check": "boolean"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "SubStep": {
                                          "directive": "null",
                                          "step": {
                                            "SetStep": {
                                              "ref": {
                                                "Variable": {
                                                  "Variable": {
                                                    "name": "string"
                                                  }
                                                }
                                              },
                                              "expr": {
                                                "BinaryExpression": {
                                                  "left": {
                                                    "ReferenceExpression": {
                                                      "ref": {
                                                        "Variable": {
                                                          "Variable": {
                                                            "name": "string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "op": {
                                                    "Add": {}
                                                  },
                                                  "right": {
                                                    "DecimalMathValueLiteral": {
                                                      "n": "number"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "CreateArrayIterator"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "RecordExpression": {
            "tname": "string",
            "fields": [
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "EnumLiteral": {
                    "name": "string"
                  }
                }
              ],
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "TrueLiteral": {}
                }
              ],
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              ],
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              ],
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "DecimalMathValueLiteral": {
                    "n": "number"
                  }
                }
              ]
            ]
          }
        }
      }
    },
    "appearsIn": [
      "CopyDataBlockBytes"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "params": [
            {
              "Variable": {
                "name": "string"
              }
            }
          ],
          "captured": [
            {
              "Variable": {
                "name": "string"
              }
            }
          ],
          "body": {
            "BlockStep": {
              "block": {
                "StepBlock": {
                  "steps": [
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "PerformStep": {
                            "expr": {
                              "ReturnIfAbruptExpression": {
                                "expr": {
                                  "InvokeAbstractOperationExpression": {
                                    "name": "string",
                                    "args": [
                                      {
                                        "ReferenceExpression": {
                                          "ref": {
                                            "PropertyReference": {
                                              "PropertyReference": {
                                                "base": {
                                                  "Variable": {
                                                    "Variable": {
                                                      "name": "string"
                                                    }
                                                  }
                                                },
                                                "prop": {
                                                  "FieldProperty": {
                                                    "FieldProperty": {
                                                      "name": "string"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "UndefinedLiteral": {}
                                      },
                                      {
                                        "ListExpression": {
                                          "entries": [
                                            {
                                              "ReferenceExpression": {
                                                "ref": {
                                                  "Variable": {
                                                    "Variable": {
                                                      "name": "string"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      }
                                    ]
                                  }
                                },
                                "check": "boolean"
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "ReturnStep": {
                            "expr": {
                              "EnumLiteral": {
                                "name": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "ContinueDynamicImport"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "params": [],
          "captured": [
            {
              "Variable": {
                "name": "string"
              }
            },
            {
              "Variable": {
                "name": "string"
              }
            },
            {
              "Variable": {
                "name": "string"
              }
            }
          ],
          "body": {
            "BlockStep": {
              "block": {
                "StepBlock": {
                  "steps": [
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "LetStep": {
                            "variable": {
                              "Variable": {
                                "name": "string"
                              }
                            },
                            "expr": {
                              "InvokeAbstractOperationExpression": {
                                "name": "string",
                                "args": [
                                  {
                                    "InvokeMethodExpression": {
                                      "ref": {
                                        "PropertyReference": {
                                          "base": {
                                            "Variable": {
                                              "Variable": {
                                                "name": "string"
                                              }
                                            }
                                          },
                                          "prop": {
                                            "ComponentProperty": {
                                              "ComponentProperty": {
                                                "name": "string"
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "args": []
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "IfStep": {
                            "cond": {
                              "PredicateCondition": {
                                "expr": {
                                  "ReferenceExpression": {
                                    "ref": {
                                      "Variable": {
                                        "Variable": {
                                          "name": "string"
                                        }
                                      }
                                    }
                                  }
                                },
                                "negation": "boolean",
                                "op": {
                                  "Abrupt": {}
                                }
                              }
                            },
                            "thenStep": {
                              "BlockStep": {
                                "block": {
                                  "StepBlock": {
                                    "steps": [
                                      {
                                        "SubStep": {
                                          "directive": "null",
                                          "step": {
                                            "PerformStep": {
                                              "expr": {
                                                "ReturnIfAbruptExpression": {
                                                  "expr": {
                                                    "InvokeAbstractOperationExpression": {
                                                      "name": "string",
                                                      "args": [
                                                        {
                                                          "ReferenceExpression": {
                                                            "ref": {
                                                              "PropertyReference": {
                                                                "PropertyReference": {
                                                                  "base": {
                                                                    "Variable": {
                                                                      "Variable": {
                                                                        "name": "string"
                                                                      }
                                                                    }
                                                                  },
                                                                  "prop": {
                                                                    "FieldProperty": {
                                                                      "FieldProperty": {
                                                                        "name": "string"
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "UndefinedLiteral": {}
                                                        },
                                                        {
                                                          "ListExpression": {
                                                            "entries": [
                                                              {
                                                                "ReferenceExpression": {
                                                                  "ref": {
                                                                    "PropertyReference": {
                                                                      "PropertyReference": {
                                                                        "base": {
                                                                          "Variable": {
                                                                            "Variable": {
                                                                              "name": "string"
                                                                            }
                                                                          }
                                                                        },
                                                                        "prop": {
                                                                          "FieldProperty": {
                                                                            "FieldProperty": {
                                                                              "name": "string"
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            ]
                                                          }
                                                        }
                                                      ]
                                                    }
                                                  },
                                                  "check": "boolean"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "SubStep": {
                                          "directive": "null",
                                          "step": {
                                            "ReturnStep": {
                                              "expr": {
                                                "EnumLiteral": {
                                                  "name": "string"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            },
                            "elseStep": "null"
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "LetStep": {
                            "variable": {
                              "Variable": {
                                "name": "string"
                              }
                            },
                            "expr": {
                              "InvokeMethodExpression": {
                                "ref": {
                                  "PropertyReference": {
                                    "base": {
                                      "Variable": {
                                        "Variable": {
                                          "name": "string"
                                        }
                                      }
                                    },
                                    "prop": {
                                      "ComponentProperty": {
                                        "ComponentProperty": {
                                          "name": "string"
                                        }
                                      }
                                    }
                                  }
                                },
                                "args": []
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "LetStep": {
                            "variable": {
                              "Variable": {
                                "name": "string"
                              }
                            },
                            "expr": {
                              "params": [],
                              "captured": [
                                {
                                  "Variable": {
                                    "name": "string"
                                  }
                                },
                                {
                                  "Variable": {
                                    "name": "string"
                                  }
                                }
                              ],
                              "body": {
                                "BlockStep": {
                                  "block": {
                                    "StepBlock": {
                                      "steps": [
                                        {
                                          "SubStep": {
                                            "directive": "null",
                                            "step": {
                                              "LetStep": {
                                                "variable": {
                                                  "Variable": {
                                                    "name": "string"
                                                  }
                                                },
                                                "expr": {
                                                  "InvokeAbstractOperationExpression": {
                                                    "name": "string",
                                                    "args": [
                                                      {
                                                        "ReferenceExpression": {
                                                          "ref": {
                                                            "Variable": {
                                                              "Variable": {
                                                                "name": "string"
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    ]
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        },
                                        {
                                          "SubStep": {
                                            "directive": "null",
                                            "step": {
                                              "PerformStep": {
                                                "expr": {
                                                  "ReturnIfAbruptExpression": {
                                                    "expr": {
                                                      "InvokeAbstractOperationExpression": {
                                                        "name": "string",
                                                        "args": [
                                                          {
                                                            "ReferenceExpression": {
                                                              "ref": {
                                                                "PropertyReference": {
                                                                  "PropertyReference": {
                                                                    "base": {
                                                                      "Variable": {
                                                                        "Variable": {
                                                                          "name": "string"
                                                                        }
                                                                      }
                                                                    },
                                                                    "prop": {
                                                                      "FieldProperty": {
                                                                        "FieldProperty": {
                                                                          "name": "string"
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          },
                                                          {
                                                            "UndefinedLiteral": {}
                                                          },
                                                          {
                                                            "ListExpression": {
                                                              "entries": [
                                                                {
                                                                  "ReferenceExpression": {
                                                                    "ref": {
                                                                      "Variable": {
                                                                        "Variable": {
                                                                          "name": "string"
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              ]
                                                            }
                                                          }
                                                        ]
                                                      }
                                                    },
                                                    "check": "boolean"
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        },
                                        {
                                          "SubStep": {
                                            "directive": "null",
                                            "step": {
                                              "ReturnStep": {
                                                "expr": {
                                                  "EnumLiteral": {
                                                    "name": "string"
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "LetStep": {
                            "variable": {
                              "Variable": {
                                "name": "string"
                              }
                            },
                            "expr": {
                              "InvokeAbstractOperationExpression": {
                                "name": "string",
                                "args": [
                                  {
                                    "ReferenceExpression": {
                                      "ref": {
                                        "Variable": {
                                          "Variable": {
                                            "name": "string"
                                          }
                                        }
                                      }
                                    }
                                  },
                                  {
                                    "DecimalMathValueLiteral": {
                                      "n": "number"
                                    }
                                  },
                                  {
                                    "StringLiteral": {
                                      "s": "string"
                                    }
                                  },
                                  {
                                    "ListExpression": {
                                      "entries": []
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "PerformStep": {
                            "expr": {
                              "InvokeAbstractOperationExpression": {
                                "name": "string",
                                "args": [
                                  {
                                    "ReferenceExpression": {
                                      "ref": {
                                        "Variable": {
                                          "Variable": {
                                            "name": "string"
                                          }
                                        }
                                      }
                                    }
                                  },
                                  {
                                    "ReferenceExpression": {
                                      "ref": {
                                        "Variable": {
                                          "Variable": {
                                            "name": "string"
                                          }
                                        }
                                      }
                                    }
                                  },
                                  {
                                    "ReferenceExpression": {
                                      "ref": {
                                        "Variable": {
                                          "Variable": {
                                            "name": "string"
                                          }
                                        }
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "ReturnStep": {
                            "expr": {
                              "EnumLiteral": {
                                "name": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "ContinueDynamicImport"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "InvokeMethodExpression": {
                  "ref": {
                    "PropertyReference": {
                      "base": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      },
                      "prop": {
                        "ComponentProperty": {
                          "ComponentProperty": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  "args": []
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "ContinueDynamicImport"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "params": [],
          "captured": [
            {
              "Variable": {
                "name": "string"
              }
            },
            {
              "Variable": {
                "name": "string"
              }
            }
          ],
          "body": {
            "BlockStep": {
              "block": {
                "StepBlock": {
                  "steps": [
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "LetStep": {
                            "variable": {
                              "Variable": {
                                "name": "string"
                              }
                            },
                            "expr": {
                              "InvokeAbstractOperationExpression": {
                                "name": "string",
                                "args": [
                                  {
                                    "ReferenceExpression": {
                                      "ref": {
                                        "Variable": {
                                          "Variable": {
                                            "name": "string"
                                          }
                                        }
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "PerformStep": {
                            "expr": {
                              "ReturnIfAbruptExpression": {
                                "expr": {
                                  "InvokeAbstractOperationExpression": {
                                    "name": "string",
                                    "args": [
                                      {
                                        "ReferenceExpression": {
                                          "ref": {
                                            "PropertyReference": {
                                              "PropertyReference": {
                                                "base": {
                                                  "Variable": {
                                                    "Variable": {
                                                      "name": "string"
                                                    }
                                                  }
                                                },
                                                "prop": {
                                                  "FieldProperty": {
                                                    "FieldProperty": {
                                                      "name": "string"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "UndefinedLiteral": {}
                                      },
                                      {
                                        "ListExpression": {
                                          "entries": [
                                            {
                                              "ReferenceExpression": {
                                                "ref": {
                                                  "Variable": {
                                                    "Variable": {
                                                      "name": "string"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      }
                                    ]
                                  }
                                },
                                "check": "boolean"
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "ReturnStep": {
                            "expr": {
                              "EnumLiteral": {
                                "name": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "ContinueDynamicImport"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "BinaryExpression": {
            "left": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            },
            "op": {
              "Sub": {}
            },
            "right": {
              "ReferenceExpression": {
                "ref": {
                  "PropertyReference": {
                    "PropertyReference": {
                      "base": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      },
                      "prop": {
                        "FieldProperty": {
                          "FieldProperty": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "ComposeWriteEventBytes"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReferenceExpression": {
            "ref": {
              "PropertyReference": {
                "PropertyReference": {
                  "base": {
                    "PropertyReference": {
                      "PropertyReference": {
                        "base": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        },
                        "prop": {
                          "FieldProperty": {
                            "FieldProperty": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "prop": {
                    "IndexProperty": {
                      "IndexProperty": {
                        "index": {
                          "ReferenceExpression": {
                            "ref": {
                              "Variable": {
                                "Variable": {
                                  "name": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "ComposeWriteEventBytes"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeMethodExpression": {
            "ref": {
              "PropertyReference": {
                "base": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                },
                "prop": {
                  "FieldProperty": {
                    "FieldProperty": {
                      "name": "string"
                    }
                  }
                }
              }
            },
            "args": [
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "ReferenceExpression": {
                  "ref": {
                    "PropertyReference": {
                      "PropertyReference": {
                        "base": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        },
                        "prop": {
                          "FieldProperty": {
                            "FieldProperty": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "ComposeWriteEventBytes"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "RecordExpression": {
            "tname": "string",
            "fields": [
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "UndefinedLiteral": {}
                }
              ],
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "FalseLiteral": {}
                }
              ],
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "UndefinedLiteral": {}
                }
              ],
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "UndefinedLiteral": {}
                }
              ],
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "FalseLiteral": {}
                }
              ],
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "FalseLiteral": {}
                }
              ]
            ]
          }
        }
      }
    },
    "appearsIn": [
      "CompletePropertyDescriptor"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeAbstractOperationExpression": {
                "name": "string",
                "args": [
                  {
                    "ReturnIfAbruptExpression": {
                      "expr": {
                        "InvokeAbstractOperationExpression": {
                          "name": "string",
                          "args": [
                            {
                              "ReferenceExpression": {
                                "ref": {
                                  "Variable": {
                                    "Variable": {
                                      "name": "string"
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "UndefinedLiteral": {}
                            },
                            {
                              "ListExpression": {
                                "entries": [
                                  {
                                    "ReferenceExpression": {
                                      "ref": {
                                        "Variable": {
                                          "Variable": {
                                            "name": "string"
                                          }
                                        }
                                      }
                                    }
                                  },
                                  {
                                    "ReferenceExpression": {
                                      "ref": {
                                        "Variable": {
                                          "Variable": {
                                            "name": "string"
                                          }
                                        }
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      "check": "boolean"
                    }
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "CompareTypedArrayElements",
      "CompareArrayElements"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "CodeUnitAtExpression": {
            "base": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            },
            "index": {
              "BinaryExpression": {
                "left": {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                },
                "op": {
                  "Add": {}
                },
                "right": {
                  "DecimalMathValueLiteral": {
                    "n": "number"
                  }
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "CodePointAt"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "BinaryExpression": {
            "left": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            },
            "op": {
              "Add": {}
            },
            "right": {
              "DecimalMathValueLiteral": {
                "n": "number"
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "CharacterSetMatcher"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeSyntaxDirectedOperationExpression": {
                "base": {
                  "ReferenceExpression": {
                    "ref": {
                      "PropertyReference": {
                        "PropertyReference": {
                          "base": {
                            "Variable": {
                              "Variable": {
                                "name": "string"
                              }
                            }
                          },
                          "prop": {
                            "NonterminalProperty": {
                              "NonterminalProperty": {
                                "name": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "name": "string",
                "args": []
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "CaseClauseIsSelected"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ListConcatExpression": {
            "exprs": [
              {
                "ListExpression": {
                  "entries": [
                    {
                      "FieldLiteral": {
                        "name": "string"
                      }
                    },
                    {
                      "FieldLiteral": {
                        "name": "string"
                      }
                    }
                  ]
                }
              },
              {
                "XRefExpression": {
                  "kind": {
                    "InternalSlots": {}
                  },
                  "id": "string"
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "BoundFunctionCreate"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "BinaryExpression": {
            "left": {
              "ReferenceExpression": {
                "ref": {
                  "Variable": {
                    "Variable": {
                      "name": "string"
                    }
                  }
                }
              }
            },
            "op": {
              "Mod": {}
            },
            "right": {
              "DecimalMathValueLiteral": {
                "n": "number"
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "BigIntBitwiseOp"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "BinaryExpression": {
                  "left": {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  "op": {
                    "Mod": {}
                  },
                  "right": {
                    "DecimalMathValueLiteral": {
                      "n": "number"
                    }
                  }
                }
              },
              {
                "BinaryExpression": {
                  "left": {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  "op": {
                    "Mod": {}
                  },
                  "right": {
                    "DecimalMathValueLiteral": {
                      "n": "number"
                    }
                  }
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "BigIntBitwiseOp"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ConversionExpression": {
            "op": {
              "ToBigInt": {}
            },
            "expr": {
              "MathFuncExpression": {
                "op": {
                  "Truncate": {}
                },
                "args": [
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "BigInt::remainder"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "params": [
            {
              "Variable": {
                "name": "string"
              }
            }
          ],
          "captured": [
            {
              "Variable": {
                "name": "string"
              }
            }
          ],
          "body": {
            "BlockStep": {
              "block": {
                "StepBlock": {
                  "steps": [
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "LetStep": {
                            "variable": {
                              "Variable": {
                                "name": "string"
                              }
                            },
                            "expr": {
                              "ReferenceExpression": {
                                "ref": {
                                  "RunningExecutionContext": {
                                    "RunningExecutionContext": {}
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "SuspendStep": {
                            "context": {
                              "Variable": {
                                "Variable": {
                                  "name": "string"
                                }
                              }
                            },
                            "remove": "boolean"
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "PushCtxtStep": {
                            "ref": {
                              "Variable": {
                                "Variable": {
                                  "name": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "ResumeEvaluationStep": {
                            "context": {
                              "Variable": {
                                "Variable": {
                                  "name": "string"
                                }
                              }
                            },
                            "argument": {
                              "InvokeAbstractOperationExpression": {
                                "name": "string",
                                "args": [
                                  {
                                    "ReferenceExpression": {
                                      "ref": {
                                        "Variable": {
                                          "Variable": {
                                            "name": "string"
                                          }
                                        }
                                      }
                                    }
                                  }
                                ]
                              }
                            },
                            "param": "null",
                            "steps": [
                              {
                                "SubStep": {
                                  "directive": "null",
                                  "step": {
                                    "AssertStep": {
                                      "cond": {
                                        "ExpressionCondition": {
                                          "expr": {
                                            "YetExpression": {
                                              "str": "string",
                                              "block": "null"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              {
                                "SubStep": {
                                  "directive": "null",
                                  "step": {
                                    "ReturnStep": {
                                      "expr": {
                                        "UndefinedLiteral": {}
                                      }
                                    }
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "Await"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "RecordExpression": {
            "tname": "string",
            "fields": [
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "EnumLiteral": {
                    "name": "string"
                  }
                }
              ],
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "TrueLiteral": {}
                }
              ],
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              ],
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              ],
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              ]
            ]
          }
        }
      }
    },
    "appearsIn": [
      "AtomicCompareExchangeInSharedBlock"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReferenceExpression": {
            "ref": {
              "SecondExecutionContext": {
                "SecondExecutionContext": {}
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "AsyncGeneratorYield"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "params": [],
          "captured": [
            {
              "Variable": {
                "name": "string"
              }
            }
          ],
          "body": {
            "BlockStep": {
              "block": {
                "StepBlock": {
                  "steps": [
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "LetStep": {
                            "variable": {
                              "Variable": {
                                "name": "string"
                              }
                            },
                            "expr": {
                              "ReferenceExpression": {
                                "ref": {
                                  "RunningExecutionContext": {
                                    "RunningExecutionContext": {}
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "LetStep": {
                            "variable": {
                              "Variable": {
                                "name": "string"
                              }
                            },
                            "expr": {
                              "ReferenceExpression": {
                                "ref": {
                                  "PropertyReference": {
                                    "PropertyReference": {
                                      "base": {
                                        "Variable": {
                                          "Variable": {
                                            "name": "string"
                                          }
                                        }
                                      },
                                      "prop": {
                                        "ComponentProperty": {
                                          "ComponentProperty": {
                                            "name": "string"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "IfStep": {
                            "cond": {
                              "TypeCheckCondition": {
                                "expr": {
                                  "ReferenceExpression": {
                                    "ref": {
                                      "Variable": {
                                        "Variable": {
                                          "name": "string"
                                        }
                                      }
                                    }
                                  }
                                },
                                "negation": "boolean",
                                "ty": [
                                  {
                                    "Type": {
                                      "clo": {
                                        "names": []
                                      },
                                      "cont": {
                                        "Fin": {
                                          "set": []
                                        }
                                      },
                                      "record": {
                                        "Elem": {
                                          "map": {}
                                        }
                                      },
                                      "map": {
                                        "Bot": {}
                                      },
                                      "list": {
                                        "Bot": {}
                                      },
                                      "ast": {
                                        "Top": {}
                                      },
                                      "grammarSymbol": {
                                        "Fin": {
                                          "set": []
                                        }
                                      },
                                      "codeUnit": "boolean",
                                      "enumv": {
                                        "Fin": {
                                          "set": []
                                        }
                                      },
                                      "math": {
                                        "int": {
                                          "IntSetTy": {
                                            "set": []
                                          }
                                        }
                                      },
                                      "infinity": {
                                        "pos": []
                                      },
                                      "number": {
                                        "int": {
                                          "IntSetTy": {
                                            "set": []
                                          }
                                        },
                                        "hasNaN": "boolean"
                                      },
                                      "bigInt": "boolean",
                                      "str": {
                                        "Fin": {
                                          "set": []
                                        }
                                      },
                                      "bool": {
                                        "set": []
                                      },
                                      "undef": "boolean",
                                      "nullv": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            "thenStep": {
                              "BlockStep": {
                                "block": {
                                  "StepBlock": {
                                    "steps": [
                                      {
                                        "SubStep": {
                                          "directive": "null",
                                          "step": {
                                            "LetStep": {
                                              "variable": {
                                                "Variable": {
                                                  "name": "string"
                                                }
                                              },
                                              "expr": {
                                                "InvokeAbstractOperationExpression": {
                                                  "name": "string",
                                                  "args": [
                                                    {
                                                      "InvokeSyntaxDirectedOperationExpression": {
                                                        "base": {
                                                          "ReferenceExpression": {
                                                            "ref": {
                                                              "Variable": {
                                                                "Variable": {
                                                                  "name": "string"
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        "name": "string",
                                                        "args": []
                                                      }
                                                    }
                                                  ]
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            },
                            "elseStep": {
                              "BlockStep": {
                                "block": {
                                  "StepBlock": {
                                    "steps": [
                                      {
                                        "SubStep": {
                                          "directive": "null",
                                          "step": {
                                            "AssertStep": {
                                              "cond": {
                                                "TypeCheckCondition": {
                                                  "expr": {
                                                    "ReferenceExpression": {
                                                      "ref": {
                                                        "Variable": {
                                                          "Variable": {
                                                            "name": "string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "negation": "boolean",
                                                  "ty": [
                                                    {
                                                      "Type": {
                                                        "clo": {
                                                          "CloTopTy": {}
                                                        },
                                                        "cont": {
                                                          "Fin": {
                                                            "set": []
                                                          }
                                                        },
                                                        "record": {
                                                          "Elem": {
                                                            "map": {}
                                                          }
                                                        },
                                                        "map": {
                                                          "Bot": {}
                                                        },
                                                        "list": {
                                                          "Bot": {}
                                                        },
                                                        "ast": {
                                                          "Simple": {
                                                            "set": []
                                                          }
                                                        },
                                                        "grammarSymbol": {
                                                          "Fin": {
                                                            "set": []
                                                          }
                                                        },
                                                        "codeUnit": "boolean",
                                                        "enumv": {
                                                          "Fin": {
                                                            "set": []
                                                          }
                                                        },
                                                        "math": {
                                                          "int": {
                                                            "IntSetTy": {
                                                              "set": []
                                                            }
                                                          }
                                                        },
                                                        "infinity": {
                                                          "pos": []
                                                        },
                                                        "number": {
                                                          "int": {
                                                            "IntSetTy": {
                                                              "set": []
                                                            }
                                                          },
                                                          "hasNaN": "boolean"
                                                        },
                                                        "bigInt": "boolean",
                                                        "str": {
                                                          "Fin": {
                                                            "set": []
                                                          }
                                                        },
                                                        "bool": {
                                                          "set": []
                                                        },
                                                        "undef": "boolean",
                                                        "nullv": "boolean"
                                                      }
                                                    }
                                                  ]
                                                }
                                              }
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "SubStep": {
                                          "directive": "null",
                                          "step": {
                                            "LetStep": {
                                              "variable": {
                                                "Variable": {
                                                  "name": "string"
                                                }
                                              },
                                              "expr": {
                                                "InvokeAbstractOperationExpression": {
                                                  "name": "string",
                                                  "args": [
                                                    {
                                                      "InvokeAbstractClosureExpression": {
                                                        "ref": {
                                                          "Variable": {
                                                            "name": "string"
                                                          }
                                                        },
                                                        "args": []
                                                      }
                                                    }
                                                  ]
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "AssertStep": {
                            "cond": {
                              "ExpressionCondition": {
                                "expr": {
                                  "YetExpression": {
                                    "str": "string",
                                    "block": "null"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "RemoveContextStep": {
                            "removeContext": {
                              "Variable": {
                                "Variable": {
                                  "name": "string"
                                }
                              }
                            },
                            "restoreContext": {
                              "None$": "null"
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "SetStep": {
                            "ref": {
                              "PropertyReference": {
                                "PropertyReference": {
                                  "base": {
                                    "Variable": {
                                      "Variable": {
                                        "name": "string"
                                      }
                                    }
                                  },
                                  "prop": {
                                    "FieldProperty": {
                                      "FieldProperty": {
                                        "name": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "expr": {
                              "EnumLiteral": {
                                "name": "string"
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "IfStep": {
                            "cond": {
                              "PredicateCondition": {
                                "expr": {
                                  "ReferenceExpression": {
                                    "ref": {
                                      "Variable": {
                                        "Variable": {
                                          "name": "string"
                                        }
                                      }
                                    }
                                  }
                                },
                                "negation": "boolean",
                                "op": {
                                  "Normal": {}
                                }
                              }
                            },
                            "thenStep": {
                              "SetStep": {
                                "ref": {
                                  "Variable": {
                                    "Variable": {
                                      "name": "string"
                                    }
                                  }
                                },
                                "expr": {
                                  "InvokeAbstractOperationExpression": {
                                    "name": "string",
                                    "args": [
                                      {
                                        "UndefinedLiteral": {}
                                      }
                                    ]
                                  }
                                }
                              }
                            },
                            "elseStep": "null"
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "IfStep": {
                            "cond": {
                              "PredicateCondition": {
                                "expr": {
                                  "ReferenceExpression": {
                                    "ref": {
                                      "Variable": {
                                        "Variable": {
                                          "name": "string"
                                        }
                                      }
                                    }
                                  }
                                },
                                "negation": "boolean",
                                "op": {
                                  "Return": {}
                                }
                              }
                            },
                            "thenStep": {
                              "SetStep": {
                                "ref": {
                                  "Variable": {
                                    "Variable": {
                                      "name": "string"
                                    }
                                  }
                                },
                                "expr": {
                                  "InvokeAbstractOperationExpression": {
                                    "name": "string",
                                    "args": [
                                      {
                                        "ReferenceExpression": {
                                          "ref": {
                                            "PropertyReference": {
                                              "PropertyReference": {
                                                "base": {
                                                  "Variable": {
                                                    "Variable": {
                                                      "name": "string"
                                                    }
                                                  }
                                                },
                                                "prop": {
                                                  "FieldProperty": {
                                                    "FieldProperty": {
                                                      "name": "string"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            },
                            "elseStep": "null"
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "PerformStep": {
                            "expr": {
                              "InvokeAbstractOperationExpression": {
                                "name": "string",
                                "args": [
                                  {
                                    "ReferenceExpression": {
                                      "ref": {
                                        "Variable": {
                                          "Variable": {
                                            "name": "string"
                                          }
                                        }
                                      }
                                    }
                                  },
                                  {
                                    "ReferenceExpression": {
                                      "ref": {
                                        "Variable": {
                                          "Variable": {
                                            "name": "string"
                                          }
                                        }
                                      }
                                    }
                                  },
                                  {
                                    "TrueLiteral": {}
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "PerformStep": {
                            "expr": {
                              "InvokeAbstractOperationExpression": {
                                "name": "string",
                                "args": [
                                  {
                                    "ReferenceExpression": {
                                      "ref": {
                                        "Variable": {
                                          "Variable": {
                                            "name": "string"
                                          }
                                        }
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "ReturnStep": {
                            "expr": {
                              "UndefinedLiteral": {}
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "AsyncGeneratorStart"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "InvokeAbstractClosureExpression": {
                  "ref": {
                    "Variable": {
                      "name": "string"
                    }
                  },
                  "args": []
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "AsyncGeneratorStart"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeAbstractOperationExpression": {
                "name": "string",
                "args": [
                  {
                    "IntrinsicExpression": {
                      "intr": {
                        "Intrinsic": {
                          "base": "string",
                          "props": []
                        }
                      }
                    }
                  },
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "PropertyReference": {
                          "PropertyReference": {
                            "base": {
                              "Variable": {
                                "Variable": {
                                  "name": "string"
                                }
                              }
                            },
                            "prop": {
                              "FieldProperty": {
                                "FieldProperty": {
                                  "name": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "AsyncGeneratorAwaitReturn"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "params": [
            {
              "Variable": {
                "name": "string"
              }
            }
          ],
          "captured": [
            {
              "Variable": {
                "name": "string"
              }
            }
          ],
          "body": {
            "BlockStep": {
              "block": {
                "StepBlock": {
                  "steps": [
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "SetStep": {
                            "ref": {
                              "PropertyReference": {
                                "PropertyReference": {
                                  "base": {
                                    "Variable": {
                                      "Variable": {
                                        "name": "string"
                                      }
                                    }
                                  },
                                  "prop": {
                                    "FieldProperty": {
                                      "FieldProperty": {
                                        "name": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "expr": {
                              "EnumLiteral": {
                                "name": "string"
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "LetStep": {
                            "variable": {
                              "Variable": {
                                "name": "string"
                              }
                            },
                            "expr": {
                              "InvokeAbstractOperationExpression": {
                                "name": "string",
                                "args": [
                                  {
                                    "ReferenceExpression": {
                                      "ref": {
                                        "Variable": {
                                          "Variable": {
                                            "name": "string"
                                          }
                                        }
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "PerformStep": {
                            "expr": {
                              "InvokeAbstractOperationExpression": {
                                "name": "string",
                                "args": [
                                  {
                                    "ReferenceExpression": {
                                      "ref": {
                                        "Variable": {
                                          "Variable": {
                                            "name": "string"
                                          }
                                        }
                                      }
                                    }
                                  },
                                  {
                                    "ReferenceExpression": {
                                      "ref": {
                                        "Variable": {
                                          "Variable": {
                                            "name": "string"
                                          }
                                        }
                                      }
                                    }
                                  },
                                  {
                                    "TrueLiteral": {}
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "PerformStep": {
                            "expr": {
                              "InvokeAbstractOperationExpression": {
                                "name": "string",
                                "args": [
                                  {
                                    "ReferenceExpression": {
                                      "ref": {
                                        "Variable": {
                                          "Variable": {
                                            "name": "string"
                                          }
                                        }
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "ReturnStep": {
                            "expr": {
                              "UndefinedLiteral": {}
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "AsyncGeneratorAwaitReturn"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "InvokeAbstractOperationExpression": {
                  "name": "string",
                  "args": [
                    {
                      "IntrinsicExpression": {
                        "intr": {
                          "Intrinsic": {
                            "base": "string",
                            "props": []
                          }
                        }
                      }
                    },
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "AsyncFromSyncIteratorContinuation"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "params": [
            {
              "Variable": {
                "name": "string"
              }
            }
          ],
          "captured": [
            {
              "Variable": {
                "name": "string"
              }
            }
          ],
          "body": {
            "BlockStep": {
              "block": {
                "StepBlock": {
                  "steps": [
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "ReturnStep": {
                            "expr": {
                              "InvokeAbstractOperationExpression": {
                                "name": "string",
                                "args": [
                                  {
                                    "ReferenceExpression": {
                                      "ref": {
                                        "Variable": {
                                          "Variable": {
                                            "name": "string"
                                          }
                                        }
                                      }
                                    }
                                  },
                                  {
                                    "ReferenceExpression": {
                                      "ref": {
                                        "Variable": {
                                          "Variable": {
                                            "name": "string"
                                          }
                                        }
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "AsyncFromSyncIteratorContinuation"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "params": [],
          "captured": [
            {
              "Variable": {
                "name": "string"
              }
            },
            {
              "Variable": {
                "name": "string"
              }
            }
          ],
          "body": {
            "BlockStep": {
              "block": {
                "StepBlock": {
                  "steps": [
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "LetStep": {
                            "variable": {
                              "Variable": {
                                "name": "string"
                              }
                            },
                            "expr": {
                              "ReferenceExpression": {
                                "ref": {
                                  "RunningExecutionContext": {
                                    "RunningExecutionContext": {}
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "LetStep": {
                            "variable": {
                              "Variable": {
                                "name": "string"
                              }
                            },
                            "expr": {
                              "InvokeAbstractOperationExpression": {
                                "name": "string",
                                "args": [
                                  {
                                    "InvokeSyntaxDirectedOperationExpression": {
                                      "base": {
                                        "ReferenceExpression": {
                                          "ref": {
                                            "Variable": {
                                              "Variable": {
                                                "name": "string"
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "name": "string",
                                      "args": []
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "AssertStep": {
                            "cond": {
                              "ExpressionCondition": {
                                "expr": {
                                  "YetExpression": {
                                    "str": "string",
                                    "block": "null"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "RemoveContextStep": {
                            "removeContext": {
                              "Variable": {
                                "Variable": {
                                  "name": "string"
                                }
                              }
                            },
                            "restoreContext": {
                              "None$": "null"
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": "null",
                        "step": {
                          "IfStep": {
                            "cond": {
                              "PredicateCondition": {
                                "expr": {
                                  "ReferenceExpression": {
                                    "ref": {
                                      "Variable": {
                                        "Variable": {
                                          "name": "string"
                                        }
                                      }
                                    }
                                  }
                                },
                                "negation": "boolean",
                                "op": {
                                  "Normal": {}
                                }
                              }
                            },
                            "thenStep": {
                              "BlockStep": {
                                "block": {
                                  "StepBlock": {
                                    "steps": [
                                      {
                                        "SubStep": {
                                          "directive": "null",
                                          "step": {
                                            "PerformStep": {
                                              "expr": {
                                                "ReturnIfAbruptExpression": {
                                                  "expr": {
                                                    "InvokeAbstractOperationExpression": {
                                                      "name": "string",
                                                      "args": [
                                                        {
                                                          "ReferenceExpression": {
                                                            "ref": {
                                                              "PropertyReference": {
                                                                "PropertyReference": {
                                                                  "base": {
                                                                    "Variable": {
                                                                      "Variable": {
                                                                        "name": "string"
                                                                      }
                                                                    }
                                                                  },
                                                                  "prop": {
                                                                    "FieldProperty": {
                                                                      "FieldProperty": {
                                                                        "name": "string"
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "UndefinedLiteral": {}
                                                        },
                                                        {
                                                          "ListExpression": {
                                                            "entries": [
                                                              {
                                                                "UndefinedLiteral": {}
                                                              }
                                                            ]
                                                          }
                                                        }
                                                      ]
                                                    }
                                                  },
                                                  "check": "boolean"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            },
                            "elseStep": {
                              "IfStep": {
                                "cond": {
                                  "PredicateCondition": {
                                    "expr": {
                                      "ReferenceExpression": {
                                        "ref": {
                                          "Variable": {
                                            "Variable": {
                                              "name": "string"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "negation": "boolean",
                                    "op": {
                                      "Return": {}
                                    }
                                  }
                                },
                                "thenStep": {
                                  "BlockStep": {
                                    "block": {
                                      "StepBlock": {
                                        "steps": [
                                          {
                                            "SubStep": {
                                              "directive": "null",
                                              "step": {
                                                "PerformStep": {
                                                  "expr": {
                                                    "ReturnIfAbruptExpression": {
                                                      "expr": {
                                                        "InvokeAbstractOperationExpression": {
                                                          "name": "string",
                                                          "args": [
                                                            {
                                                              "ReferenceExpression": {
                                                                "ref": {
                                                                  "PropertyReference": {
                                                                    "PropertyReference": {
                                                                      "base": {
                                                                        "Variable": {
                                                                          "Variable": {
                                                                            "name": "string"
                                                                          }
                                                                        }
                                                                      },
                                                                      "prop": {
                                                                        "FieldProperty": {
                                                                          "FieldProperty": {
                                                                            "name": "string"
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            },
                                                            {
                                                              "UndefinedLiteral": {}
                                                            },
                                                            {
                                                              "ListExpression": {
                                                                "entries": [
                                                                  {
                                                                    "ReferenceExpression": {
                                                                      "ref": {
                                                                        "PropertyReference": {
                                                                          "PropertyReference": {
                                                                            "base": {
                                                                              "Variable": {
                                                                                "Variable": {
                                                                                  "name": "string"
                                                                                }
                                                                              }
                                                                            },
                                                                            "prop": {
                                                                              "FieldProperty": {
                                                                                "FieldProperty": {
                                                                                  "name": "string"
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                ]
                                                              }
                                                            }
                                                          ]
                                                        }
                                                      },
                                                      "check": "boolean"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  }
                                },
                                "elseStep": {
                                  "BlockStep": {
                                    "block": {
                                      "StepBlock": {
                                        "steps": [
                                          {
                                            "SubStep": {
                                              "directive": "null",
                                              "step": {
                                                "AssertStep": {
                                                  "cond": {
                                                    "PredicateCondition": {
                                                      "expr": {
                                                        "ReferenceExpression": {
                                                          "ref": {
                                                            "Variable": {
                                                              "Variable": {
                                                                "name": "string"
                                                              }
                                                            }
                                                          }
                                                        }
                                                      },
                                                      "negation": "boolean",
                                                      "op": {
                                                        "Throw": {}
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "SubStep": {
                                              "directive": "null",
                                              "step": {
                                                "PerformStep": {
                                                  "expr": {
                                                    "ReturnIfAbruptExpression": {
                                                      "expr": {
                                                        "InvokeAbstractOperationExpression": {
                                                          "name": "string",
                                                          "args": [
                                                            {
                                                              "ReferenceExpression": {
                                                                "ref": {
                                                                  "PropertyReference": {
                                                                    "PropertyReference": {
                                                                      "base": {
                                                                        "Variable": {
                                                                          "Variable": {
                                                                            "name": "string"
                                                                          }
                                                                        }
                                                                      },
                                                                      "prop": {
                                                                        "FieldProperty": {
                                                                          "FieldProperty": {
                                                                            "name": "string"
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            },
                                                            {
                                                              "UndefinedLiteral": {}
                                                            },
                                                            {
                                                              "ListExpression": {
                                                                "entries": [
                                                                  {
                                                                    "ReferenceExpression": {
                                                                      "ref": {
                                                                        "PropertyReference": {
                                                                          "PropertyReference": {
                                                                            "base": {
                                                                              "Variable": {
                                                                                "Variable": {
                                                                                  "name": "string"
                                                                                }
                                                                              }
                                                                            },
                                                                            "prop": {
                                                                              "FieldProperty": {
                                                                                "FieldProperty": {
                                                                                  "name": "string"
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                ]
                                                              }
                                                            }
                                                          ]
                                                        }
                                                      },
                                                      "check": "boolean"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "SubStep": {
                        "directive": {
                          "Directive": {
                            "name": "string",
                            "values": [
                              "string"
                            ]
                          }
                        },
                        "step": {
                          "ReturnStep": {
                            "expr": {
                              "EnumLiteral": {
                                "name": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "AsyncBlockStart"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeAbstractOperationExpression": {
                "name": "string",
                "args": [
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "StringLiteral": {
                      "s": "string"
                    }
                  },
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "ArraySetLength",
      "AllocateSharedArrayBuffer",
      "AllocateArrayBuffer"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReturnIfAbruptExpression": {
            "expr": {
              "InvokeAbstractOperationExpression": {
                "name": "string",
                "args": [
                  {
                    "IntrinsicExpression": {
                      "intr": {
                        "Intrinsic": {
                          "base": "string",
                          "props": []
                        }
                      }
                    }
                  },
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "ReferenceExpression": {
                      "ref": {
                        "Variable": {
                          "Variable": {
                            "name": "string"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            },
            "check": "boolean"
          }
        }
      }
    },
    "appearsIn": [
      "ArrayBufferCopyAndDetach"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              },
              {
                "DecimalMathValueLiteral": {
                  "n": "number"
                }
              },
              {
                "EnumLiteral": {
                  "name": "string"
                }
              },
              {
                "TrueLiteral": {}
              },
              {
                "ReferenceExpression": {
                  "ref": {
                    "Variable": {
                      "Variable": {
                        "name": "string"
                      }
                    }
                  }
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "ArrayBufferByteLength"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ListExpression": {
            "entries": [
              {
                "FieldLiteral": {
                  "name": "string"
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "AllocateSharedArrayBuffer"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "RecordExpression": {
            "tname": "string",
            "fields": [
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "ReferenceExpression": {
                    "ref": {
                      "Variable": {
                        "Variable": {
                          "name": "string"
                        }
                      }
                    }
                  }
                }
              ],
              [
                {
                  "FieldLiteral": {
                    "name": "string"
                  }
                },
                {
                  "ListExpression": {
                    "entries": [
                      {
                        "ReferenceExpression": {
                          "ref": {
                            "Variable": {
                              "Variable": {
                                "name": "string"
                              }
                            }
                          }
                        }
                      }
                    ]
                  }
                }
              ]
            ]
          }
        }
      }
    },
    "appearsIn": [
      "AddValueToKeyedGroup"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "ReferenceExpression": {
            "ref": {
              "PropertyReference": {
                "PropertyReference": {
                  "base": {
                    "PropertyReference": {
                      "PropertyReference": {
                        "base": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        },
                        "prop": {
                          "FieldProperty": {
                            "FieldProperty": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "prop": {
                    "IntrinsicProperty": {
                      "IntrinsicProperty": {
                        "intrinsic": {
                          "Intrinsic": {
                            "base": "string",
                            "props": []
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "appearsIn": [
      "AddRestrictedFunctionProperties"
    ]
  },
  {
    "step": {
      "LetStep": {
        "variable": {
          "Variable": {
            "name": "string"
          }
        },
        "expr": {
          "InvokeAbstractOperationExpression": {
            "name": "string",
            "args": [
              {
                "InvokeAbstractOperationExpression": {
                  "name": "string",
                  "args": [
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    },
                    {
                      "ReferenceExpression": {
                        "ref": {
                          "Variable": {
                            "Variable": {
                              "name": "string"
                            }
                          }
                        }
                      }
                    },
                    {
                      "ListExpression": {
                        "entries": [
                          {
                            "ReferenceExpression": {
                              "ref": {
                                "Variable": {
                                  "Variable": {
                                    "name": "string"
                                  }
                                }
                              }
                            }
                          },
                          {
                            "ReferenceExpression": {
                              "ref": {
                                "Variable": {
                                  "Variable": {
                                    "name": "string"
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    },
    "appearsIn": [
      "AddEntriesFromIterable"
    ]
  }
]